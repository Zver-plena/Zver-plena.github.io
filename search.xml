<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker</title>
      <link href="/2022/07/01/gong-ju-lei/docker/"/>
      <url>/2022/07/01/gong-ju-lei/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h2><ul><li><p><a href="https://www.runoob.com/docker/docker-exec-command.html">exec命令</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1848185">docker常用命令</a></p></li><li><p><a href="https://www.runoob.com/docker/docker-compose.html">docker-compose</a></p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> // 查看所有正在运行容器<span class="token function">docker</span> stop containerId // containerId 是容器的ID<span class="token function">docker</span> <span class="token function">ps</span> -a // 查看所有容器<span class="token function">docker</span> <span class="token function">ps</span> -a -q // 查看所有容器ID<span class="token function">docker</span> stop <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -a -q<span class="token variable">)</span></span> //  stop停止所有容器<span class="token function">docker</span>  <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> -a -q<span class="token variable">)</span></span> //   remove删除所有容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h2>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apt</title>
      <link href="/2022/07/01/gong-ju-lei/apt/"/>
      <url>/2022/07/01/gong-ju-lei/apt/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/get_set/article/details/51276609">删除软件</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CF_#803_DIV2</title>
      <link href="/2022/06/29/summary/codeforces/cf-803-div2/"/>
      <url>/2022/06/29/summary/codeforces/cf-803-div2/</url>
      
        <content type="html"><![CDATA[<h2 id="A-XOR-Mixup"><a href="#A-XOR-Mixup" class="headerlink" title="A. XOR Mixup"></a><a href="https://codeforces.com/contest/1698/problem/A">A. XOR Mixup</a></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>There is an array $a$ with $n-1$ integers. Let $x$ be the bitwise XOR of all elements of the array. The number $x$ is added to the end of the array $a$ (now it has length $n$), and then the elements are shuffled.<br>You are given the newly formed array $a$. What is $x$? If there are multiple possible values of $x$, you can output any of them.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><p>The input consists of multiple test cases. The first line contains an integer $t$ ($1 \leq t \leq 1000$)&nbsp;— the number of test cases. The description of the test cases follows.<br>The first line of each test case contains an integer $n$ ($2 \leq n \leq 100$)&nbsp;— the number of integers in the resulting array $a$.<br>The second line of each test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($0 \le a_i \le 127$)&nbsp;— the elements of the newly formed array $a$.<br>Additional constraint on the input: the array $a$ is made by the process described in the statement; that is, some value of $x$ exists.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output a single integer&nbsp;— the value of $x$, as described in the statement. If there are multiple possible values of $x$, output any of them.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p>4<br>4<br>4 3 2 5<br>5<br>6 1 10 7 10<br>6<br>6 6 6 6 6 6<br>3<br>100 100 0</p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p>3<br>7<br>6<br>0</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码:"></a>AC代码:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-06-28 22:48:53 * @LastEditTime: 2022-06-29 15:22:37 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    Tag：        1.思维题    思路：        x = a1 ^ a2 ···· ^ an        a1 = x ^ a2 ···· ^ an        所以任何一个数都可以*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B-Rising-Sand"><a href="#B-Rising-Sand" class="headerlink" title="B. Rising Sand"></a><a href="https://codeforces.com/contest/1698/problem/B">B. Rising Sand</a></h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>There are $n$ piles of sand where the $i$-th pile has $a_i$ blocks of sand. The $i$-th pile is called too tall if $1 &lt; i &lt; n$ and $a_i &gt; a_{i-1} + a_{i+1}$. That is, a pile is too tall if it has more sand than its two neighbours combined. (Note that piles on the ends of the array cannot be too tall.)<br>You are given an integer $k$. An operation consists of picking $k$ consecutive piles of sand and adding one unit of sand to them all. Formally, pick $1 \leq l,r \leq n$ such that $r-l+1=k$. Then for all $l \leq i \leq r$, update $a_i \gets a_i+1$.<br>What is the maximum number of piles that can simultaneously be too tall after some (possibly zero) operations?</p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input:"></a>Input:</h3><p>The input consists of multiple test cases. The first line contains an integer $t$ ($1 \leq t \leq 1000$)&nbsp;— the number of test cases. The description of the test cases follows.<br>The first line of each test case contains two integers $n$ and $k$ ($3 \leq n \leq 2 \cdot 10^5$; $1 \leq k \leq n$)&nbsp;— the number of piles of sand and the size of the operation, respectively.<br>The second line of each test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \le a_i \le 10^9$)&nbsp;— the sizes of the piles.<br>It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \cdot 10^5$.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output a single integer&nbsp;— the maximum number of piles that are simultaneously too tall after some (possibly zero) operations.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p>3<br>5 2<br>2 9 2 4 1<br>4 4<br>1 3 2 1<br>3 1<br>1 3 1</p><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p>2<br>0<br>1</p><h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码:"></a>AC代码:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-06-28 23:09:59 * @LastEditTime: 2022-06-29 15:25:18 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    Tag:        1.思维题    思路：        显示只要 k ！= 1 无论怎么处理都不会影响现有的最大数量        只要 k == 1 就可以每隔两个生成一个最大*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-3SUM-Closure"><a href="#C-3SUM-Closure" class="headerlink" title="C. 3SUM Closure"></a><a href="https://codeforces.com/contest/1698/problem/C">C. 3SUM Closure</a></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>You are given an array $a$ of length $n$. The array is called 3SUM-closed if for all distinct indices $i$, $j$, $k$, the sum $a_i + a_j + a_k$ is an element of the array. More formally, $a$ is 3SUM-closed if for all integers $1 \leq i &lt; j &lt; k \leq n$, there exists some integer $1 \leq l \leq n$ such that $a_i + a_j + a_k = a_l$.<br>Determine if $a$ is 3SUM-closed.</p><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input:"></a>Input:</h3><p>The first line contains an integer $t$ ($1 \leq t \leq 1000$)&nbsp;— the number of test cases.<br>The first line of each test case contains an integer $n$ ($3 \leq n \leq 2 \cdot 10^5$)&nbsp;— the length of the array.<br>The second line of each test case contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^9 \leq a_i \leq 10^9$)&nbsp;— the elements of the array.<br>It is guaranteed that the sum of $n$ across all test cases does not exceed $2 \cdot 10^5$.</p><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output “YES” (without quotes) if $a$ is 3SUM-closed and “NO” (without quotes) otherwise.<br>You can output “YES” and “NO” in any case (for example, strings “yEs”, “yes” and “Yes” will be recognized as a positive response).</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p>4<br>3<br>-1 0 1<br>5<br>1 -2 -2 1 -3<br>6<br>0 0 0 0 0 0<br>4<br>-1 2 -3 4</p><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p>YES<br>NO<br>YES<br>NO</p><h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码:"></a>AC代码:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-06-28 23:18:43 * @LastEditTime: 2022-06-29 15:29:39 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    Tag:        1.思维题    思路：        对于每个数只取三个。        暴力枚举        */</span><span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> n <span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>a<span class="token punctuation">;</span>        set <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> s<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>mp<span class="token punctuation">;</span>        <span class="token keyword">int</span> fn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>zn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>zo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> zn <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>fn<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> zo <span class="token operator">++</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>                a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> num <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="D-Fixed-Point-Guessing"><a href="#D-Fixed-Point-Guessing" class="headerlink" title="D. Fixed Point Guessing"></a><a href="https://codeforces.com/contest/1698/problem/D">D. Fixed Point Guessing</a></h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>This is an interactive problem.<br>Initially, there is an array $a = [1, 2, \ldots, n]$, where $n$ is an odd positive integer. The jury has selected $\frac{n-1}{2}$ disjoint pairs of elements, and then the elements in those pairs are swapped. For example, if $a=[1,2,3,4,5]$, and the pairs $1 \leftrightarrow 4$ and $3 \leftrightarrow 5$ are swapped, then the resulting array is $[4, 2, 5, 1, 3]$.<br>As a result of these swaps, exactly one element will not change position. You need to find this element.<br>To do this, you can ask several queries. In each query, you can pick two integers $l$ and $r$ ($1 \leq l \leq r \leq n$). In return, you will be given the elements of the subarray $[a_l, a_{l + 1}, \dots, a_r]$ sorted in increasing order.<br>Find the element which did not change position. You can make at most $\mathbf{15}$ queries.<br>The array $a$ is fixed before the interaction and does not change after your queries.<br>Recall that an array $b$ is a subarray of the array $a$ if $b$ can be obtained from $a$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.</p><h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input:"></a>Input:</h3><p>Each test contains multiple test cases. The first line contains an integer $t$ ($1 \leq t \leq 500$)&nbsp;— the number of test cases. The description of the test cases follows.<br>The first line of each test case contains an integer $n$ ($3 \leq n &lt; 10^4$; $n$ is odd)&nbsp;— the length of the array $a$.<br>After reading the first line of each test case, you should begin the interaction.<br>It is guaranteed that the sum of $n$ over all test cases does not exceed $10^4$.</p><h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><p>ctionFor each test case, begin the interaction by reading the integer $n$.<br>To make a query, output “$\texttt{?};l;r$” ($1 \leq l \leq r \leq n$) without quotes. Afterwards, you should read in $r-l+1$ integers&nbsp;— the integers $a_l, a_{l + 1}, \dots, a_r$, in increasing order. You can make at most $15$ such queries in a single test case.<br>If you receive the integer $-1$ instead of an answer or the integer $n$, it means your program has made an invalid query, has exceed the limit of queries, or has given incorrect answer on the previous test case. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.<br>When you are ready to give the final answer, output “$\texttt{!};x$” ($1 \leq x \leq n$) without quotes&nbsp;— the element that did not change position. Giving this answer does not count towards the limit of $15$ queries. Afterwards, your program must continue to solve the remaining test cases, or exit if all test cases have been solved.<br>After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:<br>fflush(stdout) or cout.flush() in C++;  </p><p>System.out.flush() in Java; </p><p>flush(output) in Pascal;</p><p>stdout.flush() in Python;</p><p>see documentation for other languages. </p><p>HacksTo make a hack, use the following format. The first line must contain an integer $t$ ($1 \leq t \leq 500$)&nbsp;— the number of test cases. The description of the test cases follows.<br>The first line of each test case must contain an integer $n$ ($3 \leq n &lt; 10^4$; $n$ is odd)&nbsp;— the length of the array $a$.<br>The second line of each test case must contain $n$ space-separated integers $a_1, a_2, \ldots, a_n$ ($1 \le a_i \le n$)&nbsp;— the elements of $a$. The array $a$ should be the result of $\frac{n-1}{2}$ disjoint swaps on the array $[1,2,\dots,n]$.</p><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><p>2<br>5</p><p>1 2 4 5</p><p>1 3 5</p><p>3</p><p>1</p><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><p>? 1 4</p><p>? 3 5</p><p>! 2</p><p>? 1 1</p><p>! 1</p><h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码:"></a>AC代码:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-06-29 17:36:37 * @LastEditTime: 2022-06-29 18:48:47 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    二分    为什么会有二分性？    if(t[i] &lt;= r &amp;&amp; t[i] &gt;=l ){        cnt++;    }    对于[l,r]区间的数交换    要么跟[l,r]区间内不相交的数进行交换贡献 2    要么跟[l,r]区间外的数进行交换 贡献 0     都是偶数性    如果 cnt 为奇数那么，当前区间[l,r]就一定存在不移动的数*/</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token char">'?'</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>l<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token operator">&lt;&lt;</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"!"</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>number<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> t<span class="token punctuation">;</span>     cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>t<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span> l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>             t <span class="token operator">=</span> <span class="token function">call</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span>l <span class="token punctuation">)</span><span class="token punctuation">{</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">)</span>                 l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">end</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/2022/06/28/gong-ju-lei/node-and/"/>
      <url>/2022/06/28/gong-ju-lei/node-and/</url>
      
        <content type="html"><![CDATA[<p>node 的安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token function">sudo</span> n stable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>npm</p><p>npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">npm</span> <span class="token comment"># 清除缓存</span><span class="token function">sudo</span> <span class="token function">npm</span> cache clean -f  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>nrm</p><p>nrm是一个代理管理器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g nrm<span class="token comment"># 列出所有代理源</span>nrm <span class="token function">ls</span><span class="token comment"># 切换淘宝源</span>nrm use taobao<span class="token comment"># 测试所有代理源的速度</span>nrm <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>npx</p><p>npx是一个工具，npm v5.2.0引入的一条命令（npx），一个npm包执行器，旨在提高从npm注册表使用软件包的体验 ，npm使得它非常容易地安装和管理托管在注册表上的依赖项，npx使得使用CLI工具和其他托管在注册表。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> <span class="token function">install</span> -g npx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>脚本</title>
      <link href="/2022/06/27/blockchain/jiao-ben/"/>
      <url>/2022/06/27/blockchain/jiao-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建quorum环境脚本"><a href="#搭建quorum环境脚本" class="headerlink" title="搭建quorum环境脚本"></a>搭建quorum环境脚本</h2><p>本机环境为<code>ubutun18.04</code></p><p>操作流程如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span><span class="token function">vim</span> install.sh<span class="token comment"># 粘贴一下代码进去</span>wq<span class="token operator">!</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x install.sh<span class="token builtin class-name">source</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建成功会在<code>quorum</code>文件夹里面</p><p>搭建脚本代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d quorum <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">mkdir</span> quorum<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token builtin class-name">cd</span> quorum<span class="token punctuation">;</span><span class="token comment"># docker </span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">docker</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span>  -z <span class="token variable">${MSG<span class="token operator">:</span>0<span class="token operator">:</span>1}</span>   <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io -y<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment"># sudo rm -rf /usr/local/bin/docker-compose;</span><span class="token comment"># docker-compose</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/usr/local/bin/docker-compose"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">curl</span> -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> -o /usr/local/bin/docker-compose<span class="token punctuation">;</span><span class="token function">wait</span> <span class="token variable">$!</span><span class="token keyword">fi</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/bin/docker-compose<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token punctuation">;</span><span class="token comment"># node and npm and npx</span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">npm</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">${MSG<span class="token operator">:</span>0<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">npm</span> -y<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">which</span> nrm<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">${MSG<span class="token operator">:</span>0<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> nrm -y<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token function">sudo</span> nrm use taobao<span class="token punctuation">;</span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">which</span>  n<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">${MSG<span class="token operator">:</span>0<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> n -y<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token function">sudo</span> n stable<span class="token punctuation">;</span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">which</span> npx<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z  <span class="token variable">${MSG<span class="token operator">:</span>0<span class="token operator">:</span>1}</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> npx -y<span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment"># add docker group</span><span class="token assign-left variable">MSG</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">groups</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token assign-left variable">FLAG</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$MSG</span><span class="token keyword">do</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">==</span> <span class="token string">"docker"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token assign-left variable">FLAG</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$FLAG</span>"</span> <span class="token operator">==</span> <span class="token string">"true"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span> <span class="token keyword">fi</span><span class="token comment"># add user into docker group</span><span class="token function">sudo</span> gpasswd -a <span class="token environment constant">$USER</span> <span class="token function">docker</span><span class="token comment"># add user into docker group</span><span class="token comment"># newgrp docker</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> restart<span class="token punctuation">;</span><span class="token function">rm</span> -rf quorum-test-network<span class="token punctuation">;</span><span class="token function">sudo</span> npx quorum-dev-quickstart <span class="token punctuation">\</span>--clientType <span class="token string">"goquorum"</span> <span class="token punctuation">\</span>--privacy <span class="token boolean">true</span> <span class="token punctuation">\</span>--quorumKeyManager <span class="token boolean">true</span> <span class="token punctuation">\</span>--monitoring <span class="token boolean">false</span> <span class="token punctuation">\</span>--blockscout <span class="token boolean">false</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token builtin class-name">cd</span> quorum-test-network/network./run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/24/java-pian/mybatis/"/>
      <url>/2022/06/24/java-pian/mybatis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊技术详解与实战[书籍]</title>
      <link href="/2022/06/24/blockchain/yi-tai-fang-ji-zhu-xiang-jie-yu-shi-zhan/"/>
      <url>/2022/06/24/blockchain/yi-tai-fang-ji-zhu-xiang-jie-yu-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="以太坊架构与组成"><a href="#以太坊架构与组成" class="headerlink" title="以太坊架构与组成"></a>以太坊架构与组成</h2><h3 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h3><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>以太坊相比比特币的区块结构的一个重大改变就是保存了三课Merkle 树根，分别是</p><ul><li>交易树</li><li>状态树</li><li>收据树</li></ul><h3 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h3><p>以太坊中新出现了一个概念：账户（Account）</p><p>账户由公钥和私钥控制， 账户的地址索引是公钥的后20字节。</p><p>账户一般分类两种类型：</p><ul><li>外部账户：简称为：”账户“、由人创建、存储以太币、由公钥和私钥控制</li><li>合约账户：由外部账户创建的账户 ？合约账户是什么</li></ul><p>一个以太坊的的账户包含如下四个部分</p><ul><li>该地址的交易次数</li><li><ul><li>用于保障每笔能且只能被处理一次的计数器；有效避免 replay 攻击？什么是replay攻击</li></ul></li><li>账户目前的余额</li><li>账户的合约二进制代码（如果是合约账户)</li></ul><h3 id="共识机制-1"><a href="#共识机制-1" class="headerlink" title="共识机制"></a>共识机制</h3><h4 id="POW-proof-of-work-工作证明"><a href="#POW-proof-of-work-工作证明" class="headerlink" title="POW(proof of work) 工作证明"></a>POW(proof of work) 工作证明</h4><p>ASIC(Application Specific Integrated Circuit)即专用集成电路</p><p><code>Ethash</code>特点</p><ul><li>挖矿的效率与cpu无关</li><li>而内存大小和带宽正相关</li><li>目的就是为了去除专用硬件的优势</li></ul><p><code>Ethash</code> 算法的基本流程</p><ul><li><p>对于每一个区块，都能通过扫描区块头的方式计算出一个种子（seed），该种子只与当前区块有关</p></li><li><p>使用种子能产生一个16MB的伪随机缓存，轻客户端会存储缓存</p></li><li><p>基于缓存再生成一个1GB的数据集，称其为DAG。数据集中的每一个元素都只依赖于缓存中的某几个元素</p></li><li><p>挖矿的过程就是从<code>DAG</code>中随机选择进行散列运算</p></li><li><p>验证者只需要花费少量的内存存储缓存就可以了，因为验证者能够基于缓存计算得到DAG中自己需要的指定位置的元素，然后验证这些指定元素的散列是不是小于某个散列值，也就是验证“矿工”的工作是否符合要求</p></li></ul><p>缓存和<code>DAG</code>中每增加30000个区块更新一次，所以绝大多数的“矿工”将把精力放在读取数据集上，而不是改变它。</p><ul><li>缓存大小设置为16MB<ul><li>是因为一个基于较小缓存的ASIC更容易被生产，16MB的缓存仍然需要非常高的带宽读取，而较小的缓存更容易进行优化</li></ul></li><li>将<code>DAG</code>的大小设为1GB<ul><li>使其内存大于大多数专门的存储器和高速缓存器，但是对于普通的计算机而言它仍然足够的小，能够利用它进行挖矿活动</li></ul></li></ul><p><code>PoW</code>依赖进行散列运算从而获得记账权</p><p>资源消费相比其他共识机制高，性能效率低</p><p>所以以太坊在项目成立之初就实现由<code>PoW</code> 逐渐切换到<code>PoS</code>。</p><h4 id="PoS（proof-of-stake）权益证明"><a href="#PoS（proof-of-stake）权益证明" class="headerlink" title="PoS（proof of stake）权益证明"></a>PoS（proof of stake）权益证明</h4><p>分布式面临的问题： 拜占庭将军问题（BFT）</p><p>pos:抵押代币越多，权重越大</p><p>pos算法的描述：</p><p>以太坊区块链由一组验证者决定，任何持有以太币的用户都能发起一笔特殊形式的交易，将他们的以太币锁定在一个存储中，从而使自己成为验证者，然后通过一个当前的验证者都能参与的共识算法，完成新区块的产生和验证过程。</p><p><code>pos算法</code>主要有两种类型的</p><ul><li><p>基于链的PoS</p></li><li><p>Byzantine Fault Tolerant 风格的PoS</p></li></ul><p>基于链的Pos：</p><p>该算法在每个时隙内伪随机地从验证者集合中选择一个验证者（比如，设置每10s一个周期，每个周期都是一个时隙），给予验证者创建新区块的权利，但是验证者要确保该块指向最多的块，因此，随着时间的推移，大多数的块都收敛到一条链上</p><p>Byzantine Fault Tolerant 风格的PoS：</p><p>分配给验证者相对的权利，让他们有权提出块并且给被提出的块投票，从而决定哪个块是新块，并在每一轮选出一个新块加入区块链。在每一轮中，每一个验证者都为某一特定的块进行“投票”，最后所有在线和诚实的验证者都将“商量”被给定的块是否可以添加到区块链中，并且意见不能改变</p><p>pos的优点：</p><ul><li><p>不需要为了保证区块链的安全而消耗大量的电力资源。由于消耗较少，通过发行新币以激励参与者继续参与网络活动的压力会减少</p></li><li><p>随着规模经济（指扩大生产规模引起经济效益增加的现象）的消失，中心化所带来的风险减小。价值100万法币的以太币带来的回报比10万法币带来的多10倍，不会有人负担大规模的生产工具却得不到相应的回报</p></li><li><p>PoS更安全。其实施的奖励惩罚措施使得各种恶意攻击变得极其昂贵，从而确保网络安全</p></li></ul><p>惩罚机制</p><p>早期惩罚机制</p><ul><li>Slasher：即如果验证者在不同的链上创建块，则在某个事后的时间点将能证明他们错误行为的记录包含在区块链中，并对他们做出扣除押金的惩罚</li><li>第二种：惩罚验证者在错链上出块的行为。</li></ul><p>以太坊PoS算法典型的带有惩罚机制的应用是<code>Casper</code></p><p>出块原理：</p><p>Casper里有很多抵押了一定代币的验证人，这些验证人将会对新块进行投票以决定它是否有效，最后根据投票结果形成大多数人意见（即多数人认为新块有效则新块就是有效的），之前投票新块有效的用户将会收回押金并获得奖励，而“作恶”的用户将会被没收保证金。</p><h3 id="以太币"><a href="#以太币" class="headerlink" title="以太币"></a>以太币</h3><p>以太币的来源</p><ul><li>矿前预付款</li><li>区块奖励<ul><li>新区块奖励+交易手续费</li></ul></li><li>叔区块奖励<ul><li>被引用后得到报酬跟区块引用的间隔层数有关、如下图</li></ul></li><li>叔区块引用奖励 <ul><li>一个区块最多引用两个叔区块，无法重复引用</li><li>得到1/32的奖励，大约0.15个以太币</li></ul></li></ul><p><img src="/2022/06/24/blockchain/yi-tai-fang-ji-zhu-xiang-jie-yu-shi-zhan/image-20220628220406345.png" alt="image-20220628220406345"></p><p>以太币的货币单位</p><ul><li><p><code>wei</code> : </p></li><li><p><code>Kwei</code> :  1e3 wei</p></li><li><p><code>Mwei</code> : 1e6 wei</p></li><li><p><code>Gwei</code> : 1e9 wei</p></li><li><p><code>microether</code> : 1e12 wei</p></li><li><p><code>millieether</code> : 1e15 wei</p></li><li><p><code>ether</code>: 1e18 wei</p></li></ul><p>以太坊上所有的账户管理和智能合约的部署都需要花费以太币，因此每个以太坊账户都需要获取以太币，这就促使了矿工挖矿。每当一个矿工挖出一个新的区块，他就能获得一笔奖励，这笔奖励由两部分构成，分为静态奖励和动态奖励。</p><ul><li>静态奖励：直接获取以太币奖励</li><li>动态奖励：如果存在叔区块，还可以从每个叔区块引用中获得额外的挖矿奖励的1/32（大约0.15个以太币），当然每个区块最多引用2个叔区块，被引用过的叔区块不能重复利用</li></ul><p>以太币交易所</p><ul><li>Coinbase</li><li>CEX.io</li><li>Bittrex</li></ul><h3 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h3><p>每一次交易都需要支付费用</p><ul><li><p>以太坊上的每一笔交易都需要支付一定的费用，用于支付交易执行所需要的计算开销。</p></li><li><p>计算开销的费用并不是以太币直接计算的，而是引入Gas作为执行开销的基本单位，通过GasPrice与以太币进行换算的。</p></li><li><p>GasPrice根据市场波动调整，避免以太币价值受市场价格的影响</p></li></ul><hr><p><strong>常见操作与Gas消耗</strong></p><p><img src="/2022/06/24/blockchain/yi-tai-fang-ji-zhu-xiang-jie-yu-shi-zhan/image-20220628220951796.png" alt="image-20220628220951796"></p><p>目前以太坊钱包客户端默认的GasPrice是0.000000001 Ether /Gas</p><p>也就是1Gwei/Gas</p><p>一般矿工来打包交易的时候也是按照Gas * Gas Price 从大到小进行排序</p><p>所以对于网络高峰期，gas费用越多，越容易被尽快打包进区块中</p><hr><p><strong>Gas LImit</strong></p><p>Tx Gas Limit </p><ul><li>交易的发起者愿意为这次交易执行所支付的<code>Gas</code>最大数量；需要发送者在交易的时候设置</li><li><code>Gas Limit</code>可以保护用户免受错误代码影响导致消耗过多的交易费</li><li>因为智能合约的复杂，所以交易的发送者并不能很准确的预估交易所会消耗的Gas</li></ul><p>Block Gas Limit</p><ul><li>单个区块所允许包含的最大Gas总数；由矿工决定</li><li><code>Gas Limit</code>设置得越大，那么矿工可以获取很多交易费，但是会需要更多的时间，可能导致当前块不是最长链，因此矿工也不能任意的改变<code>Gas Limit</code></li><li>目前以太坊协议，当前区块的<code>Gas Limit</code>只能基于上一个区块的<code>Gas Limit</code>上下波动1/1024</li><li></li></ul><hr><p><strong>交易内容</strong></p><ul><li><code>from</code></li><li><code>to</code></li><li><code>value</code>：转移的金额</li><li><code>data：</code>：合约代码</li><li><code>Gas Limit</code></li><li><code>GasPrice</code></li><li><code>nonce</code>:  用来区别同一用户发出的不同交易的标记</li><li><code>hash</code>：</li><li><code>r、s、v</code>:交易签名的三个部分，由发送者的私钥对交易hash进行签名生成</li></ul><hr><p><a href="https://learnblockchain.cn/books/geth/part2/txpool/txpool.html">以太坊交易池设计</a></p><p><strong>交易的过程</strong></p><ul><li><p><code>用户A</code> 按照格式要求在以太坊网络发起一个交易请求,该请求传向<code>用户A</code>的对等节点</p></li><li><p><code>用户B</code> 同步了次交易</p><ul><li>检查交易有效，格式、计算Gas LImit * GasPrice、(检验)</li><li>确定发送方地址，并在本地区块链上从发送账户扣去相应费用；</li><li>如果发送方账户不足，会返回错误，该交易被丢弃</li><li>如果检查通过，<code>用户B</code>将该交易存放在交易存储池中（存储）</li><li>并向其他节点转发该交易，其他节点重复<code>用户B</code> 的处理过程（转发）</li></ul></li><li><p>挖到区块的节点</p><ul><li>会从交易存储池中取交易打包到区块中，一般按照<code>Gas </code>*<code> Gas Price</code>从大到排序。</li><li>会在本地的EVM上运行被调用的合约代码，直到代码运行结束或者<code>Gas</code>用完</li><li>如果Gas不足以支撑代码运行结束，那么因代码运行而改变的状态会回滚到执行之前</li><li>但是已经支付的手续费不可收回，由挖到区块的节点获得</li><li>然后该区块会发送至对等节点，在全网中传播开</li></ul></li><li><p>其他节点如<code>用户C</code>收到该区块后</p><ul><li>验证该区块的合法性</li><li>同时里面的交易的合法性也会再次被验证</li><li>如果是执行智能合约的交易，<code>用户C</code>也会在本地的EVM上运行智能合约，互相验证结果</li><li><code>用户C</code>同步该区块，将其添加到本地 的区块链中</li><li>同时会在交易存储池中将该区块内的交易删除。</li></ul><p>  一般来说，当包含交易的区块被同步到区块链后，也于安全性的需要，还需要再挖掘一些块，这笔交易才能够算是真正地被确认</p></li></ul><h3 id="数据编码与压缩"><a href="#数据编码与压缩" class="headerlink" title="数据编码与压缩"></a>数据编码与压缩</h3><p>RLP（Recursive Length Prefix）是一种编码算法，用于编码具有嵌套结构的二进制数据</p><p>是以太坊数据序列化的主要方法</p><p>以太坊的区块和交易都会经过<code>RLP</code>编码在存储到数据库</p><hr><p><code>RLP</code>编码规则</p><p><strong>对于字符串而言</strong></p><ul><li>对于单个字节：范围<code>[0x00,0x7f] </code>，<code>RLP</code>编码就是他本身</li><li>长度为：0～55字节的字符串<ul><li><code>RLP</code>格式：前缀 + 字符串本身</li><li>前缀 = 0x80 + 字符串字节长度 ；</li></ul></li><li>长度大于55字节的字符串<ul><li><code>RLP</code>格式： 前缀 + 字符串长度的二进制形式的字节长度 + 字符串本身</li><li>前缀 = 0xb7 + 字符串长度</li></ul></li></ul><blockquote><p>字符串长度的二进制形式的字节长度</p><p>如果长度为 72 字节 ， </p><p>72 用二进制表示是 1001000</p><p>这是一个字节的长度所以应该为 1 </p><p>字符串字节长度</p><p>如果长度为72字节</p><p>那么字符串字节长度为 72</p></blockquote><p><strong>对于列表而言</strong></p><ul><li>列表总长度为 0 ～ 55字节<ul><li><code>RLP</code>格式 ：前缀 + 列表各元素项的RLP编码</li><li>前缀 = 0xc0 + 列表字节长度</li></ul></li><li>列表总长度大于 55 字节<ul><li><code>RLP</code>格式： 前缀  + 列表字节长度 + 列表各元素项的RLP编码</li><li>前缀 = 0xf7 + 列表长度的二进制形式的字节长度</li></ul></li></ul><p>例如： </p><p>“ dog “</p><p>字符串长度为 3 字节</p><p>RLP = [0x80 + 3 , ‘d’,’o’,’g]</p><p>“The purpose of RLP is to encode arbitrarily nested arrays of binary data”</p><p>字符串长度为 72 字节，</p><p>二进制表示为 ：1001000  -&gt; 这是一个字节</p><p>字符串长度72表示为 0x48</p><p>RLP = [0xb7 + 1 , 0x48 , ‘T’,’h’·····，’a’]</p>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链技术与应用[课程]</title>
      <link href="/2022/06/24/blockchain/qu-kuai-lian-ji-zhu-yu-ying-yong/"/>
      <url>/2022/06/24/blockchain/qu-kuai-lian-ji-zhu-yu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h2><h2 id="ETH-ethereum"><a href="#ETH-ethereum" class="headerlink" title="ETH(ethereum)"></a>ETH(ethereum)</h2><h3 id="状态树"><a href="#状态树" class="headerlink" title="状态树"></a>状态树</h3><ul><li>以太坊全部账户</li></ul><h3 id="交易树和收据树"><a href="#交易树和收据树" class="headerlink" title="交易树和收据树"></a>交易树和收据树</h3><p>交易树的对象：一个区块内的所有<code>Tx</code>（Transaction）</p><hr><p>收据树的对象：每个 <code>Tx</code> 的收据</p><p>收据树和交易树 一一 对应</p><h4 id="收据树的结构体"><a href="#收据树的结构体" class="headerlink" title="收据树的结构体"></a>收据树的结构体</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Receipt <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Consensus fields: These fields are defined by the Yellow Paper</span>Type              <span class="token builtin">uint8</span>  <span class="token string">`json:"type,omitempty"`</span>PostState         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token string">`json:"root"`</span>Status            <span class="token builtin">uint64</span> <span class="token string">`json:"status"`</span>CumulativeGasUsed <span class="token builtin">uint64</span> <span class="token string">`json:"cumulativeGasUsed" gencodec:"required"`</span><span class="token comment">//Bloom Filter</span>    Bloom             Bloom  <span class="token string">`json:"logsBloom"         gencodec:"required"`</span><span class="token comment">//一个交易可以包含多个log</span>    <span class="token comment">//Bloom的摘要就是根据这些log生成</span>    Logs              <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Log <span class="token string">`json:"logs"              gencodec:"required"`</span><span class="token comment">// Implementation fields: These fields are added by geth when processing a transaction.</span><span class="token comment">// They are stored in the chain database.</span>TxHash          common<span class="token punctuation">.</span>Hash    <span class="token string">`json:"transactionHash" gencodec:"required"`</span>ContractAddress common<span class="token punctuation">.</span>Address <span class="token string">`json:"contractAddress"`</span>GasUsed         <span class="token builtin">uint64</span>         <span class="token string">`json:"gasUsed" gencodec:"required"`</span><span class="token comment">// Inclusion information: These fields provide information about the inclusion of the</span><span class="token comment">// transaction corresponding to this receipt.</span>BlockHash        common<span class="token punctuation">.</span>Hash <span class="token string">`json:"blockHash,omitempty"`</span>BlockNumber      <span class="token operator">*</span>big<span class="token punctuation">.</span>Int    <span class="token string">`json:"blockNumber,omitempty"`</span>TransactionIndex <span class="token builtin">uint</span>        <span class="token string">`json:"transactionIndex"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="收据树的作用"><a href="#收据树的作用" class="headerlink" title="收据树的作用"></a>收据树的作用</h4><p>在以太坊中最重要的功能是加入了智能合约，而智能合约的执行过程比较复杂，收据树的作用是利于系统快速查询执行结果。</p><p>而在收据树中，是通过<code>Bloom Filter</code> 来实现这样的功能</p><h3 id="Bloom-Filter"><a href="#Bloom-Filter" class="headerlink" title="Bloom Filter"></a>Bloom Filter</h3><p>为范围存储的东西提供一个紧凑的摘要</p><p><strong>特点</strong></p><ul><li>可以高效的查询某个元素是否在集合之中</li><li>可能出现误报，但不一定不会出现漏报</li><li>简单的Bloom FIlter不能处理删除操作，因为同一个位置可能存在多个东西，如果想要支持删除操作，需要在摘要的每一位提供一个计数器。需要存储很多额外信息</li></ul><h3 id="GOSTH协议"><a href="#GOSTH协议" class="headerlink" title="GOSTH协议"></a>GOSTH协议</h3>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链隐私保护[论文]</title>
      <link href="/2022/06/05/blockchain/qu-kuai-lian-yin-si-bao-hu-ji-zhu/"/>
      <url>/2022/06/05/blockchain/qu-kuai-lian-yin-si-bao-hu-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="区块链隐私保护解决方案"><a href="#区块链隐私保护解决方案" class="headerlink" title="区块链隐私保护解决方案"></a>区块链隐私保护解决方案</h1><h2 id="混币（CoinJoin）"><a href="#混币（CoinJoin）" class="headerlink" title="混币（CoinJoin）"></a>混币（CoinJoin）</h2><h3 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h3><ul><li>其将来自多个用户的多笔交易 混合成单笔具有相同逻辑和多个输入输出 的新交易，以隐藏每个用户每笔交易的具 体信息。</li></ul><h3 id="技术实践"><a href="#技术实践" class="headerlink" title="技术实践"></a>技术实践</h3><ul><li><p>论文</p><ul><li>Duffield E, Diaz D. Dash: A Privacy Centric Cryptocurrency[J].[2019-12-24].<a href="https://github.com/">https://github.com/</a> dashpay/dash/wiki/Whitepaper,2015.</li></ul></li><li><p>达世(Dash)使用混币技术进行隐 私保护，同时其引入链式混合技术和盲化 技术，抵御主节点作恶的潜在风险</p></li><li><p>混a币 + 链式混合 + 盲化</p></li></ul><blockquote><p> 链式混合</p></blockquote><ul><li>指用户会选择多个主节点，其 发起的交易将依次经过各个主节点进行混 合，保证交易被充分混合</li></ul><blockquote><p>盲化技术</p></blockquote><ul><li>用户在 发起交易时，不是将交易发送到交易池 中，而是随机选取一个主节点发送，包括之后的链式混合也是随机的选取主节点</li></ul><h2 id="环签名（Ring-signature）"><a href="#环签名（Ring-signature）" class="headerlink" title="环签名（Ring signature）"></a>环签名（Ring signature）</h2><h3 id="技术原理-1"><a href="#技术原理-1" class="headerlink" title="技术原理"></a>技术原理</h3><ul><li>环签名的主要原理正 是将发起行为的用户隐藏至一个群体中， 通过隐藏真正发起行为的用户来进行隐私保护。</li></ul><blockquote><p>实施过程</p></blockquote><ul><li>环签名利用了椭圆曲线和哈希函数进行 一系列计算，大致过程是用户首先用自 己的私钥，通过椭圆曲线上乘法计算生成一把公钥，选取外界的一些其他用户的公 钥共同构成<code>公钥组</code>。</li><li>之后选取随机数，进 行特定的迭代运算，获得环签名所需的参数。</li><li>在验证环签名合法时，按照给定的顺序对参数进行特定的迭代计算，如果最终结果与某一特定值相同，则证明签名有效。</li></ul><h3 id="go语言实现"><a href="#go语言实现" class="headerlink" title="go语言实现"></a>go语言实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Copyright 2014 Hein Meling and Haibin Zhang. All rights reserved.</span><span class="token comment">// Use of this source code is governed by the MIT</span><span class="token comment">// license that can be found in the LICENSE file.</span><span class="token comment">// Package urs implements Unique Ring Signatures, as defined in</span><span class="token comment">// short version: http://csiflabs.cs.ucdavis.edu/~hbzhang/romring.pdf</span><span class="token comment">// full version: http://eprint.iacr.org/2012/577.pdf</span><span class="token keyword">package</span> urs<span class="token comment">// References:</span><span class="token comment">//   [NSA]: Suite B implementer's guide to FIPS 186-3,</span><span class="token comment">//     http://www.nsa.gov/ia/_files/ecdsa.pdf</span><span class="token comment">//   [SECG]: SECG, SEC1</span><span class="token comment">//     http://www.secg.org/download/aid-780/sec1-v2.pdf</span><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token string">"crypto/elliptic"</span><span class="token string">"crypto/sha256"</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"math/big"</span><span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token comment">// PublicKey corresponds to a ECDSA public key.</span><span class="token keyword">type</span> PublicKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>elliptic<span class="token punctuation">.</span>CurveX<span class="token punctuation">,</span> Y <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">}</span><span class="token comment">// PrivateKey corresponds to a ECDSA private key.</span><span class="token keyword">type</span> PrivateKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>PublicKeyD <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">}</span><span class="token comment">// PublicKeyRing is a list of public keys.</span><span class="token keyword">type</span> PublicKeyRing <span class="token keyword">struct</span> <span class="token punctuation">{</span>Ring <span class="token punctuation">[</span><span class="token punctuation">]</span>PublicKey<span class="token punctuation">}</span><span class="token comment">// NewPublicKeyRing creates a new public key ring.</span><span class="token comment">// All keys added to the ring must use the same curve.</span><span class="token keyword">func</span> <span class="token function">NewPublicKeyRing</span><span class="token punctuation">(</span><span class="token builtin">cap</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token operator">*</span>PublicKeyRing <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>PublicKeyRing<span class="token punctuation">{</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>PublicKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">cap</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Add adds a public key, pub to the ring.</span><span class="token comment">// All keys added to the ring must use the same curve.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PublicKeyRing<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>pub PublicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span>Ring <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Ring<span class="token punctuation">,</span> pub<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Len returns the length of ring.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PublicKeyRing<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Ring<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Bytes returns the public key ring as a byte slice.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PublicKeyRing<span class="token punctuation">)</span> <span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pub <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Ring <span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> pub<span class="token punctuation">.</span>X<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> pub<span class="token punctuation">.</span>Y<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>k PublicKey<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"X(%s)\nY(%s)\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>X<span class="token punctuation">,</span> k<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// randFieldElement returns a random element of the field underlying the given</span><span class="token comment">// curve using the procedure given in [NSA] A.2.1.</span><span class="token keyword">func</span> <span class="token function">randFieldElement</span><span class="token punctuation">(</span>c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">,</span> rand io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>params <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>BitSize<span class="token operator">/</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>rand<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>k <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>n <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>N<span class="token punctuation">,</span> one<span class="token punctuation">)</span>k<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">)</span>k<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> one<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// GenerateKey generates a public and private key pair.</span><span class="token keyword">func</span> <span class="token function">GenerateKey</span><span class="token punctuation">(</span>c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">,</span> rand io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>priv <span class="token operator">*</span>PrivateKey<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">randFieldElement</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> rand<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>priv <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>PrivateKey<span class="token punctuation">)</span>priv<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>Curve <span class="token operator">=</span> cpriv<span class="token punctuation">.</span>D <span class="token operator">=</span> kpriv<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>X<span class="token punctuation">,</span> priv<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>Y <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// hashToInt converts a hash value to an integer. There is some disagreement</span><span class="token comment">// about how this is done. [NSA] suggests that this is done in the obvious</span><span class="token comment">// manner, but [SECG] truncates the hash to the bit-length of the curve order</span><span class="token comment">// first. We follow [SECG] because that's what OpenSSL does. Additionally,</span><span class="token comment">// OpenSSL right shifts excess bits from the number if the hash is too large</span><span class="token comment">// and we mirror that too.</span><span class="token keyword">func</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">)</span> <span class="token operator">*</span>big<span class="token punctuation">.</span>Int <span class="token punctuation">{</span>orderBits <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>N<span class="token punctuation">.</span><span class="token function">BitLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>orderBytes <span class="token operator">:=</span> <span class="token punctuation">(</span>orderBits <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token operator">&gt;</span> orderBytes <span class="token punctuation">{</span>hash <span class="token operator">=</span> hash<span class="token punctuation">[</span><span class="token punctuation">:</span>orderBytes<span class="token punctuation">]</span><span class="token punctuation">}</span>ret <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>excess <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> orderBits<span class="token keyword">if</span> excess <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>ret<span class="token punctuation">.</span><span class="token function">Rsh</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token function">uint</span><span class="token punctuation">(</span>excess<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">type</span> RingSign <span class="token keyword">struct</span> <span class="token punctuation">{</span>X<span class="token punctuation">,</span> Y <span class="token operator">*</span>big<span class="token punctuation">.</span>IntC<span class="token punctuation">,</span> T <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">}</span><span class="token comment">// this is just for debugging; we probably don't want this for anything else</span><span class="token keyword">func</span> <span class="token punctuation">(</span>k <span class="token operator">*</span>RingSign<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"C[%d]: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>C<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"T[%d]: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"URS:\nX=%s\nY=%s\n%s"</span><span class="token punctuation">,</span> k<span class="token punctuation">.</span>X<span class="token punctuation">,</span> k<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">hashG</span><span class="token punctuation">(</span>c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">,</span> m <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>hx<span class="token punctuation">,</span> hy <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>d <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>hx<span class="token punctuation">,</span> hy <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// g^H'()</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// hashAllq hashes all the provided inputs using sha256.</span><span class="token comment">// This corresponds to hashq() or H'() over Zq</span><span class="token keyword">func</span> <span class="token function">hashAllq</span><span class="token punctuation">(</span>mR <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>hash <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>mR<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ax<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ay<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>by<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>hash <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// hashAllq hashes all the provided inputs using sha256.</span><span class="token comment">// This corresponds to hashq() or H'() over Zq</span><span class="token keyword">func</span> <span class="token function">hashAllqc</span><span class="token punctuation">(</span>c elliptic<span class="token punctuation">.</span>Curve<span class="token punctuation">,</span> mR <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span>hash <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>h <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>mR<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>ax<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>ay<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>by<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>hash <span class="token operator">=</span> <span class="token function">hashToInt</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// Sign signs an arbitrary length message (which should NOT be the hash of a</span><span class="token comment">// larger message) using the private key, priv and the public key ring, R.</span><span class="token comment">// It returns the signature as a struct of type RingSign.</span><span class="token comment">// The security of the private key depends on the entropy of rand.</span><span class="token comment">// The public keys in the ring must all be using the same curve.</span><span class="token keyword">func</span> <span class="token function">Sign</span><span class="token punctuation">(</span>rand io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> priv <span class="token operator">*</span>PrivateKey<span class="token punctuation">,</span> R <span class="token operator">*</span>PublicKeyRing<span class="token punctuation">,</span> m <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rs <span class="token operator">*</span>RingSign<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> R<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>ay <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>bx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>by <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>t <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>pub <span class="token operator">:=</span> priv<span class="token punctuation">.</span>PublicKeycurve <span class="token operator">:=</span> pub<span class="token punctuation">.</span>CurveN <span class="token operator">:=</span> curve<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NmR <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> R<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>hx<span class="token punctuation">,</span> hy <span class="token operator">:=</span> <span class="token function">hashG</span><span class="token punctuation">(</span>curve<span class="token punctuation">,</span> mR<span class="token punctuation">)</span> <span class="token comment">// H(mR)</span><span class="token keyword">var</span> id <span class="token builtin">int</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupsum <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">randFieldElement</span><span class="token punctuation">(</span>curve<span class="token punctuation">,</span> rand<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">randFieldElement</span><span class="token punctuation">(</span>curve<span class="token punctuation">,</span> rand<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> pub <span class="token punctuation">{</span>id <span class="token operator">=</span> jrb <span class="token operator">:=</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ax<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> ay<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>rb<span class="token punctuation">)</span>     <span class="token comment">// g^r</span>bx<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> by<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span> hy<span class="token punctuation">,</span> rb<span class="token punctuation">)</span> <span class="token comment">// H(mR)^r</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>ax1<span class="token punctuation">,</span> ay1 <span class="token operator">:=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token comment">// g^tj</span>ax2<span class="token punctuation">,</span> ay2 <span class="token operator">:=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token punctuation">,</span> R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token punctuation">,</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// yj^cj</span>ax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ay<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> curve<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span>w <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>priv<span class="token punctuation">.</span>D<span class="token punctuation">,</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> N<span class="token punctuation">)</span>bx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> by<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span> hy<span class="token punctuation">,</span> w<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// H(mR)^(xi*cj+tj)</span><span class="token comment">// TODO may need to lock on sum object.</span>sum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Sum needed in Step 3 of the algorithm</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Step 3, part 1: cid = H(m,R,{a,b}) - sum(cj) mod N</span>hashmRab <span class="token operator">:=</span> <span class="token function">hashAllq</span><span class="token punctuation">(</span>mR<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token comment">// hashmRab := hashAllqc(curve, mR, ax, ay, bx, by)</span>c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>hashmRab<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token comment">// Step 3, part 2: tid = ri - cid * xi mod N</span>cx <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span>cx<span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>priv<span class="token punctuation">.</span>D<span class="token punctuation">,</span> c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> cx<span class="token punctuation">)</span> <span class="token comment">// here t[id] = ri (initialized inside the for-loop above)</span>t<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span>hsx<span class="token punctuation">,</span> hsy <span class="token operator">:=</span> curve<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span> hy<span class="token punctuation">,</span> priv<span class="token punctuation">.</span>D<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Step 4: H(mR)^xi</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>RingSign<span class="token punctuation">{</span>hsx<span class="token punctuation">,</span> hsy<span class="token punctuation">,</span> c<span class="token punctuation">,</span> t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// Verify verifies the signature in rs of m using the public key ring, R. Its</span><span class="token comment">// return value records whether the signature is valid.</span><span class="token keyword">func</span> <span class="token function">Verify</span><span class="token punctuation">(</span>R <span class="token operator">*</span>PublicKeyRing<span class="token punctuation">,</span> m <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> rs <span class="token operator">*</span>RingSign<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> R<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>c <span class="token operator">:=</span> R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>CurveN <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Nx<span class="token punctuation">,</span> y <span class="token operator">:=</span> rs<span class="token punctuation">.</span>X<span class="token punctuation">,</span> rs<span class="token punctuation">.</span>Y<span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> y<span class="token punctuation">.</span><span class="token function">Sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> y<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">IsOnCurve</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Is tau (x,y) on the curve</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>mR <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> R<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>hx<span class="token punctuation">,</span> hy <span class="token operator">:=</span> <span class="token function">hashG</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> mR<span class="token punctuation">)</span>sum <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ax <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>ay <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>bx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span>by <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">// Check that cj,tj is in range [0..N]</span><span class="token keyword">if</span> rs<span class="token punctuation">.</span>C<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> rs<span class="token punctuation">.</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cb <span class="token operator">:=</span> rs<span class="token punctuation">.</span>C<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tb <span class="token operator">:=</span> rs<span class="token punctuation">.</span>T<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ax1<span class="token punctuation">,</span> ay1 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarBaseMult</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span>                       <span class="token comment">// g^tj</span>ax2<span class="token punctuation">,</span> ay2 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token punctuation">,</span> R<span class="token punctuation">.</span>Ring<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token comment">// yj^cj</span>ax<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ay<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span>bx1<span class="token punctuation">,</span> by1 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>hx<span class="token punctuation">,</span> hy<span class="token punctuation">,</span> tb<span class="token punctuation">)</span> <span class="token comment">// H(mR)^tj</span>bx2<span class="token punctuation">,</span> by2 <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ScalarMult</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>   <span class="token comment">// tau^cj</span>bx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> by<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>sum<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> rs<span class="token punctuation">.</span>C<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hashmRab <span class="token operator">:=</span> <span class="token function">hashAllq</span><span class="token punctuation">(</span>mR<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token comment">// hashmRab := hashAllqc(c, mR, ax, ay, bx, by)</span>hashmRab<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>hashmRab<span class="token punctuation">,</span> N<span class="token punctuation">)</span>sum<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>hashmRab<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="零知识证明-Zero-Knowledge-Proof-ZKP"><a href="#零知识证明-Zero-Knowledge-Proof-ZKP" class="headerlink" title="零知识证明(Zero-Knowledge Proof, ZKP)"></a>零知识证明(Zero-Knowledge Proof, ZKP)</h2><ul><li>论文<ul><li>Rackoff C, Simon D R. Non-interactive Zero- knowledge Proof of Knowledge and Chosen Ciphertext Attack[C].Annual International Cryptology Conference. Springer, Berlin, Heidelberg,1991:433~444.</li></ul></li></ul><h3 id="技术原理-2"><a href="#技术原理-2" class="headerlink" title="技术原理"></a>技术原理</h3><ul><li>零知识证明是指证明者能够在不向验证者提供任何有用的信息的情况下，使验证者(validator)相信某个论断是正确的。</li></ul><h3 id="技术实践-1"><a href="#技术实践-1" class="headerlink" title="技术实践"></a>技术实践</h3><blockquote><p> Zerocash区块链</p></blockquote><ul><li><p>论文</p><ul><li>Sasson E B, Chiesa A, Garman C, et al. Zerocash: Decentralized Anonymous Payments From Bitcoin[C].2014 IEEE Symposium on Security and Privacy.IEEE,2014:459~474.</li></ul></li><li><p>Zerocash中，用 户想要发起交易，需要进行铸币和浇筑两 个操作</p></li><li><p>铸币</p><ul><li>用户通过铸币过程，往池中注入一定量的资产，并向某全局列表中 写入一个承诺，<code>承诺</code>的计算必须由一个随 机生成的序列号与用户的私钥共同计算得 到，用户通过zk-SNARKs可以证明自己持有计算某个承诺所需的私钥，进而证明这个承诺中规定的资产归自己所有</li></ul></li><li><p>浇筑</p><ul><li>用户可以通过浇筑过程，将一个承诺中的一份数字资产浇筑成价值不等的多份资 产，每份资产都可以通过<code>zk-SNARKs</code>进行独立无关联的证明，用户可以灵活地发起 交易，隐秘地花掉浇筑成的资产。</li></ul></li></ul><h2 id="安全多方计算"><a href="#安全多方计算" class="headerlink" title="安全多方计算"></a>安全多方计算</h2><h3 id="技术概念"><a href="#技术概念" class="headerlink" title="技术概念"></a>技术概念</h3><ul><li>安全多方计算指在不可信的网络中， 两个或多个用户能够在不泄露本方输入信息的情况下协同合作，正确地完成计算任务，最早由姚期智的“百万富翁”问题引 入。</li></ul><h3 id="技术优点和期望"><a href="#技术优点和期望" class="headerlink" title="技术优点和期望"></a>技术优点和期望</h3><ul><li>优点<ul><li>安全多方计算本身就具有去中心化和计 算正确性，兼具隐私保护功能</li></ul></li><li>期望<ul><li>一些项目尝试将安全多方计算应用于隐私智能合约、密 钥管理、随机数生成等方面，与区块链进行 结合</li></ul></li></ul><h3 id="技术的弊端"><a href="#技术的弊端" class="headerlink" title="技术的弊端"></a>技术的弊端</h3><ul><li>安全多方计算中的流程相对复杂，使得其性能较差，实现困难，因此难以支撑大规模的应用</li></ul><h3 id="技术实践-2"><a href="#技术实践-2" class="headerlink" title="技术实践"></a>技术实践</h3><ul><li>门罗(Monero)使用环签名技术 保护数据隐私，并且使用隐蔽地址来解 决输入输出地址的关联性问题。</li></ul><blockquote><p>具体过程</p></blockquote><ul><li><p>每次进行 转账时，都会根据接收者的地址产生一个 新的中间地址，发送者将会把金额发送到 中间地址，</p></li><li><p>接收方通过用私钥检测近期区 块中的每一笔交易就可以判断转账有没有 发生</p></li><li><p>等到接收方希望花掉这笔钱时，根 据自己的私钥与这次转账的信息计算出中 间地址的私钥</p></li><li><p>用这把私钥对交易进行签 名，即可花掉中间地址中包含的数字资产</p></li></ul><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>环签名只是进行了部分的隐私保护，真正的交易发起者依然可被确定为是环签名中所拥有的公钥中的某一 个，并且可能会出现选取的公钥组中包含恶 意用户的情况，导致交易被追踪到的概率大 大增加</p><h2 id="MimbleWimble协议"><a href="#MimbleWimble协议" class="headerlink" title="MimbleWimble协议"></a>MimbleWimble协议</h2><ul><li>MimbleWimble协议是一种支持区 块链隐私保护的协议，在MimbleWimble 协议下，非交易参与者无法得知交易关 联、交易金额等信息。</li></ul><h3 id="技术原理-3"><a href="#技术原理-3" class="headerlink" title="技术原理"></a>技术原理</h3><ul><li>MimbleWimble协 议融合了<code>保密交易</code>、<code>混币</code>、<code>裁剪</code>等技术</li><li>其保密交易是通过Pedersen承诺完成的， </li><li>Pedersen承诺有着类似哈希函数的性质， 通过明文可以很容易验证Pedersen承诺， 但通过Pedersen承诺却难以获知明文，单向</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>保证交易金额的隐蔽性<ul><li>在 MimbleWimble协议下，每条交易的输入输 出金额都是通过<code>Pedersen承诺</code>而非明文的形 式给出的，这保证了交易金额的隐蔽性。</li><li>MimbleWimble协议还规定采用混币技术，将一 个区块中的交易混淆成一笔单一交易，完成对转账行为的混淆。</li></ul></li><li>保证交易金额的合法性<ul><li>MimbleWimble协议利用椭圆曲线加法的<code>同态性</code>确定输入金额与输出金额等价，并通过一种称为``Bulletproof的零知识证明技术`保证输入输出金额范围合理，避免出现金额为负等情况</li></ul></li><li>保护用户隐私<ul><li>MimbleWimble协议引入<code>裁剪</code>操作，定期将截止到当前的所有交易合并成一笔有着庞大输入与输出的交 易，把过程中不需要的交易全部删除，并定期清空历史信息<ul><li>在保证用户隐私的同 时，也为区块链扩容提供了新的思路</li></ul></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>MimbleWimble协议通过将 已有的技术进行组合提供了一套完整的隐 私保护机制<ul><li>混币 + 椭圆曲线算法加法同态性 + 裁剪  + <code>pedersen承诺</code> +<code>Bulletproof零知识证明技术</code></li></ul></li><li>技术实现<ul><li>目前针对MimbleWimble已有 一些工程实现，其中，<code>Grin</code>和<code>Beam</code>两个基 于MimbleWimble协议的新型区块链已经上 线，为区块链的隐私问题提供了一些新的 尝试。</li></ul></li></ul><h2 id="可信计算隐私保护解决方案"><a href="#可信计算隐私保护解决方案" class="headerlink" title="可信计算隐私保护解决方案"></a>可信计算隐私保护解决方案</h2><h3 id="技术概念-1"><a href="#技术概念-1" class="headerlink" title="技术概念"></a>技术概念</h3><ul><li><code>可信计算</code>是一种通过可信执行环境((Trusted Execution Enviroment，TEE),保护区块链隐私的硬件解决方案。</li></ul><h3 id="技术的作用"><a href="#技术的作用" class="headerlink" title="技术的作用"></a>技术的作用</h3><ul><li>TEE为数据的输入和代码的 执行提供一个安全的空间，并保证它们的 隐秘性、安全性和完整性。</li><li>在程序运行结束后，TEE会根据运行结果生成<code>远程证明</code>， 验证者可以利用远程证明对程序及其执行 结果进行验证。</li></ul><hr><ul><li>现阶段 TEE通常被作为CPU的一部分，用来负责密钥管理等事务</li><li>TEE提供与外界隔离 的执行环境，外界不能获取到TEE中的敏感 信息<ul><li>保证TEE中输入的隐私数据不会被泄露</li></ul></li><li>在区块链的场景下，TEE支持了端到端的计算与隐私保护<ul><li>所有用户的隐私数据 可以不用提交到区块链上，直接在本地TEE 中进行计算。</li><li>计算完成后只需提交<code>远程证明</code>到参与共识的节点进行合法性验证，即可进行共识和完成交易上链</li></ul></li><li>TEE解决了节点的执行环境不可信的问题。<ul><li>允许 区块链将一部分计算移到线下，共识的节点只需要对远程证明进行验证，无需重复执行复杂的智能合约。</li><li>减少了共识过程中重复计算带来的开销，为区块链的性能问题与扩容提供了有效的解决方案。</li></ul></li></ul><h2 id="论文的总结"><a href="#论文的总结" class="headerlink" title="论文的总结"></a>论文的总结</h2><h3 id="零知识证明、安全多方计算、MimbleWimble协议"><a href="#零知识证明、安全多方计算、MimbleWimble协议" class="headerlink" title="零知识证明、安全多方计算、MimbleWimble协议"></a>零知识证明、安全多方计算、MimbleWimble协议</h3><ul><li>优点<ul><li>上述机制等较为完备的密码学解决方案能够近乎完美地保护隐私性</li></ul></li><li>缺点<ul><li>繁琐的、开销极大的计算过程使得这类方案的性能与可扩展性不足</li><li>难以支持大规模的应用</li></ul></li></ul><h3 id="混币、环签名"><a href="#混币、环签名" class="headerlink" title="混币、环签名"></a>混币、环签名</h3><ul><li><p>优点</p><ul><li>开销较小</li></ul></li><li><p>缺点</p><ul><li>隐私性的保护略显逊色</li></ul></li><li><p>对于混币来说</p><ul><li>混币中的主节点将成为新的隐私安全瓶颈，用户隐私依然存在被攻击的可能</li></ul></li></ul><h3 id="可信计算"><a href="#可信计算" class="headerlink" title="可信计算"></a>可信计算</h3><ul><li>而基于可信 执行环境的解决方案，可以通过硬件来兼顾正确性、隐私性与高性能</li><li>但是硬件的 设计、制造成本较高，部署起来难度较 大。</li></ul><h3 id="全文总结"><a href="#全文总结" class="headerlink" title="全文总结"></a>全文总结</h3><ul><li>目前所有解决方案都有其优点与局限性</li><li>我们应该为不同的应用需求选取不同的实现</li><li>并努力突破当前的局限，寻找兼顾隐私与性能的解决方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>以太坊Solidity开发</title>
      <link href="/2022/06/04/blockchain/yi-tai-fang-solidity-kai-fa/"/>
      <url>/2022/06/04/blockchain/yi-tai-fang-solidity-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="solc"><a href="#solc" class="headerlink" title="solc"></a>solc</h2><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g solc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">solcjs &lt;Solidity文件地址&gt;.sol --bin --abi --optimize -o &lt;输出文件夹路径&gt;///jsonecho "{}" | solcjs --standard-json test.sol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数</p><p>通过<code>solcjs --help</code>可以查看,这里列一下常用的</p><ul><li><code>api</code>:Application Binary Interface(应用程序二进制接口)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--version                            Show version and exit.--optimize                           Enable bytecode optimizer. <span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>--bin                                Binary of the contracts <span class="token keyword">in</span> hex.--abi                                ABI of the contracts.-o, --output-dir <span class="token operator">&lt;</span>output-directory<span class="token operator">&gt;</span>  Output directory <span class="token keyword">for</span> the contracts.-p, --pretty-json                    Pretty-print all JSON output. <span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>-v, --verbose                        More detailed console output. <span class="token punctuation">(</span>default: <span class="token boolean">false</span><span class="token punctuation">)</span>-h, --help                           display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vim中 <code>json</code>格式化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%<span class="token operator">!</span>python3 -m json.tool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Hardhat"><a href="#Hardhat" class="headerlink" title="Hardhat"></a>Hardhat</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用yarn命令安装hardhat插件 hardhat用来测试智能合约</span><span class="token function">yarn</span> <span class="token function">add</span> -D @nomiclabs/hardhat-ethers <span class="token function">yarn</span> <span class="token function">add</span> -D @nomiclabs/hardhat-waffle<span class="token comment"># 安装用于测试的组件(用于编写智能合约测试用例)</span><span class="token function">yarn</span> <span class="token function">add</span> -D chai<span class="token comment"># 安装ethers(与区块链交互的完整组件库、代码少、接口简单、和web3先比推荐使用ethers)</span><span class="token function">yarn</span> <span class="token function">add</span> -D ethers<span class="token function">yarn</span> <span class="token function">add</span> --save-dev  ts-node typescript<span class="token function">yarn</span> <span class="token function">add</span> --save-dev chai @types/node @types/mocha @types/chai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>hardhat</code>的命令</p><p><code>npx hardhat --help</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Usage: hardhat <span class="token punctuation">[</span>GLOBAL OPTIONS<span class="token punctuation">]</span> <span class="token operator">&lt;</span>TASK<span class="token operator">&gt;</span> <span class="token punctuation">[</span>TASK OPTIONS<span class="token punctuation">]</span>GLOBAL OPTIONS:  --config              A Hardhat config file.  --emoji               Use emoji <span class="token keyword">in</span> messages.  --help                Shows this message, or a task<span class="token string">'s help if its name is provided  --max-memory          The maximum amount of memory that Hardhat can use.  --network             The network to connect to.  --show-stack-traces   Show stack traces.  --tsconfig            A TypeScript config file.  --verbose             Enables Hardhat verbose logging  --version             Shows hardhat'</span>s version.AVAILABLE TASKS:  check         Check whatever you need  clean         Clears the cache and deletes all artifacts  compile       Compiles the entire project, building all artifacts  console       Opens a hardhat console  flatten       Flattens and prints contracts and their dependencies  <span class="token builtin class-name">help</span>          Prints this message  <span class="token function">node</span>          Starts a JSON-RPC server on <span class="token function">top</span> of Hardhat Network  run           Runs a user-defined script after compiling the project  <span class="token builtin class-name">test</span>          Runs mocha tests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建节点网络"><a href="#创建节点网络" class="headerlink" title="创建节点网络"></a>创建节点网络</h3><p>命令<code>npx hardhat node</code></p><p><a href="http://127.0.0.1:8545/">http://127.0.0.1:8545/</a></p><h3 id="编写合约"><a href="#编写合约" class="headerlink" title="编写合约"></a>编写合约</h3><p>编写一个简单合约<code>contracts/HelloWorld.sol</code></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">import</span> <span class="token string">"hardhat/console.sol"</span><span class="token punctuation">;</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token builtin">uint</span> number <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> number <span class="token operator">+</span> <span class="token number">5</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试合约"><a href="#测试合约" class="headerlink" title="测试合约"></a>测试合约</h3><p>测试合约<code>test/HelloWorld-test.ts</code></p><p>运行<code>npx hardhat test HelloWorld-test.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"> <span class="token keyword">import</span><span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">"chai"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span><span class="token string">"hardhat"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"this is a test "</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> helloWorld <span class="token operator">=</span> <span class="token keyword">await</span> HelloWorld<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">await</span> helloWorld<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">await</span> helloWorld<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p>部署合约<code>scripts/deploy-HelloWorld.ts</code></p><p>执行命令<code>npx hardhat run scripts/deploy-HelloWorld.ts --network localhost</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token string">"@nomiclabs/hardhat-ethers"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"hardhat"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> helloWorld <span class="token operator">=</span> <span class="token keyword">await</span> HelloWorld<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> helloWorld<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> helloWorld<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span>helloWorld<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"HelloWorld:"</span><span class="token punctuation">,</span><span class="token keyword">await</span> helloWorld<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>？了解这些安装的东西是什么？作用是什么？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">add</span> -D webpack<span class="token function">npm</span> <span class="token function">add</span> -D webpack-cli<span class="token function">npm</span> <span class="token function">add</span> -D ts-loader<span class="token function">npm</span> <span class="token function">add</span> -D html-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在前端显示调用合约"><a href="#在前端显示调用合约" class="headerlink" title="在前端显示调用合约"></a>在前端显示调用合约</h3><p>首先用python开启一个本地服务</p><p><code>python3 -m http.server 6969</code></p><p>首先需要发布合约，然后之前上述的部署合约的方式部署就会得到</p><p><code>npx hardhat run scrips/deploy-HelloWorld.ts</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Contract deployment: HelloWorld Contract address:    0x5fbdb2315678afecb367f032d93f642f64180aa3 Transaction:         0x48a452f0ec84b371415ef0000e1316c03aee5496b7f2fb58383d50c51faaf418 From:                0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 Value:               <span class="token number">0</span> ETH Gas used:            <span class="token number">135055</span> of <span class="token number">135055</span> Block <span class="token comment">#1:            0xb8b1205b507f9e9d1079049c787108737072b3f8c7f46998f09fb2af58c2baef</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>src</code>目录下创建<code>index.html</code>和<code>index.ts</code></p><p>调用合约<code>index.ts</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"ethers"</span><span class="token punctuation">;</span><span class="token comment">// 获得 metamask</span><span class="token keyword">function</span> <span class="token function">getEth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//@ts-ignore</span>    <span class="token keyword">const</span> eth <span class="token operator">=</span> window<span class="token punctuation">.</span>ethereum<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>eth<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"get matamask and a positive attitude"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> eth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 查询账户是否存在</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hasAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> eth <span class="token operator">=</span> <span class="token function">getEth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> accounts  <span class="token operator">=</span> <span class="token keyword">await</span> eth<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">"eth_accounts"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> accounts <span class="token operator">&amp;&amp;</span> accounts<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//查询账户是否可以访问</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">requestAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> eth <span class="token operator">=</span><span class="token function">getEth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> accounts <span class="token operator">=</span> <span class="token keyword">await</span> eth<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">"eth_requestAccounts"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> accounts <span class="token operator">&amp;&amp;</span> accounts<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//用这个账户去访问一个合约里的方法</span><span class="token comment">//</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">await</span> <span class="token function">hasAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">await</span> <span class="token function">requestAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span> <span class="token punctuation">(</span><span class="token string">"Please let me take your money"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Contract</span><span class="token punctuation">(</span>        <span class="token comment">//contract address</span>        <span class="token string">"0x5fbdb2315678afecb367f032d93f642f64180aa3"</span><span class="token punctuation">,</span>        <span class="token comment">//functions</span>        <span class="token punctuation">[</span>            <span class="token string">"function hello() public view returns(string memory)"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">//provider</span>        <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">Web3Provider</span><span class="token punctuation">(</span><span class="token function">getEth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//前端显示</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">await</span> hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后用webpack打包在<code>dist</code>目录下</p><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换node 版本</span><span class="token comment"># 方法一</span>brew unlink node@12 <span class="token operator">&amp;&amp;</span> brew <span class="token function">link</span> --overwrite --force node@10<span class="token comment"># 方法二</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/opt/node@8/bin:<span class="token environment constant">$PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、查看当前镜像源：yarn config get registry<span class="token number">2</span>、切换淘宝镜像源：yarn config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span class="token number">3</span>、切换为yarn自带的镜像源：yarn config <span class="token builtin class-name">set</span> registry https://registry.yarnpkg.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solidity语法"><a href="#solidity语法" class="headerlink" title="solidity语法"></a>solidity语法</h2><ul><li><a href="https://blog.csdn.net/weixin_45067603/article/details/105738788">solidity学习过程博客记录</a></li><li><a href="https://www.osgeo.cn/solidity/types.html">solidity语法</a></li></ul><h3 id="函数可见性"><a href="#函数可见性" class="headerlink" title="函数可见性"></a>函数可见性</h3><p>函数可以确定被内部及派生合约的可访问性，这里有 4 种可见性</p><ul><li><code>external</code> :  只可以被外部合约或交易调用，在内部调用需要使用 this.f()</li><li><code>public</code> :  可以被内部和外部调用</li><li><code>internal</code> : 可以被当前合约及其派生合约调用，无法在外部调用</li><li><code>private</code> : 意味着它只能被合约内部调用</li></ul><p>设置为 private 或  internal，只能防止其他合约读取或修改信息，但它仍然可以在链外查看到</p><h3 id="solidity函数修饰符"><a href="#solidity函数修饰符" class="headerlink" title="solidity函数修饰符"></a>solidity函数修饰符</h3><ul><li><code>pure</code> for functions: Disallows modification or access of state.</li><li><code>view</code> for functions: Disallows modification of state.</li><li><code>payable</code> for functions: Allows them to receive Ether together with a call.<ul><li>一个函数要能够接收以太币，必须附加一个Payable的修饰符。而一个没有任何Payable修饰符的函数将永远无法收到任何以太币。</li></ul></li><li><code>constant</code> for state variables: Disallows assignment (except initialisation), does not occupy storage slot.</li><li><code>immutable</code> for state variables: Allows exactly one assignment at construction time and is constant afterwards. Is stored in code.</li><li><code>anonymous</code> for events: Does not store event signature as topic.</li><li><code>indexed</code> for event parameters: Stores the parameter as topic.</li><li><code>virtual</code> for functions and modifiers: Allows the function’s or modifier’s behaviour to be changed in derived contracts.</li><li><code>override</code>: States that this function, modifier or public state variable changes the behaviour of a function or modifier in a base contract.</li></ul><h3 id="gas优化"><a href="#gas优化" class="headerlink" title="gas优化"></a>gas优化</h3><blockquote><p>数据类型</p></blockquote><p>通常情况下我们不会考虑使用 uint 变种，因为无论如何定义 uint的大小，Solidity 为它保留256位的存储空间。例如，使用 uint8 而不是uint（uint256）不会为你节省任何 gas。</p><p>除非，把 uint 绑定到 struct 里面。</p><p>所以，当 uint 定义在一个 struct 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 struct：</p><p>uint c; uint32 a; uint32 b; 和 </p><p>uint32 a; uint c; uint32 b;</p><p>前者比后者需要的gas更少，因为前者把uint32放一起了。</p><blockquote><p>函数优化</p></blockquote><p>使用 view 可以节省gas</p><p>当玩家从外部调用一个view函数，是不需要支付一分 gas 的。</p><p>这是因为 view 函数不会真正改变区块链上的任何数据 - 它们只是读取。因此用 view 标记一个函数，意味着告诉 web3.js，运行这个函数只需要查询你的本地以太坊节点，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。</p><p>注意：如果一个 view 函数在另一个函数的内部被调用，而调用函数与 view 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 view 的函数只有在外部调用时才是免费的。</p><h2 id="web3js交互"><a href="#web3js交互" class="headerlink" title="web3js交互"></a>web3js交互</h2><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p><code>transfer </code>：出现错误的时候会回溯</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><h3 id="调用合约函数"><a href="#调用合约函数" class="headerlink" title="调用合约函数"></a>调用合约函数</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">feedOnKitty</span><span class="token punctuation">(</span><span class="token parameter">zombieId<span class="token punctuation">,</span> kittyId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//前端显示内容</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txStatus"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Eating a kitty. This may take a while..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用合约函数</span>        <span class="token keyword">return</span> cryptoZombies<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">feedOnKitty</span><span class="token punctuation">(</span>zombieId<span class="token punctuation">,</span> kittyId<span class="token punctuation">)</span>    <span class="token comment">//发送的用户的信息</span>        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             <span class="token comment">//调用者</span>            <span class="token literal-property property">from</span><span class="token operator">:</span> userAccount<span class="token punctuation">,</span>            <span class="token comment">//ether 转换成 wei</span>            <span class="token literal-property property">value</span><span class="token operator">:</span> web3js<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token string">"0.001"</span><span class="token punctuation">,</span><span class="token string">"ether"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">//成功之后</span>        <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"receipt"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">receipt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txStatus"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Ate a kitty and spawned a new Zombie!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//刷新页面</span>          <span class="token function">getZombiesByOwner</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>displayZombies<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//错误处理</span>        <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txStatus"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h3><p>通过web3js中订阅事件，这样可以在每次事件发生后触发一系列代码逻辑</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//假设合约中存在这样一个事件，每次创建新的Zombie的时候触发event NewZombie(uint zombieId, string name, uint dna);//web3js中订阅这个事件//下列的代码会在任何僵尸生成的时候会发出信息，而不仅仅是对当前用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">cryptoZombies<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">NewZombie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>    <span class="token string">"data"</span><span class="token punctuation">,</span>     <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> zombie <span class="token operator">=</span> event<span class="token punctuation">.</span>returnValues<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"一个新僵尸诞生了！"</span><span class="token punctuation">,</span> zombie<span class="token punctuation">.</span>zombieId<span class="token punctuation">,</span> zombie<span class="token punctuation">.</span>name<span class="token punctuation">,</span> zombie<span class="token punctuation">.</span>dna<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>//仅仅对当前用户发出信息//为了筛选仅和当前用户相关的事件，我们的 Solidity 合约将必须使用 indexed 关键字event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);//webjs订阅事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">cryptoZombies<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">Transfer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">_to</span><span class="token operator">:</span> userAccount <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>returnValues<span class="token punctuation">;</span>  <span class="token comment">// 当前用户更新了一个僵尸！更新界面来显示</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询过去事件"><a href="#查询过去事件" class="headerlink" title="查询过去事件"></a>查询过去事件</h3><ul><li><code>getPastEvents</code></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">用 getPastEvents 查询过去的事件用过滤器 fromBlock 和 toBlock 给 Solidity 一个事件日志的时间范围("block" 在这里代表以太坊区块编号）：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">cryptoZombies<span class="token punctuation">.</span><span class="token function">getPastEvents</span><span class="token punctuation">(</span>    <span class="token string">"NewZombie"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    <span class="token literal-property property">fromBlock</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">toBlock</span><span class="token operator">:</span> <span class="token string">'latest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">events</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// events 是可以用来遍历的 `event` 对象 </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web3js调用合约"><a href="#web3js调用合约" class="headerlink" title="web3js调用合约"></a>web3js调用合约</h3><ul><li>call 用来调用 view 和 pure 函数。它只运行在本地节点，不会在区块链上创建事务</li><li>send 将创建一个事务并改变区块链上的数据。你需要用 send 来调用任何非 view 或者 pure 的函数。</li></ul><h2 id="Metamask"><a href="#Metamask" class="headerlink" title="Metamask"></a>Metamask</h2><p>当你需要用Metamask的时候需要保证当前浏览器已经安装了这个插件</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">if</span><span class="token punctuation">(</span>typeof window<span class="token punctuation">.</span>ethereum <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Metamask is installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async/await"></a>async/await</h3><ul><li><a href="https://blog.csdn.net/qq_41761591/article/details/102534763">什么是async/await</a></li></ul><hr><ul><li><code>async</code>:异步函数</li><li><code>await</code>:</li></ul><h2 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h2><ul><li><code>BTW</code>：</li></ul>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/02/blockchain/fen-bu-shi-shu-zi-zi-chan-jiao-yi-ping-tai-de-wen-ti-yu-ping-gu/"/>
      <url>/2022/06/02/blockchain/fen-bu-shi-shu-zi-zi-chan-jiao-yi-ping-tai-de-wen-ti-yu-ping-gu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建Quorum区块链</title>
      <link href="/2022/05/31/blockchain/da-jian-quorum/"/>
      <url>/2022/05/31/blockchain/da-jian-quorum/</url>
      
        <content type="html"><![CDATA[<h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><h3 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h3><ul><li><a href="https://www.jianshu.com/p/99134844256b">什么是geth</a></li><li><a href="https://www.jianshu.com/p/e1292dcc72c1">geth的使用</a></li></ul><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置 copy公钥到云服务器</span>ssh-copy-id mrl@10.10.10.10  <span class="token comment"># 这里输入自己的用户和ip： 用户名@ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="区块链相关概念"><a href="#区块链相关概念" class="headerlink" title="区块链相关概念"></a>区块链相关概念</h3><ul><li><a href="https://consensys.net/docs/goquorum/en/latest/concepts/blockchain-basics/blockchain-components/">blockchainBasic</a></li><li><a href="https://www.qikegu.com/docs/4682">概念教程</a></li></ul><h4 id="区块链相关名词解释"><a href="#区块链相关名词解释" class="headerlink" title="区块链相关名词解释"></a>区块链相关名词解释</h4><ul><li><a href="https://www.jianshu.com/p/1041b6b9b094">区块链相关名词解释</a></li></ul><h4 id="peers和validator"><a href="#peers和validator" class="headerlink" title="peers和validator"></a>peers和validator</h4><ul><li><a href="https://www.qklw.com/top/20200802/107906.html">什么是validator</a></li></ul><h3 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h3><ul><li>轻量型日志采集器</li></ul><h3 id="Constellation协议"><a href="#Constellation协议" class="headerlink" title="Constellation协议"></a>Constellation协议</h3><ul><li><p>Constellation协议实现了一个水平可伸缩的区块链架构，称为<strong>扩展信任链</strong>，带有一个点对点层，称为可以部署在移动设备上的Gossip协议</p></li><li><p><a href="https://besu.hyperledger.org/en/stable/Tutorials/Developer-Quickstart/">https://besu.hyperledger.org/en/stable/Tutorials/Developer-Quickstart/</a>)</p></li><li><p><a href="https://www.jianshu.com/p/254794d5e741">https://www.jianshu.com/p/254794d5e741</a>)</p></li></ul><h3 id="Hyperledger-Besu"><a href="#Hyperledger-Besu" class="headerlink" title="Hyperledger Besu"></a>Hyperledger Besu</h3><ul><li><p>以太坊客户端</p></li><li><p>语言：java</p></li></ul><hr><ul><li><a href="https://besu.hyperledger.org/en/stable/#what-is-hyperledger-besu">介绍besu</a></li><li>[快速搭建besu](</li></ul><h3 id="GoQuorum"><a href="#GoQuorum" class="headerlink" title="GoQuorum"></a>GoQuorum</h3><ul><li><p>Quorum 是以太坊 Go 语言实现版本（Geth）的一个分支</p></li><li><p>以太坊客户端</p></li><li><p>语言：go</p></li></ul><hr><ul><li><p><a href="https://consensys.net/docs/goquorum/en/latest/">Goquorum官网</a></p></li><li><p><a href="https://blog.csdn.net/yijiull/article/details/113768703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165409192016782248567740%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165409192016782248567740&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-113768703-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=GoQuorum&amp;spm=1018.2226.3001.4187">goquorum博客简介</a></p></li><li></li></ul><h3 id="Codefi-Orchestrate"><a href="#Codefi-Orchestrate" class="headerlink" title="Codefi Orchestrate"></a>Codefi Orchestrate</h3><ul><li><p><a href="https://www.panewslab.com/zh/articledetails/1642584206099698.html">介绍</a></p></li><li><p><a href="https://docs.orchestrate.consensys.net/en/stable/">介绍2</a></p></li><li><p>Orchestrate是一个以太坊事务编排系统</p></li><li></li></ul><h3 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h3><ul><li><p><a href="https://www.guru99.com/elk-stack-tutorial.html">介绍ELK</a></p></li><li><p>ELK是三个开源软件的集合Elasticsearch, Logstash, and Kibana</p></li><li><p>日志便利。</p></li></ul><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><ul><li>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的,开源的</li><li></li></ul><h4 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h4><ul><li><a href="https://www.cnblogs.com/cjsblog/p/9459781.html">Logstash介绍</a></li><li>Logstash是一个开源的服务器端数据处理管道，可以同时从多个数据源获取数据，并对其进行转换，然后将其发送到你最喜欢的“存储”</li><li></li></ul><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><ul><li>Kibana 是一种数据可视化和挖掘工具，可以用于日志和时间序列分析、应用程序监控和运营智能使用案例。</li><li></li></ul><h3 id="EVM（Ethereum-Virtual-Machine-）"><a href="#EVM（Ethereum-Virtual-Machine-）" class="headerlink" title="EVM（Ethereum Virtual Machine ）"></a>EVM（Ethereum Virtual Machine ）</h3><ul><li>以太坊虚拟机（<strong>EVM</strong>）使用了256比特长度的机器码，<strong>是</strong>一种基于堆栈的虚拟机，用于执行以太坊智能合约</li><li></li></ul><h3 id="Blockscout"><a href="#Blockscout" class="headerlink" title="Blockscout"></a>Blockscout</h3><ul><li><p><a href="https://blockscout.com/xdai/mainnet/">官网</a></p></li><li><p>检查和分析基于EVM的工具</p></li><li><p><a href="http://localhost:26000/">http://localhost:26000</a></p></li><li></li></ul><h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><ul><li><a href="http://localhost:9090/">http://localhost:9090</a></li><li>Prometheus是一套开源的系统监控报警框架</li></ul><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><ul><li><a href="http://localhost:3000/">http://localhost:3000</a></li><li>Grafana 是一个开源的监控数据分析和可视化套件。最常用于对基础设施和应用数据分析的时间序列数据进行可视化分析</li></ul><h3 id="Splunk"><a href="#Splunk" class="headerlink" title="Splunk"></a>Splunk</h3><ul><li><a href="http://localhost:8000/">http://localhost:8000</a></li></ul><h2 id="Geth-go-ethereum"><a href="#Geth-go-ethereum" class="headerlink" title="Geth(go-ethereum)"></a>Geth(go-ethereum)</h2><ul><li><p>Official Go implementation of the Ethereum protocol</p></li><li><p><a href="https://github.com/ethereum/go-ethereum">Geth的Github地址</a></p></li><li><p><a href="https://www.jianshu.com/p/e1292dcc72c1">ETH官方客户端Geth的使用(一)</a></p></li></ul><h2 id="quorum介绍"><a href="#quorum介绍" class="headerlink" title="quorum介绍"></a>quorum介绍</h2><ul><li><a href="https://blog.csdn.net/kk3909/article/details/105051941#:~:text=Quorum%20Node%EF%BC%8C%E5%8F%88%E5%90%8DQuorum%20Client%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E8%83%96%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%85%B6%E9%9A%90%E7%A7%81%E4%BA%A4%E6%98%93%E5%8A%9F%E8%83%BD%E6%93%8D%E4%BD%9C%E4%BE%9D%E8%B5%96%E7%94%A8%E4%BA%8E%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86%E7%A7%81%E6%9C%89%E4%BA%A4%E6%98%93%20playload%20%E7%9A%84Transaction%20Manager%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%82,Quorum%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%8A%E5%85%B6%E4%BE%9D%E8%B5%96%E9%A1%B9%EF%BC%88Transaction%20Manager%2C%20Peers%2C%20and%20Enclave%EF%BC%89%E9%83%BD%E4%BD%BF%E7%94%A8%E4%BC%A0%E7%BB%9F%E7%9A%84TCP%20%2F%20UDP%E4%BC%A0%E8%BE%93%E5%B1%82%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1%E3%80%82">quorum工作原理</a></li><li><a href="https://learnblockchain.cn/article/277">Quorum简介</a></li></ul><h3 id="Quorum-是什么"><a href="#Quorum-是什么" class="headerlink" title="Quorum 是什么"></a>Quorum 是什么</h3><ul><li><p>Quorum 是由 JPMorgan 推出的一种分布式账本协议</p></li><li><p>Quorum 主要提供了一下对以太坊进行扩展的特性：</p><ul><li>对隐私交易和隐私合约的支持</li><li>基于投票的共识机制</li><li>支持对区块链节点的接入权限管理</li><li>更高的性能</li></ul></li><li><p>Quorum 主要由下面几个部分组成：</p><ul><li>Quorum 节点（也就是 Geth 的一个修改版本）</li><li>隐私管理器（Constellation/Tessera）<ul><li>交易管理器</li><li>Enclave</li></ul></li></ul></li></ul><p>逻辑架构图</p><p><img src="/2022/05/31/blockchain/da-jian-quorum/image-20220605213015488.png" alt="image-20220605213015488"></p><h3 id="Quorum-的设计"><a href="#Quorum-的设计" class="headerlink" title="Quorum 的设计"></a>Quorum 的设计</h3><h3 id="quorum-node"><a href="#quorum-node" class="headerlink" title="quorum node"></a>quorum node</h3><h4 id="Tessera"><a href="#Tessera" class="headerlink" title="Tessera"></a>Tessera</h4><ul><li><p><a href="https://www.jianshu.com/p/207235af9f40">Tessera博客介绍</a></p></li><li><p>GoQuorum node which has a corresponding <code>Tessera </code>node for privacy</p></li><li><p>Tessera是一个无状态的java系统，主要用来保证Quorum中的加密、解密和私有交易的分布式。</p></li></ul><blockquote><p>Tessera作用</p></blockquote><p>每个Tessera节点</p><ul><li><p>生成和保护许多公私钥对</p></li><li><p>自我管理，通过公钥尽可能少的和其他节点连接，从而可以通过连接的节点进而连接整个网络的所有节点。</p></li><li><p>提供了公开和私密的API通讯接口</p><ul><li>公开主要在Tessera节点之间进行通讯</li><li>私密主要是在quorum内部进行通讯</li></ul></li><li><p>基于多种可信任模型支持双向<a href="https://www.jianshu.com/p/56cff0b5dffb">SSL</a>通讯,支持TLS证等</p></li><li><p>支持IP白名单</p></li><li><p>可以连接支持JDBC的SQL数据库</p></li><li></li></ul><blockquote><p>工作流程</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14403164-1855e14683c3e7d1.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p><ul><li>txn(transaction)：交易</li></ul><p>上图展示的流程是Quorum一笔私密交易的流程，这笔交易只有参与者A与参与者B知道，C并不是这笔交易的成员。</p><ol><li><p>A 向Quorum节点发送一笔交易，注明具体的交易payload，并且设置<code>privateFor</code>字段的值为A(可选)和B的公钥</p></li><li><p>A的Quorum节点将这笔交易发送给自己配套的Tessera Node A的<code>交易管理器</code>，交易管理器存储交易的payload</p></li><li><p>Tessera Node A的<code>交易管理器</code>把这笔交易发给<code>Enclave</code>组件，<code>Enclave</code>组件进行交易发起者（A）的身份校验（私钥签名和公钥校验）并且加密payload</p></li><li><p><code>Enclave</code>的加密过程：</p><ol><li><p>随机生成一个主钥 RMK（random master key）和一个随机数</p></li><li><p>根据上一步生成的<code>RMK</code>和<code>随机数</code>加密交易payload- </p><ul><li>–（<em>加密payload</em>）</li></ul></li><li><p>遍历交易参与方（在本例中是A和B）</p><ul><li><p>针对每个参与方：根据<code>Enclave</code>和每个参与方的公钥，会生成一个<code>共享密钥</code>，生成一个<code>随机数</code></p><ul><li>–(<em>生成共享秘钥和随机数</em>)</li></ul></li><li><p>根据上述的<code>共享密钥</code>和<code>随机数</code>加密<code>RMK</code>。这样保证了每个加密RMK对每一个交易参与方是独一无二的，并且只能由该参与方读取</p><ul><li>–（<em>加密RMK</em>）</li></ul></li></ul></li><li><p>返回第二小步生成的加密payload和第三小步生成的所有加密RMKs给<code>交易处理器</code></p></li></ol></li><li><p>A的<code>交易处理器</code>计算加密载荷的哈希值并且在数据库中存储(<code>加密payload</code>, <code>hash</code>,<code> 加密RMKs</code>)</p></li><li><p>A的<code>交易管理器</code>通过HTTPS向B的<code>交易管理器</code>发送<code>加密payload</code>，和专门给B的<code>共享密钥</code>+<code>随机数</code>。B接收到以后回复Ack/Nack。</p></li><li><p>A的<code>交易管理器</code>在收到B的接收回复后，将交易的hash值发送给A的Quorum节点，Quorum节点会用hash值替换原有的交易payload，并且将交易的V值改为37或38，向其他节点表明这是一笔私有交易</p></li><li><p>随后这笔交易会利用原有的Etherum P2P通信在节点之间同步</p></li><li><p>一个包含该交易的块被打包出来，并发送给网络中的所有节点</p></li><li><p>在处理块时，所有的节点都会处理这条交易，发现交易V值为37或38，Quorum节点会把交易的内容（Hash值）发给自己对应的Tessera节点的<code>交易处理器</code>，交易处理器根据hash值查找自己的数据库，看自己是否能够解密该笔交易</p></li><li><p>因为C不是这笔交易的参与者，所以C的Quorum节点会收到<code>交易处理器</code>的<code>NotARecipient</code>回复，然后C会跳过这笔交易，并且不会改变自己的Priviate stateDB。</p></li><li><p>A和B的<code>交易处理器</code>会发现自己能够处理这笔交易，因此会调用<code>Enclave</code>，向其传入加密payload，加密的秘钥和交易签名等。</p></li><li><p><code>Enclave</code>验证交易签名，然后用<code>Enclave</code>存储的<code>共享密钥</code>和<code>随机数</code>解密获得<code>RMK</code>，再用<code>RMK</code>和<code>随机数</code>解密<code>payload</code>获得交易明文。</p></li><li><p>A和B的<code>交易处理器</code>将解密后的交易内容发送给EVM执行执行智能合约。本次智能合约的执行只会更新Quorum节点的Private stateDB。（备注：一旦交易被执行以后，这条执行记录就被废弃了，如果想要读取交易内容必须重新按上述流程走一遍Quorum私有交易）</p></li></ol><h4 id="Enclave"><a href="#Enclave" class="headerlink" title="Enclave"></a>Enclave</h4><h3 id="block结构"><a href="#block结构" class="headerlink" title="block结构"></a>block结构</h3><ul><li><code>hash</code>：哈希值</li><li><code>Tramsactions</code>: 事务</li><li><code>uncles</code>: </li><li><code>Size</code>: 区块大小</li><li><code>Gas Used</code>: 手续费 </li><li><code>Timestamp</code>: 时间戳</li><li><code>State Root</code>:  </li><li><code>Receipt Root</code>：接受方</li><li><code>Txn Root</code>：</li><li></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hash0x4e5f59c378480849ef51699144c869af5ef5ea5097a7d9fee709766e7dda2792Transactions<span class="token number">1</span>Uncles<span class="token number">0</span>Size0x3b7Gas Used0x5208Timestamp0x62984692State Root0x74f80244ecfab368ffa89fff4a59caaa4acae28c04d611354804812b74cf7803Receipt Root0x056b23fbba480696b65fe5a59b8f2148a1299103c4f57df839233af2cf4ca2d2Txn Root0xc02a13407aa1ab7f6bdf02743c7354890551558ed93e2916a37344b4678d1e63<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="transaction结构"><a href="#transaction结构" class="headerlink" title="transaction结构"></a>transaction结构</h3><ul><li><code>TxnHash</code>:</li><li><code>BlockHash</code>:</li><li><code>BlockNumber</code>:</li><li><code>From</code>:</li><li><code>Gas</code>:</li><li><code>GasPrice</code>:</li><li><code>Input</code>:</li><li><code>To</code>:</li><li><code>Nonce</code>:</li><li><code>TxnIndex</code>:</li><li><code>Value</code>:</li><li><code>R</code>:</li><li><code>S</code>:</li><li><code>V</code>:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TxnHash 0xcafe30e308857212902abdfc0d6b2b8f974e5462884712717141a32230448065BlockHash 0x4e5f59c378480849ef51699144c869af5ef5ea5097a7d9fee709766e7dda2792BlockNumber 0xb46From 0xf0e2db6c8dc6c681bb5d6ad121a107f300e9b2b5Gas 0x5208GasPrice 0x0Input 0xTo 0x9f9a511ed364478aa91c0e99882e82d33a27d92fNonce 0x4TxnIndex 0x0Value 0x10f0cf064dd59200000R 0x56ee17b4ffe893016aa6f63753821584d8f5ed0b675a5093d6ab7193ea5e4518S 0x3cb03e04209d18987df1c05927b12e8059996066ba87d9dcccf255f0bc5cefeV 0xa95<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搭建quorum"><a href="#搭建quorum" class="headerlink" title="搭建quorum"></a>搭建quorum</h2><ul><li><p><a href="https://github.com/ConsenSys/quorum-examples">quorum-examples</a></p></li><li><p><a href="https://consensys.net/quorum/products/guides/getting-started-with-consensys-quorum/">搭建教程</a></p></li><li><p><a href="https://consensys.net/quorum/products/guides/getting-started-with-consensys-quorum/">搭建测试网络教程</a></p></li></ul><blockquote><p>资料链接</p></blockquote><h3 id="quorum-key-manager"><a href="#quorum-key-manager" class="headerlink" title="quorum-key-manager"></a>quorum-key-manager</h3><ul><li><a href="https://docs.quorum-key-manager.consensys.net/en/latest/">官方文档</a></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="member如何创建的？"><a href="#member如何创建的？" class="headerlink" title="member如何创建的？"></a>member如何创建的？</h3><ul><li>运行<code>run.sh</code>的时候会自动根据<code>docker-compose.yml</code>来生成对应的docker容器</li><li>最终会生成创世文件<code>cliqueGenesis.json</code>在<code> quorum-test-network/config/besu</code></li></ul><h3 id="同网络进行交流的API"><a href="#同网络进行交流的API" class="headerlink" title="同网络进行交流的API"></a>同网络进行交流的API</h3><p><strong>Web3js</strong></p><ul><li><a href="https://web3js.readthedocs.io/en/v1.2.11/web3-eth-abi.html">英文web3-eth-abi文档</a></li><li><a href="https://learnblockchain.cn/docs/web3js-0.2x/web3.eth.html">中文web3-eth-abi文档</a></li></ul><blockquote><p>资料链接</p></blockquote><p><strong>etherejs</strong></p><hr><p><strong>curl</strong></p><p>可以通过curl命令发送<code>JSON-RPC</code> 请求通过HTTP</p><ul><li><a href="https://www.jianshu.com/p/07c4dddae43a">curl命令详解</a></li></ul><p>测试网络的地址：</p><ul><li>HTTP with <code>http://localhost:8545</code>.</li><li>WebSockets with <code>ws://localhost:8546</code>.</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Request the node version</span><span class="token function">curl</span> -X POST --data <span class="token string">'{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}'</span> -H <span class="token string">'Content-Type: application/json'</span> http://localhost:8545<span class="token comment">#Count the peers</span><span class="token function">curl</span> -X POST --data <span class="token string">'{"jsonrpc":"2.0","method":"eth_peerCount","params":[],"id":1}'</span>-H <span class="token string">'Content-Type: application/json'</span>  http://localhost:8545<span class="token comment"># Request the most recent block number</span><span class="token function">curl</span> -X POST --data <span class="token string">'{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}'</span> -H <span class="token string">'Content-Type: application/json'</span> http://localhost:8545<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="quorum-test"><a href="#quorum-test" class="headerlink" title="quorum-test"></a>quorum-test</h2><h3 id="Geth"><a href="#Geth" class="headerlink" title="Geth"></a>Geth</h3><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p>test环境提供了一个简单的合约和部署的js代码来演示了如何进行合约的部署</p><p><code>SimpleStorage.sol</code></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.7.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">{</span>  <span class="token builtin">uint</span> <span class="token keyword">public</span> storedData<span class="token punctuation">;</span>  <span class="token keyword">event</span> <span class="token function">stored</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">uint</span> initVal<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">emit</span> <span class="token function">stored</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> initVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedData <span class="token operator">=</span> initVal<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token builtin">uint</span> x<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>    <span class="token keyword">emit</span> <span class="token function">stored</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    storedData <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">view</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> retVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> storedData<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>public_tx.js</code></p><p>部署合约和调用合约</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs-extra"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Web3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"web3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// member1 details</span><span class="token keyword">const</span> <span class="token punctuation">{</span> tessera<span class="token punctuation">,</span> quorum <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./keys.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> host <span class="token operator">=</span> quorum<span class="token punctuation">.</span>member1<span class="token punctuation">.</span>url<span class="token punctuation">;</span><span class="token keyword">const</span> accountAddress <span class="token operator">=</span> quorum<span class="token punctuation">.</span>member1<span class="token punctuation">.</span>accountAddress<span class="token punctuation">;</span><span class="token comment">// abi and bytecode generated from simplestorage.sol:</span><span class="token comment">// &gt; solcjs --bin --abi simplestorage.sol</span><span class="token keyword">const</span> contractJsonPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>  __dirname<span class="token punctuation">,</span>  <span class="token string">"../"</span><span class="token punctuation">,</span>  <span class="token string">"contracts"</span><span class="token punctuation">,</span>  <span class="token string">"SimpleStorage.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> contractJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>contractJsonPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> contractAbi <span class="token operator">=</span> contractJson<span class="token punctuation">.</span>abi<span class="token punctuation">;</span><span class="token keyword">const</span> contractBytecode <span class="token operator">=</span> contractJson<span class="token punctuation">.</span>evm<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>object<span class="token punctuation">;</span><span class="token comment">//调用合约的get方法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getValueAtAddress</span><span class="token punctuation">(</span>  <span class="token parameter">host<span class="token punctuation">,</span>  deployedContractAbi<span class="token punctuation">,</span>  deployedContractAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contractInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>    deployedContractAbi<span class="token punctuation">,</span>    deployedContractAddress  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> contractInstance<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Obtained value at deployed contract is: "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 访问合约的事件</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllPastEvents</span><span class="token punctuation">(</span>  <span class="token parameter">host<span class="token punctuation">,</span>  deployedContractAbi<span class="token punctuation">,</span>  deployedContractAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contractInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>    deployedContractAbi<span class="token punctuation">,</span>    deployedContractAddress  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> contractInstance<span class="token punctuation">.</span><span class="token function">getPastEvents</span><span class="token punctuation">(</span><span class="token string">"allEvents"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">fromBlock</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">toBlock</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> amounts <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>returnValues<span class="token punctuation">.</span>_amount<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">"Obtained all value events from deployed contract : ["</span> <span class="token operator">+</span> amounts <span class="token operator">+</span> <span class="token string">"]"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// You need to use the accountAddress details provided to Quorum to send/interact with contracts</span><span class="token comment">//调用合约的set方法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setValueAtAddress</span><span class="token punctuation">(</span>  <span class="token parameter">host<span class="token punctuation">,</span>  accountAddress<span class="token punctuation">,</span>  value<span class="token punctuation">,</span>  deployedContractAbi<span class="token punctuation">,</span>  deployedContractAddress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contractInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>    deployedContractAbi<span class="token punctuation">,</span>    deployedContractAddress  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> contractInstance<span class="token punctuation">.</span>methods    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">from</span><span class="token operator">:</span> accountAddress<span class="token punctuation">,</span> <span class="token literal-property property">gasPrice</span><span class="token operator">:</span> <span class="token string">"0x0"</span><span class="token punctuation">,</span> <span class="token literal-property property">gasLimit</span><span class="token operator">:</span> <span class="token string">"0x24A22"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Set value on contract at : "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// verify the updated value</span>  <span class="token comment">// const readRes = await contractInstance.methods.get().call();</span>  <span class="token comment">// console.log("Obtained value at deployed contract is: "+ readRes);</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//发布合约</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createContract</span><span class="token punctuation">(</span><span class="token parameter">host</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> web3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// make an account and sign the transaction with the account's private key; you can alternatively use an exsiting account</span>  <span class="token keyword">const</span> account <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// initialize the default constructor with a value `47 = 0x2F`; this value is appended to the bytecode</span>  <span class="token keyword">const</span> contractConstructorInit <span class="token operator">=</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>abi    <span class="token punctuation">.</span><span class="token function">encodeParameter</span><span class="token punctuation">(</span><span class="token string">"uint256"</span><span class="token punctuation">,</span> <span class="token string">"47"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> txn <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">chainId</span><span class="token operator">:</span> <span class="token number">1337</span><span class="token punctuation">,</span>    <span class="token literal-property property">nonce</span><span class="token operator">:</span> <span class="token keyword">await</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">getTransactionCount</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 0x00 because this is a new account</span>    <span class="token literal-property property">from</span><span class="token operator">:</span> account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>    <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//public tx</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"0x"</span> <span class="token operator">+</span> contractBytecode <span class="token operator">+</span> contractConstructorInit<span class="token punctuation">,</span>    <span class="token literal-property property">gasPrice</span><span class="token operator">:</span> <span class="token string">"0x0"</span><span class="token punctuation">,</span> <span class="token comment">//ETH per unit of gas</span>    <span class="token literal-property property">gas</span><span class="token operator">:</span> <span class="token string">"0x2CA51"</span><span class="token punctuation">,</span> <span class="token comment">//max number of gas units the tx is allowed to use</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"create and sign the txn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> signedTx <span class="token operator">=</span> <span class="token keyword">await</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">signTransaction</span><span class="token punctuation">(</span>    txn<span class="token punctuation">,</span>    account<span class="token punctuation">.</span>privateKey  <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sending the txn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> txReceipt <span class="token operator">=</span> <span class="token keyword">await</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">sendSignedTransaction</span><span class="token punctuation">(</span>    signedTx<span class="token punctuation">.</span>rawTransaction  <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"tx transactionHash: "</span> <span class="token operator">+</span> txReceipt<span class="token punctuation">.</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"tx contractAddress: "</span> <span class="token operator">+</span> txReceipt<span class="token punctuation">.</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> txReceipt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">createContract</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Contract deployed at address: "</span> <span class="token operator">+</span> tx<span class="token punctuation">.</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">"Use the smart contracts 'get' function to read the contract's constructor initialized value .. "</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">getValueAtAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> contractAbi<span class="token punctuation">,</span> tx<span class="token punctuation">.</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>        <span class="token string">"Use the smart contracts 'set' function to update that value to 123 .. "</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">setValueAtAddress</span><span class="token punctuation">(</span>        host<span class="token punctuation">,</span>        accountAddress<span class="token punctuation">,</span>        <span class="token number">123</span><span class="token punctuation">,</span>        contractAbi<span class="token punctuation">,</span>        tx<span class="token punctuation">.</span>contractAddress      <span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Verify the updated value that was set .. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">getValueAtAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> contractAbi<span class="token punctuation">,</span> tx<span class="token punctuation">.</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> <span class="token function">getAllPastEvents</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> contractAbi<span class="token punctuation">,</span> tx<span class="token punctuation">.</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>main <span class="token operator">===</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> exports <span class="token operator">=</span> main<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># TypeError: types.forEach is not a function</span> at ABICoder.mapTypes <span class="token punctuation">(</span>/home/mrl/github/quorum-test-network/network/smart_contracts/privacy/node_modules/web3-eth-abi/lib/index.js:132:11<span class="token punctuation">)</span>  <span class="token comment">#解决</span>web3.eth.abi.encodeParameters<span class="token punctuation">(</span>type, parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>改为web3.eth.abi.encodeParameter<span class="token punctuation">(</span>type, parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Replace With the Previous, Minimize</title>
      <link href="/2022/05/09/summary/codeforces/20220505-787-d3/e-replace-with-the-previous-minimize/"/>
      <url>/2022/05/09/summary/codeforces/20220505-787-d3/e-replace-with-the-previous-minimize/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1675/problem/E    Replace With the Previous, Minimize    题目描述        给你m个操作，你可以将全部的一个字符变成的他的前一个字符（循环）        求出操作m次后的最小字典序    Tag:        1.思维题        2.贪心    思路：        听说涉及到字典序大差不差是贪心        要求字典序最小，我们肯定是从左到右贪心的下降        下降的时候，标记那些字符是下降过的        最后通过两层for循环，确认每个字符下降到那个字符        */</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//标记那些字符是可以下降的</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> m<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>            m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">&gt;</span><span class="token function">chs</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//确认每个可以下降的字符的上限</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">=</span><span class="token char">'a'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> j <span class="token operator">=</span>i <span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token char">'a'</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//输出每个字符对应的上限</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>chs<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vertical Paths</title>
      <link href="/2022/05/09/summary/codeforces/20220505-787-d3/d-vertical-paths/"/>
      <url>/2022/05/09/summary/codeforces/20220505-787-d3/d-vertical-paths/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://codeforces.com/contest/1675/problem/DVertical Paths    题目描述        路径只能是父节点一直走下来，        一个点不能在两个以上的路径        求最少的路径数量    Tag：        1.dfs        2.思维题    思路：        听说可以发现的一个结论是，答案一定是叶子结点数        那么问题就可以这样想        从每一个叶子结点贪心的向上找父节点        最后路径反转过来输出久可以了*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">st</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//确认每一个点的父节点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">vis</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            u<span class="token operator">=</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> ans<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detective Task</title>
      <link href="/2022/05/09/summary/codeforces/20220505-787-d3/c-detective-task/"/>
      <url>/2022/05/09/summary/codeforces/20220505-787-d3/c-detective-task/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://codeforces.com/contest/1675/problem/CDetective Task    题目描述        从左往右进入小屋里面去看，最后发现画不见了，求怀疑小偷的人数        1:看过画        0:没看见画        ？：不记得            Tag：        1.思维题    思路：        听过可以显然发现会存在一个1 到 0 的转折点，中间的人数就是怀疑是小偷        所以问题就转换成        找到最右边的1 l         找到最左边的0 r        怀疑人数就是r-l+1*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span>                l<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span>                r<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make It Increasing</title>
      <link href="/2022/05/09/summary/codeforces/20220505-787-d3/b-make-it-increasing/"/>
      <url>/2022/05/09/summary/codeforces/20220505-787-d3/b-make-it-increasing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://codeforces.com/contest/1675/problem/BMake It Increasing    题目描述        让数组严格单调递增        如果不可能输出0        否侧输出最小操作次数        变化:        a[i]=a[i]/2 向下取整    Tag：        1.思维题        2.贪心    思路：        直接从后往前尽可能的满足条件*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go_camp</title>
      <link href="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/"/>
      <url>/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/</url>
      
        <content type="html"><![CDATA[<h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ul><li><a href="https://github.com/golang/go/wiki/CodeReviewComments">Go 代码 Review 建议</a></li><li><a href="https://github.com/xxjwxc/uber_go_guide_cn">Uber 的 Go 编码规范</a></li><li><a href="https://books.studygolang.com/gopl-zh/">go语言圣经</a></li></ul><h2 id="Golang基础"><a href="#Golang基础" class="headerlink" title="Golang基础"></a>Golang基础</h2><h3 id="go基础语法"><a href="#go基础语法" class="headerlink" title="go基础语法"></a>go基础语法</h3><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> userInfo <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name  <span class="token builtin">string</span>Age   <span class="token builtin">int</span> <span class="token string">`json:"age"`</span>Hobby <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> userInfo<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> Hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Golang"</span><span class="token punctuation">,</span> <span class="token string">"TypeScript"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//转换成json格式，序列化</span>buf<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//直接打印：16进制</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token comment">// [123 34 78 97...]</span><span class="token comment">//string强转换</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {"Name":"wang","age":18,"Hobby":["Golang","TypeScript"]}</span><span class="token comment">//json格式化</span>buf<span class="token punctuation">,</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> b userInfo<span class="token comment">//反序列化</span>err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//# 打印具体的类型</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// main.userInfo{Name:"wang", Age:18, Hobby:[]string{"Golang", "TypeScript"}}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> user <span class="token keyword">struct</span> <span class="token punctuation">{</span>name     <span class="token builtin">string</span>password <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment">//函数可以向外抛出error</span><span class="token keyword">func</span> <span class="token function">findUser</span><span class="token punctuation">(</span>users <span class="token punctuation">[</span><span class="token punctuation">]</span>user<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>user<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> u <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span><span class="token keyword">if</span> u<span class="token punctuation">.</span>name <span class="token operator">==</span> name <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//抛出错误</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"not found"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>u<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>user<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"1024"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//直接打印错误</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// wang</span><span class="token keyword">if</span> u<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>user<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"1024"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// not found</span><span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="strconv"><a href="#strconv" class="headerlink" title="strconv"></a>strconv</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//转换成浮点数</span>f<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token string">"1.234"</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment">// 1.234</span><span class="token comment">//字符串转换成整型，base：转换的进制 ： 如果不符合要转换的进制的要求为 0</span><span class="token comment">//例如 如果要转换成2进制，字符串中却出现了3，4。。。</span>n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">"1111"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 111</span><span class="token comment">//进制转换, 0：自动识别字符串内的进制，如果没有说明按照10进制处理，最后转换成10进制</span>n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span><span class="token string">"0x0010"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment">// 4096</span><span class="token comment">//字符串转换成整型</span>n2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span> <span class="token comment">// 123</span>n2<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 0 strconv.Atoi: parsing "AAA": invalid syntax</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>   <span class="token string">"fmt"</span>   <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//获取时间</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token comment">// 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933</span>   <span class="token comment">//可以自己显示设置时间和时区</span>   t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>UTC<span class="token punctuation">)</span>   t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>UTC<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment">// 2022-03-27 01:25:36 +0000 UTC</span>   <span class="token comment">//也可以通过.选择性输出</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2022 March 27 1 25</span>   <span class="token comment">//时间格式化</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2022-03-27 01:25:36</span>   <span class="token comment">//通过.Sub函数可以得出两个时间之间的时间差</span>   diff <span class="token operator">:=</span> t2<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token comment">// 1h5m0s</span>   <span class="token comment">//时间差可以转换成分，秒</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>diff<span class="token punctuation">.</span><span class="token function">Minutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> diff<span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 65 3900</span>   <span class="token comment">//时间格式判断</span>   t3<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">,</span> <span class="token string">"2022-03-27 01:25:36"</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t3 <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token comment">// true</span>   <span class="token comment">//获取时间戳</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1648738080</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="课程实践"><a href="#课程实践" class="headerlink" title="课程实践"></a>课程实践</h3><h4 id="猜谜小游戏"><a href="#猜谜小游戏" class="headerlink" title="猜谜小游戏"></a>猜谜小游戏</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"math/rand"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>maxNum <span class="token operator">:=</span> <span class="token number">100</span><span class="token comment">//用时间戳当作随机种子</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>secretNumber <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Please input your guess"</span><span class="token punctuation">)</span>guess <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>guess<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"You guess is"</span><span class="token punctuation">,</span> guess<span class="token punctuation">)</span><span class="token keyword">if</span> guess <span class="token operator">&gt;</span> secretNumber <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Your guess is bigger than the secret number. Please try again"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> guess <span class="token operator">&lt;</span> secretNumber <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Your guess is smaller than the secret number. Please try again"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Correct, you Legend!"</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单拼接字符串实现翻译"><a href="#简单拼接字符串实现翻译" class="headerlink" title="简单拼接字符串实现翻译"></a>简单拼接字符串实现翻译</h4><h5 id="获取请求响应内容"><a href="#获取请求响应内容" class="headerlink" title="获取请求响应内容"></a>获取请求响应内容</h5><p>面对一些简单的翻译，可以直接通过开发者引擎来获取请求</p><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220508203655768.png" alt="image-20220508203655768"></p><p>复制这个请求的cURL到<a href="https://curlconverter.com/#go">网页</a>去解析成对应的go</p><p>解析完成之后就是这样</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://www.kingsoftai-fanyi.com/aida_api/dictionary?lang=en&amp;sentence=word"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"authority"</span><span class="token punctuation">,</span> <span class="token string">"www.kingsoftai-fanyi.com"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json, text/plain, */*"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"accept-language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">,</span> <span class="token string">"https://www.kingsoftai-fanyi.com/translate/"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-ch-ua"</span><span class="token punctuation">,</span> `<span class="token string">" Not A;Brand"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"99"</span><span class="token punctuation">,</span> <span class="token string">"Chromium"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token string">"Google Chrome"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"101"</span><span class="token string">`)req.Header.Set("sec-ch-ua-mobile", "?0")req.Header.Set("sec-ch-ua-platform", `</span>"macOS"`<span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-dest"</span><span class="token punctuation">,</span> <span class="token string">"empty"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-mode"</span><span class="token punctuation">,</span> <span class="token string">"cors"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-site"</span><span class="token punctuation">,</span> <span class="token string">"same-origin"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bodyText<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> bodyText<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取响应体"><a href="#获取响应体" class="headerlink" title="获取响应体"></a>获取响应体</h5><p>之后就是对这个请求的响应体的 json格式转换成对应的 go 的结构体</p><p>这里也提供一个<a href="https://oktools.net/json2go">网页</a>来直接解析得到结构题如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> AutoGenerated <span class="token keyword">struct</span> <span class="token punctuation">{</span>Code <span class="token builtin">int</span> <span class="token string">`json:"code"`</span>Message <span class="token builtin">string</span> <span class="token string">`json:"message"`</span>Data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>Key <span class="token builtin">string</span> <span class="token string">`json:"key"`</span>Paraphrase <span class="token builtin">string</span> <span class="token string">`json:"paraphrase"`</span>Means <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>Part <span class="token builtin">string</span> <span class="token string">`json:"part"`</span>Means <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"means"`</span><span class="token punctuation">}</span> <span class="token string">`json:"means"`</span>PhEn <span class="token builtin">string</span> <span class="token string">`json:"ph_en"`</span>PhAm <span class="token builtin">string</span> <span class="token string">`json:"ph_am"`</span>Pinyin <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">`json:"pinyin"`</span>Lang <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">`json:"lang"`</span><span class="token punctuation">}</span> <span class="token string">`json:"data"`</span>Success <span class="token builtin">bool</span> <span class="token string">`json:"success"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="整合响应体和响应内容"><a href="#整合响应体和响应内容" class="headerlink" title="整合响应体和响应内容"></a>整合响应体和响应内容</h5><p>之后就是将上述获得的bodyText 反序列化成响应结构体</p><p>根据所要的信息的层级就可以直接输出得到</p><p>整合上述就得到如下</p><p><strong>jinShan.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> findmodel<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> JinShanResponse <span class="token keyword">struct</span> <span class="token punctuation">{</span>Code    <span class="token builtin">int</span>    <span class="token string">`json:"code"`</span>Message <span class="token builtin">string</span> <span class="token string">`json:"message"`</span>Data    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>Key        <span class="token builtin">string</span> <span class="token string">`json:"key"`</span>Paraphrase <span class="token builtin">string</span> <span class="token string">`json:"paraphrase"`</span>Means      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>Part  <span class="token builtin">string</span>   <span class="token string">`json:"part"`</span>Means <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"means"`</span><span class="token punctuation">}</span> <span class="token string">`json:"means"`</span>PhEn   <span class="token builtin">string</span>      <span class="token string">`json:"ph_en"`</span>PhAm   <span class="token builtin">string</span>      <span class="token string">`json:"ph_am"`</span>Pinyin <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">`json:"pinyin"`</span>Lang   <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">`json:"lang"`</span><span class="token punctuation">}</span> <span class="token string">`json:"data"`</span>Success <span class="token builtin">bool</span> <span class="token string">`json:"success"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">JinShanQuery</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://www.kingsoftai-fanyi.com/aida_api/dictionary?lang=en&amp;sentence="</span><span class="token operator">+</span>msg<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"authority"</span><span class="token punctuation">,</span> <span class="token string">"www.kingsoftai-fanyi.com"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json, text/plain, */*"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"accept-language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"referer"</span><span class="token punctuation">,</span> <span class="token string">"https://www.kingsoftai-fanyi.com/translate/"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-ch-ua"</span><span class="token punctuation">,</span> `<span class="token string">" Not A;Brand"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"99"</span><span class="token punctuation">,</span> <span class="token string">"Chromium"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token string">"Google Chrome"</span><span class="token punctuation">;</span>v<span class="token operator">=</span><span class="token string">"101"</span><span class="token string">`)req.Header.Set("sec-ch-ua-mobile", "?0")req.Header.Set("sec-ch-ua-platform", `</span>"macOS"`<span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-dest"</span><span class="token punctuation">,</span> <span class="token string">"empty"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-mode"</span><span class="token punctuation">,</span> <span class="token string">"cors"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-fetch-site"</span><span class="token punctuation">,</span> <span class="token string">"same-origin"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"user-agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bodyText<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    <span class="token comment">//得到响应内容</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment">// 判断响应码</span><span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> <span class="token number">200</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"StatusCode != 200"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment">//请求结构体</span><span class="token keyword">var</span> reponse <span class="token operator">*</span>JinShanResponse    <span class="token comment">//bodyText反序列化</span>err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>bodyText<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reponse<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"金山翻译"</span><span class="token punctuation">)</span><span class="token comment">//输出需要的信息</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> reponse<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"UK: "</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>PhEn<span class="token punctuation">,</span> <span class="token string">"US:"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>PhAm<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> means <span class="token operator">:=</span> <span class="token keyword">range</span> item<span class="token punctuation">.</span>Means <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>means<span class="token punctuation">.</span>Part<span class="token punctuation">,</span> means<span class="token punctuation">.</span>Means<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="并发调用多个翻译模块"><a href="#并发调用多个翻译模块" class="headerlink" title="并发调用多个翻译模块"></a>并发调用多个翻译模块</h5><p>这里类比多弄几个翻译模块，然后通过并行翻译</p><p><strong>main.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"go-by-example/simpledict/homework/findmodel"</span><span class="token string">"log"</span><span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> msg <span class="token builtin">string</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"输入异常"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupwg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>findmodel<span class="token punctuation">.</span><span class="token function">BingQuery</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>findmodel<span class="token punctuation">.</span><span class="token function">CaiYunQuery</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>findmodel<span class="token punctuation">.</span><span class="token function">JinShanQuery</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="socks代理服务器"><a href="#socks代理服务器" class="headerlink" title="socks代理服务器"></a>socks代理服务器</h4><blockquote><p>工作流程</p></blockquote><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220510163615676.png" alt="image-20220510163615676"></p><blockquote><p>具体例子代码</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"context"</span><span class="token string">"encoding/binary"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"io"</span><span class="token string">"log"</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">const</span> socks5Ver <span class="token operator">=</span> <span class="token number">0x05</span><span class="token keyword">const</span> cmdBind <span class="token operator">=</span> <span class="token number">0x01</span><span class="token keyword">const</span> atypIPV4 <span class="token operator">=</span> <span class="token number">0x01</span><span class="token keyword">const</span> atypeHOST <span class="token operator">=</span> <span class="token number">0x03</span><span class="token keyword">const</span> atypeIPV6 <span class="token operator">=</span> <span class="token number">0x04</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听端口</span>server<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:1080"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token comment">//开启接受连接的状态</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Accept failed %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">//处理连接</span><span class="token keyword">go</span> <span class="token function">process</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//浏览器向代理服务器的发送请求</span>reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token comment">//从连接中创建缓冲的只读流</span><span class="token comment">//1.协商阶段，验证浏览器的请求</span>err <span class="token operator">:=</span> <span class="token function">auth</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"client %v auth failed:%v"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//2.对浏览器发送的请求进行处理 + 3.发送数据readder</span>err <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"client %v auth failed:%v"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//验证浏览器请求模块(验证报文)</span><span class="token keyword">func</span> <span class="token function">auth</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// +----+----------+----------+</span><span class="token comment">// |VER | NMETHODS | METHODS  |</span><span class="token comment">// +----+----------+----------+</span><span class="token comment">// | 1  |    1     | 1 to 255 |</span><span class="token comment">// +----+----------+----------+</span><span class="token comment">// VER: 协议版本，socks5为0x05</span><span class="token comment">// NMETHODS: 支持认证的方法数量</span><span class="token comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span><span class="token comment">// X’00’ NO AUTHENTICATION REQUIRED</span><span class="token comment">// X’02’ USERNAME/PASSWORD</span><span class="token comment">////读取协议版本</span>ver<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read ver failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> ver <span class="token operator">!=</span> socks5Ver <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not supported ver:%v"</span><span class="token punctuation">,</span> ver<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//读取方法数量</span>methodSize<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read methodSize failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>method <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> methodSize<span class="token punctuation">)</span><span class="token comment">//填充方法</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read method failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// +----+--------+</span><span class="token comment">// |VER | METHOD |</span><span class="token comment">// +----+--------+</span><span class="token comment">// | 1  |   1    |</span><span class="token comment">// +----+--------+</span><span class="token comment">//1.1 通过验证，代理服务器的认证响应</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span>socks5Ver<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"write failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//验证成功后，就建立了连接</span><span class="token comment">//浏览器把需要执行的操作指令发给代理服务器，表明自己要执行代理的请求。请求帧格式</span><span class="token keyword">func</span> <span class="token function">connect</span><span class="token punctuation">(</span>reader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// | 1  |  1  | X'00' |  1   | Variable |    2     |</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// VER 版本号，socks5的值为0x05</span><span class="token comment">// CMD 0x01表示CONNECT请求</span><span class="token comment">// RSV 保留字段，值为0x00</span><span class="token comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span><span class="token comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span><span class="token comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span><span class="token comment">// DST.ADDR 一个可变长度的值</span><span class="token comment">// DST.PORT 目标端口，固定2个字节</span><span class="token comment">// 读取请求帧</span>buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read header failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>ver<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> atyp <span class="token operator">:=</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//判断socks版本</span><span class="token keyword">if</span> ver <span class="token operator">!=</span> socks5Ver <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not supported ver:%v"</span><span class="token punctuation">,</span> ver<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//判断请求</span><span class="token keyword">if</span> cmd <span class="token operator">!=</span> cmdBind <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not supported cmd:%v"</span><span class="token punctuation">,</span> ver<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获取目标服务器地址 addr</span>addr <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">switch</span> atyp <span class="token punctuation">{</span><span class="token keyword">case</span> atypIPV4<span class="token punctuation">:</span><span class="token comment">//如果是IPV4，容量为4，正好可以用之前的buf，填充到buf里面，这里其实就是覆盖了之前的数据</span><span class="token comment">//因为之前的数据已经取出来到变量了。重复利用</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read atyp failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>addr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d.%d.%d.%d"</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">case</span> atypeHOST<span class="token punctuation">:</span><span class="token comment">//如果是HOST，需要先读取他的长度</span>hostSize<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read hostSize failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//创建对应长度的map</span>host <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> hostSize<span class="token punctuation">)</span><span class="token comment">//填充map</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read host failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>addr <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token keyword">case</span> atypeIPV6<span class="token punctuation">:</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"IPv6: no supported yet"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid atyp"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"read port failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获得目标端口 port</span>port <span class="token operator">:=</span> binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">Uint16</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//填充两个字节到buf，覆盖之前的，重复利用</span><span class="token comment">//2.1 代理服务器 和 目标服务器 建立tcp连接</span>dest<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v:%v"</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//用addr和port 和目标服务器建立tcp连接 -&gt; dest</span><span class="token comment">//2.2 目标服务器 响应给 代理服务器 成功建立tcp连接</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"dial dst failed:%w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> dest<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dial"</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token comment">// 打印目标服务器的addr和port</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// | 1  |  1  | X'00' |  1   | Variable |    2     |</span><span class="token comment">// +----+-----+-------+------+----------+----------+</span><span class="token comment">// VER socks版本，这里为0x05</span><span class="token comment">// REP Relay field,内容取值如下 X’00’ succeeded</span><span class="token comment">// RSV 保留字段</span><span class="token comment">// ATYPE 地址类型</span><span class="token comment">// BND.ADDR 服务绑定的地址</span><span class="token comment">// BND.PORT 服务绑定的端口DST.PORT</span><span class="token comment">// 2.3 代理服务器 响应给 浏览器 成功和目标服务器建立连接</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//响应报文给浏览器，连接的情况</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"write failed: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//直到传输出现问题,执行了cancel，否则ctx.Done()会一直堵塞</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//copy(to , from )</span><span class="token comment">//      &lt;-</span><span class="token comment">//实现信息转发</span><span class="token comment">//3.1 relay数据</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> reader<span class="token punctuation">)</span> <span class="token comment">//浏览器发送数据给服务器，死循环</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//3.2 响应结果 + 3.3. 响应结果</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token comment">//服务器发送数据给浏览器</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Golang工程基础"><a href="#Golang工程基础" class="headerlink" title="Golang工程基础"></a>Golang工程基础</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h4><p>go从底层原生支持了goroutine来创建协程来实现并发操作</p><h4 id="CSP（commuication-Sequential-Processes）"><a href="#CSP（commuication-Sequential-Processes）" class="headerlink" title="CSP（commuication Sequential Processes）"></a>CSP（commuication Sequential Processes）</h4><p>go在多个运行的goroutine中提倡通过channel来实现共享内存</p><p>而不是通过共享内存来实现通信</p><h4 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h4><p>make (chan 元素类型,[缓冲大小])</p><ul><li>make(char int)：不带缓冲</li><li>make(char int ,2)：有缓冲区</li></ul><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220510145933982.png" alt="image-20220510145933982"></p><p><strong>通过channel实现gorountine之间的通信</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> concurrence<span class="token keyword">func</span> <span class="token function">CalSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>src <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>dest <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>src <span class="token operator">&lt;-</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> src <span class="token punctuation">{</span>dest <span class="token operator">&lt;-</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dest <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><p>因为goroutine启动没有什么负担，但是主线程结束的时候，goroutine会被强制结束</p><p>所以go提供了<code>sync.WaitGroup</code>来进行主线程和goroutine之间的通信，确保所有的goroutine执行完成之后才结束主线程</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ManyGoWait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token comment">// 计数 ： 表示有5个并发任务</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 每一次 wg.Done() 计数--</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">hello</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//如果计数不为0，会阻塞，直到计数为0</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="并发安全问题Lock"><a href="#并发安全问题Lock" class="headerlink" title="并发安全问题Lock"></a>并发安全问题Lock</h4><p>当操作共享的数据的时候，并发执行会造成死锁，脏数据</p><p>go这里提供了<code>lock sync.Mutex</code>来实现多个并发操作的共享数据的互斥锁</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> concurrence<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"sync"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>x    <span class="token builtin">int64</span>lock sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span><span class="token comment">//带锁的操作</span><span class="token keyword">func</span> <span class="token function">addWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">+=</span> <span class="token number">1</span>lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//不带锁的操作</span><span class="token keyword">func</span> <span class="token function">addWithoutLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token function">addWithoutLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WithoutLock:"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token function">addWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WithLock:"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本依赖"><a href="#版本依赖" class="headerlink" title="版本依赖"></a>版本依赖</h3><h4 id="依赖管理三要素"><a href="#依赖管理三要素" class="headerlink" title="依赖管理三要素"></a>依赖管理三要素</h4><ul><li>配置文件，描述依赖：go.mod</li><li>中心仓库管理依赖库：Proxy</li><li>本地工具：go get/mod</li></ul><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><p><strong>go.mod</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//依赖管理基本单元</span>module github<span class="token punctuation">.</span>com<span class="token operator">/</span>Moonlight<span class="token operator">-</span>Zhao<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>project<span class="token operator">-</span>example<span class="token comment">//go的版本号</span><span class="token keyword">go</span> <span class="token number">1.16</span><span class="token comment">//单元依赖</span>require <span class="token punctuation">(</span>bou<span class="token punctuation">.</span>ke<span class="token operator">/</span>monkey v1<span class="token punctuation">.</span><span class="token number">0.2</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>bytedance<span class="token operator">/</span>gopkg v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20220401081311</span><span class="token operator">-</span>c38fb59326b7github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sse v0<span class="token punctuation">.</span><span class="token number">1.0</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin v1<span class="token punctuation">.</span><span class="token number">3.0</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>protobuf v1<span class="token punctuation">.</span><span class="token number">5.2</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>json<span class="token operator">-</span>iterator<span class="token operator">/</span><span class="token keyword">go</span> v1<span class="token punctuation">.</span><span class="token number">1.12</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>kr<span class="token operator">/</span>pretty v0<span class="token punctuation">.</span><span class="token number">3.0</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>mattn<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>isatty v0<span class="token punctuation">.</span><span class="token number">0.14</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>modern<span class="token operator">-</span><span class="token keyword">go</span><span class="token operator">/</span>concurrent v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20180306012644</span><span class="token operator">-</span>bacd9c7ef1dd <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>rogpeppe<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>internal v1<span class="token punctuation">.</span><span class="token number">8.0</span> <span class="token comment">// indirect</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>stretchr<span class="token operator">/</span>testify v1<span class="token punctuation">.</span><span class="token number">7.1</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>ugorji<span class="token operator">/</span><span class="token keyword">go</span> v1<span class="token punctuation">.</span><span class="token number">2.7</span> <span class="token comment">// indirect</span>golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>net v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20211112202133</span><span class="token operator">-</span>69e39bad7dc2 <span class="token comment">// indirect</span>golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>sys v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20220408201424</span><span class="token operator">-</span>a24fb2fb8a0f <span class="token comment">// indirect</span>golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>xerrors v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20200804184101</span><span class="token operator">-</span>5ec99f83aff1 <span class="token comment">// indirect</span>google<span class="token punctuation">.</span>golang<span class="token punctuation">.</span>org<span class="token operator">/</span>protobuf v1<span class="token punctuation">.</span><span class="token number">28.0</span> <span class="token comment">// indirect</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>check<span class="token punctuation">.</span>v1 v1<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20201130134442</span><span class="token operator">-</span>10cb98267c6c <span class="token comment">// indirect</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin<span class="token punctuation">.</span>v1 v1<span class="token punctuation">.</span><span class="token number">3.0</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>playground<span class="token operator">/</span>assert<span class="token punctuation">.</span>v1 v1<span class="token punctuation">.</span><span class="token number">2.1</span> <span class="token comment">// indirect</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>playground<span class="token operator">/</span>validator<span class="token punctuation">.</span>v8 v8<span class="token punctuation">.</span><span class="token number">18.2</span> <span class="token comment">// indirect</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>yaml<span class="token punctuation">.</span>v2 v2<span class="token punctuation">.</span><span class="token number">4.0</span> <span class="token comment">// indirect</span>gopkg<span class="token punctuation">.</span>in<span class="token operator">/</span>yaml<span class="token punctuation">.</span>v3 v3<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20210107192922</span><span class="token operator">-</span>496545a6307b <span class="token comment">// indirect</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖配置-indirect"><a href="#依赖配置-indirect" class="headerlink" title="依赖配置-indirect"></a>依赖配置-indirect</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//依赖管理基本单元</span>module github<span class="token punctuation">.</span>com<span class="token operator">/</span>Moonlight<span class="token operator">-</span>Zhao<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>project<span class="token operator">-</span>example<span class="token comment">//go的版本号</span><span class="token keyword">go</span> <span class="token number">1.16</span><span class="token comment">//单元依赖</span>require <span class="token punctuation">(</span>bou<span class="token punctuation">.</span>ke<span class="token operator">/</span>monkey v1<span class="token punctuation">.</span><span class="token number">0.2</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>bytedance<span class="token operator">/</span>gopkg v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20220401081311</span><span class="token operator">-</span>c38fb59326b7    github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>contrib<span class="token operator">/</span>sse v0<span class="token punctuation">.</span><span class="token number">1.0</span> <span class="token comment">// indirect : 表示间接依赖</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖配置-incompatible"><a href="#依赖配置-incompatible" class="headerlink" title="依赖配置-incompatible"></a>依赖配置-incompatible</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">module example<span class="token operator">/</span>project<span class="token operator">/</span>app<span class="token keyword">go</span> <span class="token number">16</span>require<span class="token punctuation">{</span>    example<span class="token operator">/</span>lib1 v1<span class="token punctuation">.</span><span class="token number">0.2</span>    example<span class="token operator">/</span>lib2 v1<span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token operator">/</span>indirect    examp1e<span class="token operator">/</span>1ib3v0<span class="token punctuation">.</span><span class="token number">1.0</span><span class="token operator">-</span><span class="token number">20190725025543</span><span class="token operator">-</span>5a5fe074e612    example<span class="token operator">/</span>lib4 v0<span class="token punctuation">.</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">20180306012644</span><span class="token operator">-</span>bacd9c7ef1dd <span class="token operator">/</span>indirect example<span class="token operator">/</span>lib5<span class="token operator">/</span>v3v3<span class="token punctuation">.</span><span class="token number">0.2</span>    example<span class="token operator">/</span>lib6 v3<span class="token punctuation">.</span><span class="token number">2.0</span><span class="token operator">+</span>incompatible <span class="token comment">//表示对于没有go.mod文件并且主版本2+的依赖，会+incompatible</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主版本2+模块会在模块路径增加/vN后缀。</li><li>对于没有go.mod文件并且主版本2+的依赖，会+incompatible s</li></ul><h4 id="依赖分发-GOPROXY"><a href="#依赖分发-GOPROXY" class="headerlink" title="依赖分发-GOPROXY"></a>依赖分发-GOPROXY</h4><ul><li><p>Go Modules通过GOPROXY环境变量控制如何使用Go Proxy；</p></li><li><p>GOPROXY是一个Go Proxy站点URL列表，可以使用”direct’”表示源站对于示例配置</p></li><li><p>整体的依赖寻址路径，会优先从oroxy1下载依赖，如果proxy1不存在，后下钻oroxy22寻找，如果proxy2中不存在则会回源到源站直接下载依赖，缓存到proxy站点中</p></li></ul><h4 id="工具-go-mod"><a href="#工具-go-mod" class="headerlink" title="工具-go mod"></a>工具-go mod</h4><ul><li><code>go mod  init </code>：初始化，创建go.mod文件</li><li><code>go mod download</code>：下载模块到本地缓存</li><li><code>go mod tidy</code>：增加需要的依赖，删除不需要的依赖</li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><a href="https://books.studygolang.com/gopl-zh/ch11/ch11-02.html">参考go语言圣经</a></p><p><a href="http://c.biancheng.net/view/124.html#:~:text=%E9%BB%98%E8%AE%A4%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8Cgo%20test%20%E5%91%BD%E4%BB%A4%E4%B8%8D%E9%9C%80%E8%A6%81%E4%BB%BB%E4%BD%95%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E5%AE%83%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8A%8A%E4%BD%A0%E6%BA%90%E7%A0%81%E5%8C%85%E4%B8%8B%E9%9D%A2%E6%89%80%E6%9C%89%20test%20%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%AE%8C%E6%AF%95%EF%BC%8C%E5%BD%93%E7%84%B6%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%B8%A6%E4%B8%8A%E5%8F%82%E6%95%B0%E3%80%82%20%E8%BF%99%E9%87%8C%E4%BB%8B%E7%BB%8D%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%9A,-bench%20regexp%20%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%BA%94%E7%9A%84%20benchmarks%EF%BC%8C%E4%BE%8B%E5%A6%82%20-bench%3D.%EF%BC%9B-cover%20%E5%BC%80%E5%90%AF%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%EF%BC%9B">单元测试</a></p><blockquote><p>参数</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token comment">//该package下所有用例都被测试</span><span class="token keyword">go</span> test <span class="token operator">-</span>run   <span class="token comment">// -run,运行指定单元测试用例，支持通配符和正则</span><span class="token keyword">go</span> test <span class="token operator">-</span>v  <span class="token comment">//-v 让测试时显示详细的流程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><blockquote><p>所有测试文件需要以_test.go结尾</p></blockquote><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220508122743186.png" alt="image-20220508122743186"></p><blockquote><p>测试函数需要以大写Test开头</p></blockquote><p><strong>array_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAppendInt</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">AppendInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>array.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">AppendInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>intArray <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">func</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"inner func array:"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"outer func array:"</span><span class="token punctuation">,</span>intArray<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化的逻辑可以放到TestMain中</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//测试前：数据装载、配置初始化等前置工作</span>    code <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//测试后：释放资源等收尾工作</span>    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><strong>hello.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">func</span> <span class="token function">helloTom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"jerry"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>hello_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token string">"testing"</span><span class="token keyword">func</span> <span class="token function">TestHelloTom</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>msg <span class="token operator">:=</span> <span class="token string">"Tom"</span>output <span class="token operator">:=</span> <span class="token function">helloTom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> msg <span class="token operator">!=</span> output <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%s 信息不符合 %s"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">==</span><span class="token operator">=</span> RUN   TestHelloTom    hello_test<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span> jerry 信息不符合 Tom<span class="token operator">--</span><span class="token operator">-</span> FAIL<span class="token punctuation">:</span> TestHelloTom <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span>00s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h4><blockquote><p>参数</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test score_test<span class="token punctuation">.</span><span class="token keyword">go</span> score<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token operator">--</span>cover<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于一个测试可能的分支覆盖率做出测试</p><p><strong>score.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">func</span> <span class="token function">getScore</span><span class="token punctuation">(</span>score <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">50</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>score_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token comment">//这里使用了一个开源的assert包来实现判断</span><span class="token string">"github.com/stretchr/testify/assert"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestGetScore</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>output <span class="token operator">:=</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">执行： go <span class="token builtin class-name">test</span>  score_test.go socre.go --cover  <span class="token comment">#测试覆盖率</span>kcoverage: <span class="token number">50.0</span>% of statements <span class="token keyword">in</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/go_camp/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>改进score_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/stretchr/testify/assert"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestGetScoreTrue</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>output <span class="token operator">:=</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGetScoreFalse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>output <span class="token operator">:=</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样覆盖率就达到了100%</p><h3 id="单元测试日志"><a href="#单元测试日志" class="headerlink" title="单元测试日志"></a>单元测试日志</h3><table><thead><tr><th>方  法</th><th>备  注</th></tr></thead><tbody><tr><td>Log</td><td>打印日志，同时结束测试</td></tr><tr><td>Logf</td><td>格式化打印日志，同时结束测试</td></tr><tr><td>Error</td><td>打印错误日志，同时结束测试</td></tr><tr><td>Errorf</td><td>格式化打印错误日志，同时结束测试</td></tr><tr><td>Fatal</td><td>打印致命日志，同时结束测试</td></tr><tr><td>Fatalf</td><td>格式化打印致命日志，同时结束测试</td></tr></tbody></table><h4 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h4><ul><li>一般主流程般覆盖率：50%~60%，较高覆盖率80%+</li><li>测试分支相互独立、全覆盖。</li><li>测试单元粒度足够小，函数单职责。</li></ul><h4 id="依赖测试（Mock）"><a href="#依赖测试（Mock）" class="headerlink" title="依赖测试（Mock）"></a>依赖测试（Mock）</h4><p>因为存在依赖程序生成测试数据到本地文件来进行对比的单元测试，可能存在本地文件被串改，导致测试不正确</p><p>那么可以通过Mock来进行打桩（制造测试数据）</p><p><strong>MockTrain.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bufio"</span><span class="token string">"os"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token comment">//从文件读取数据</span><span class="token keyword">func</span> <span class="token function">ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>open<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> open<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span>scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token comment">//对文件数据进行替换</span><span class="token keyword">func</span> <span class="token function">ProcessFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>line <span class="token operator">:=</span> <span class="token function">ReadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>destLine <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token string">"00"</span><span class="token punctuation">)</span><span class="token keyword">return</span> destLine<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MockTrain_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/stretchr/testify/assert"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestProcessFile</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>line <span class="token operator">:=</span> <span class="token function">ProcessFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"line00"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述这样生成数据依赖于本地的 log 文件</p><p>下面使用Mock来实现生成测试数据</p><p>这样测试数据就在程序内部生成，不强依赖外部的文件</p><p><strong>MockTrain_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bou.ke/monkey"</span> <span class="token comment">//依赖包</span><span class="token string">"github.com/stretchr/testify/assert"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestProcessFileWithMock</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开启，重写生成测试数据的函数</span>monkey<span class="token punctuation">.</span><span class="token function">Patch</span><span class="token punctuation">(</span>ReadData<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"line120"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//关闭</span><span class="token keyword">defer</span> monkey<span class="token punctuation">.</span><span class="token function">Unpatch</span><span class="token punctuation">(</span>ReadData<span class="token punctuation">)</span>line <span class="token operator">:=</span> <span class="token function">ProcessFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"line000"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基准测试"><a href="#基准测试" class="headerlink" title="基准测试"></a>基准测试</h3><ul><li><p>测试代码的性能，对CPU的损耗</p></li><li><p>基准测试的函数开头是<code>Benchmark</code></p></li></ul><p>，</p><blockquote><p>参数</p></blockquote><ul><li>-bench</li></ul><p>默认情况下不运行任何基准测试。我们需要通过<code>-bench</code>命令行标志参数手工指定要运行的基准测试函数。该参数是一个正则表达式，用于匹配要执行的基准测试函数的名字，默认值是空的。其中“.”模式将可以匹配所有基准测试函数.</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>bench<span class="token operator">=</span>balence <span class="token keyword">go</span> test <span class="token operator">-</span>bench<span class="token operator">=</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>-benchtime</li></ul><p>自定义测试的时间</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>bench<span class="token operator">=</span><span class="token punctuation">.</span> benchtime<span class="token operator">=</span>5s balence_test<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-benchmem</li></ul><p>显示内存分配情况</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> test <span class="token operator">-</span>v <span class="token operator">-</span>bench<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token operator">-</span>benchmem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>例子理解</p></blockquote><p><strong>balence.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> benchmark<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/bytedance/gopkg/lang/fastrand"</span><span class="token string">"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">var</span> ServerIndex <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">InitServerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>ServerIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//使用rand</span><span class="token keyword">func</span> <span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ServerIndex<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//使用fastrand</span><span class="token keyword">func</span> <span class="token function">FastSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ServerIndex<span class="token punctuation">[</span>fastrand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>balence_test.go</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> benchmark<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token comment">//基准测试开头是 Benchmark</span><span class="token comment">//串行 + rand </span><span class="token keyword">func</span> <span class="token function">BenchmarkSelect</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">InitServerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//初始化计时器 ,从当前开始计时</span>b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//并行 + rand</span><span class="token keyword">func</span> <span class="token function">BenchmarkSelectParallel</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">InitServerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">RunParallel</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pb <span class="token operator">*</span>testing<span class="token punctuation">.</span>PB<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> pb<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//并行 + fastrand</span><span class="token keyword">func</span> <span class="token function">BenchmarkFastSelectParallel</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">InitServerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">ResetTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">RunParallel</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pb <span class="token operator">*</span>testing<span class="token punctuation">.</span>PB<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> pb<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">FastSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">cpu<span class="token punctuation">:</span> <span class="token function">Intel</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token function">Core</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> i5<span class="token operator">-</span>1038NG7 CPU @ <span class="token number">2</span><span class="token punctuation">.</span>00GHzBenchmarkSelectBenchmarkSelect<span class="token operator">-</span><span class="token number">8</span>               <span class="token number">65569854</span>        <span class="token number">18.84</span> ns<span class="token operator">/</span>opBenchmarkSelectParallelBenchmarkSelectParallel<span class="token operator">-</span><span class="token number">8</span>       <span class="token number">17098982</span>        <span class="token number">72.12</span> ns<span class="token operator">/</span>opBenchmarkFastSelectParallelBenchmarkFastSelectParallel<span class="token operator">-</span><span class="token number">8</span>   <span class="token number">953150083</span>         <span class="token number">1.232</span> ns<span class="token operator">/</span>op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><p><code>BenchmarkSelectParallel</code>和<code>BenchmarkFastSelectParallel</code>的都是并发的，但是时间的差距那么大是因为<code>rand</code>函数的性能.</p><p>这一随机性能问题，开源了一个高性能随机数方法<code>fastrand</code></p><p>性能提升了百倍。主要的思路是牺牲了一定的数列一致性，在大多数场景是适用的</p><h3 id="课程实践-1"><a href="#课程实践-1" class="headerlink" title="课程实践"></a>课程实践</h3><h3 id="发帖"><a href="#发帖" class="headerlink" title="发帖"></a>发帖</h3><h2 id="高质量编程和性能调优"><a href="#高质量编程和性能调优" class="headerlink" title="高质量编程和性能调优"></a>高质量编程和性能调优</h2><h3 id="高质量编程"><a href="#高质量编程" class="headerlink" title="高质量编程"></a>高质量编程</h3><h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>解释代码实现的原因<ul><li>解释代码的外部因素</li><li>提供额外上下文</li></ul></li><li>解释代码什么情况会出错<ul><li>解释代码的限制条件</li></ul></li></ul><blockquote><p>公共符号要注释</p></blockquote><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><blockquote><p>变量</p></blockquote><ul><li><em>缩略词全部大写</em>，位于变量开头且不需要导出的时候，使用全小写<ul><li>例如 ServeHTTP 而不是ServeHttp</li><li>使用 XMLHTTPRequest 或者 xmlHTTPRequest</li></ul></li><li>变量距离被使用的地方越远，越需要越多的上下文信息<ul><li>全局变量</li></ul></li></ul><blockquote><p>函数</p></blockquote><ul><li>函数的参数名尽可能的有特定的含义，减少信息量</li><li>函数名尽量不携带包名的上下文<ul><li>http包中有Serve和ServeHTTP函数（命名应该是前者）</li><li>使用 http.Serve，而不是http.ServeHTTP</li></ul></li></ul><blockquote><p>package</p></blockquote><ul><li><p>全部由小写字母</p></li><li><p>简短且具有上下文信息</p></li><li><p>不要和标准库同名</p></li><li><p>不要使用常用变量名作为包名</p></li><li><p>使用单数而不是复数</p></li><li><p>谨慎使用缩写</p></li></ul><blockquote><p>小结</p></blockquote><ul><li>目标就是降低阅读理解代码成本</li><li>重点考虑上下文信息，设计简洁清晰的名称</li></ul><h4 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h4><ul><li>优先处理错误情况，尽早返回减少嵌套</li><li>尽量保持最小缩进，避免复杂嵌套分支</li></ul><h4 id="错误和异常处理"><a href="#错误和异常处理" class="headerlink" title="错误和异常处理"></a>错误和异常处理</h4><blockquote><p>简单错误</p></blockquote><ul><li>简单错误：</li></ul><blockquote><p>错误的Wrap和Unwrap</p></blockquote><ul><li>error的跟踪链</li><li>每一层调用方都可以补充错误上下文信息，方便跟踪排查问题</li></ul><blockquote><p>错误判定</p></blockquote><ul><li>判断特定错误</li><li>获取特定种类的错误</li></ul><blockquote><p>panic</p></blockquote><ul><li>如果程序无法正常工作，panic</li><li>如果问题可以被屏蔽和解决，还是使用error代替panic</li></ul><blockquote><p>recover</p></blockquote><ul><li>recover只能在被defer的函数中使用</li><li>只在当前的goroutine生效</li><li>defer的顺序是后进先出</li><li>可以在recover后在log记录当前的调用栈</li></ul><blockquote><p>小结</p></blockquote><ul><li>error尽可能提供简明的信息，方便定位问题</li><li>panic用于真正的异常</li><li></li></ul><h3 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h3><blockquote><p>简介</p></blockquote><ul><li>性能优化的前提是满足正确可靠，简洁等因素</li></ul><blockquote><p>如何使用</p></blockquote><ul><li>性能表示需要实际数据衡量</li><li></li></ul><h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><h4 id="Benchmark参数"><a href="#Benchmark参数" class="headerlink" title="Benchmark参数"></a>Benchmark参数</h4><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220511225458057.png" alt="image-20220511225458057"></p><h4 id="Slice优化"><a href="#Slice优化" class="headerlink" title="Slice优化"></a>Slice优化</h4><blockquote><p> slice预分配内存</p></blockquote><p>尽可能在使用make()时候出实话切片需要的容量信息</p><blockquote><p>陷阱？大内存未释放</p></blockquote><h4 id="map优化"><a href="#map优化" class="headerlink" title="map优化"></a>map优化</h4><blockquote><p>预分配内存</p></blockquote><h4 id="字符串处理优化"><a href="#字符串处理优化" class="headerlink" title="字符串处理优化"></a>字符串处理优化</h4><blockquote><p>推荐使用strings.Builder</p></blockquote><p>+性能最差</p><h4 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h4><blockquote><p>空结构体</p></blockquote><h4 id="atomic包"><a href="#atomic包" class="headerlink" title="atomic包"></a>atomic包</h4><ul><li>性能比sync.Mutex好</li><li>atomic包用来维护一个变量</li></ul><h4 id="性能优化建议-1"><a href="#性能优化建议-1" class="headerlink" title="性能优化建议"></a>性能优化建议</h4><ul><li>避免常见的性能陷阱可以保证大部分程序性能</li><li></li></ul><h3 id="pprof分析实战"><a href="#pprof分析实战" class="headerlink" title="pprof分析实战"></a>pprof分析实战</h3><h4 id="性能调优原则"><a href="#性能调优原则" class="headerlink" title="性能调优原则"></a>性能调优原则</h4><ul><li>不要过早优化</li><li>不要过度优化：兼容迭代更新</li><li>依靠数据分析</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><strong>网页</strong></li><li>可视化终端</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>runtime/pprof</li><li>net/http/pprof</li></ul><h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><ul><li><strong>Top</strong></li><li><strong>调用图-Graph</strong></li><li><strong>火焰图-FlameGraph</strong></li><li>Peek</li><li><strong>源码-Source</strong></li><li>反汇编-Disassemble</li></ul><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><h5 id="block-阻塞"><a href="#block-阻塞" class="headerlink" title="block-阻塞"></a>block-阻塞</h5><blockquote><p>采样过程和阻塞</p></blockquote><blockquote><p>命令</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof<span class="token operator">-</span>http<span class="token operator">=</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token string">"http://localhost:6060/debug/pprof/block"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查找</p></blockquote><p>找到source视图找到对应的代码块</p><h5 id="mutex-锁排查"><a href="#mutex-锁排查" class="headerlink" title="mutex-锁排查"></a>mutex-锁排查</h5><blockquote><p>采样过程和原理</p></blockquote><blockquote><p>命令</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof<span class="token operator">-</span>http<span class="token operator">=</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token string">"http://localhost:6060/debug/pprof/mutex"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="gotoutine排查"><a href="#gotoutine排查" class="headerlink" title="gotoutine排查"></a><strong>gotoutine排查</strong></h5><blockquote><p>采样过程和原理</p></blockquote><blockquote><p>命令</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> tool pprof <span class="token operator">-</span>http<span class="token operator">=</span><span class="token punctuation">:</span><span class="token number">8080</span> <span class="token string">"http://localhost:6060/debug/pprof/goroutine"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>火焰图</p></blockquote><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220511232843571.png" alt="image-20220511232843571"></p><h5 id="cpu排查"><a href="#cpu排查" class="headerlink" title="cpu排查"></a><strong>cpu排查</strong></h5><blockquote><p>采样过程和原理</p></blockquote><blockquote><p>命令行</p></blockquote><p>top相关参数</p><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220511231926308.png" alt="image-20220511231926308"></p><p><strong>定位</strong></p><p>通过 list ect</p><blockquote><p>web 命令</p></blockquote><p>调用关系的可视化</p><h5 id="Head堆内存排查"><a href="#Head堆内存排查" class="headerlink" title="Head堆内存排查"></a><strong>Head堆内存排查</strong></h5><blockquote><p>采样过程和原理</p></blockquote><blockquote><p>命令</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>sample</p></blockquote><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220511232645265.png" alt="image-20220511232645265"></p><h3 id="性能调优案例"><a href="#性能调优案例" class="headerlink" title="性能调优案例"></a>性能调优案例</h3><ul><li>业务服务优化</li><li>基础库优化</li><li>go语言优化</li></ul><h4 id="业务服务优化"><a href="#业务服务优化" class="headerlink" title="业务服务优化"></a>业务服务优化</h4><blockquote><p>基本概念</p></blockquote><blockquote><p>流程</p></blockquote><blockquote><p>建立服务性能评估手段</p></blockquote><ul><li>服务性能评估方式</li><li>请求流量构造</li><li>压测范围</li><li>性能数据采集</li></ul><blockquote><p>分析性能数据，定位性能瓶劲</p></blockquote><ul><li><p>使用库不规范</p></li><li><p>对比火焰图：高并发场景优化不足</p></li></ul><blockquote><p>重点优化项改造</p></blockquote><ul><li>正确性是基础</li><li>响应数据diff<ul><li>判断新旧服务</li></ul></li></ul><blockquote><p>优化效果验证</p></blockquote><ul><li>重复压测验证</li><li>上线评估优化结果<ul><li>逐步放量</li><li>服务监控</li><li>收集性能数据</li></ul></li></ul><blockquote><p>进一步优化，服务整体链路分析</p></blockquote><ul><li>规范上游服务调用接口，明确场景需求</li><li>分析链路，优化业务流程</li></ul><h4 id="基础库优化"><a href="#基础库优化" class="headerlink" title="基础库优化"></a>基础库优化</h4><blockquote><p>AB实验SDK的优化</p></blockquote><ul><li>分析基础库核心逻辑和性能瓶劲</li><li>内部压测验证</li><li>推广业务服务验证</li></ul><h4 id="编译器-amp-运行优化"><a href="#编译器-amp-运行优化" class="headerlink" title="编译器&amp;运行优化"></a>编译器&amp;运行优化</h4><ul><li><p>优化内存分配策略</p></li><li><p>优化代码编译流程</p></li><li><p>内部压测验证</p></li><li><p>推广业务服务验证</p></li><li><p>优点</p><ul><li>接入简单，只需要调整编译配置</li><li>通用性强</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>性能调优原则<ul><li>依靠数据</li></ul></li><li>性能分析工具pprof<ul><li>手链使用pprof工具</li></ul></li><li>性能调优<ul><li>保证正确性</li><li>定位主要瓶颈</li></ul></li></ul><h2 id="go语言优化"><a href="#go语言优化" class="headerlink" title="go语言优化"></a>go语言优化</h2><h3 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul><li>需要完成的三个任务<ul><li>为新对象分配空间</li><li>找到存活对象</li><li>回收死亡对象存储空间</li></ul></li></ul><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><ul><li>Mutator：业务线程，分配新对象，修改对象指向关系</li><li>Collector：GC线程，找到存活对象，并且回收死亡对象的空间</li></ul><blockquote><p>工作方式</p></blockquote><ul><li><p>Serial Gc:只有一个Collector</p></li><li><p>Parallel Gc：支持多个collectors同时回收的GC算法</p></li><li><p>前两者存在暂停来执行Collector回收</p></li><li><p>Concurrent Gc：mutator和collector可以同时执行</p><ul><li>涉及到的就是Collector必须感知对象指向关系的改变</li></ul></li></ul><h4 id="策略-追踪垃圾回收"><a href="#策略-追踪垃圾回收" class="headerlink" title="策略-追踪垃圾回收"></a>策略-追踪垃圾回收</h4><ul><li>对象被回收的条件：指针指向关系不可达的对象</li></ul><blockquote><p>工作流程</p></blockquote><ul><li><p>标记根对象</p><ul><li>静态变量，全局变量，线程栈等</li></ul></li><li><p>标记：找到可达对象</p><ul><li>从根对象开始，找到所有可达对象</li></ul></li><li><p>清理：清理掉所有的不可达对象</p><ul><li>将存活对象复制到另外的内存空间（Copying GC）：</li><li>将死亡对象的内存标记为可分配（mark-sweep GC）</li><li>移动整理存活对象（Mark-compact Gc）</li></ul></li><li><p>根据对象的生命周期，使用不同的标记和清理策略</p></li></ul><blockquote><p>清理策略</p></blockquote><ul><li><code>Copying Gc</code>： 将存活对象，copying存活对象到另一个分配合适大小的内存块。</li><li><code>Mark-sweep Gc</code>：通过free-list管理空闲的内存</li><li><code>Mark-compact Gc</code>：在存活对象所在的内存块原地整理存活对象</li></ul><h4 id="策略-分代GC-garbage-collection"><a href="#策略-分代GC-garbage-collection" class="headerlink" title="策略-分代GC(garbage collection)"></a>策略-分代GC(garbage collection)</h4><p>根据GC次数分配不同区域</p><ul><li><p>根据对象的GC次数来分配清理策略</p></li><li><p>目的：针对young和old对象，制定不同的GC策略，降低整体内存管理开销</p></li></ul><blockquote><p> young generation</p></blockquote><ul><li>存活对象少，采用copying gc</li><li>gc吞吐量高</li></ul><blockquote><p>old generation</p></blockquote><ul><li>对象趋向于一直活着，反复复制开销大</li><li>可以采用mark-sweep GC</li></ul><h4 id="策略-引用计数"><a href="#策略-引用计数" class="headerlink" title="策略-引用计数"></a>策略-引用计数</h4><ul><li><p>每个对象有一个与之关联的引用数目</p></li><li><p>对象存活的条件：引用数目大于0</p></li><li><p>优点</p><ul><li>内存管理操作被平摊到程序执行过程中</li></ul></li><li><p>缺点</p><ul><li>无法回收环形数据结构 - weak reference</li><li>内存开销，每个对象需要引入额外空间记录引用数目</li><li>回收内存时可能引发暂停</li><li>维护开销大，通过原子操作？</li></ul></li></ul><h3 id="go内存管理及优化"><a href="#go内存管理及优化" class="headerlink" title="go内存管理及优化"></a>go内存管理及优化</h3><ul><li>noscan 的 mspan：分配不包含指针的对象<br>  GC不需要扫描</li><li>scan 的 mspan：分配包含指针的对象<br>  GC需要扫描</li></ul><h4 id="go内存分配-分块机制"><a href="#go内存分配-分块机制" class="headerlink" title="go内存分配-分块机制"></a>go内存分配-分块机制</h4><ul><li><p>目的：为对象在heap分配内存</p></li><li><p>提前分块</p></li><li><h2 id="提前将内存分块"><a href="#提前将内存分块" class="headerlink" title="提前将内存分块"></a>提前将内存分块</h2></li><li><p>根据对象大小分配合适的块返回</p></li></ul><h4 id="内存分配-缓存"><a href="#内存分配-缓存" class="headerlink" title="内存分配-缓存"></a>内存分配-缓存</h4><h4 id="优化方案-Balanced-GC"><a href="#优化方案-Balanced-GC" class="headerlink" title="优化方案-Balanced GC"></a>优化方案-Balanced GC</h4><blockquote><p>优化对象</p></blockquote><ul><li>GAB：goroutine allocation buffer</li><li>GAB 用于分配 noscan 类型的小对象 ： &lt; 128b</li></ul><blockquote><p>优化流程</p></blockquote><ul><li>使用三个指针维护 GAB：base，end，top</li><li>bump pointer 风格对象分配<ul><li>不需要和其他分配请求互斥</li><li>分配动作简单</li></ul></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> top <span class="token operator">+</span> size <span class="token operator">&lt;=</span> end<span class="token punctuation">{</span>    addr <span class="token operator">:=</span> top    top <span class="token operator">+=</span> size    <span class="token keyword">return</span> addr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>技术细节</p></blockquote><ul><li>GAB对于GO内存管理是一个大对象</li><li>问题：如果说在GAB中大部分都是空闲的，而只有一小部分存在有对象，可能导致整个GAB都是存活的，这样会导致内存被延迟释放</li><li>方案：移动GAB中存活的对象<ul><li>当GAB的总大小大于存活对象的大小超过一定的阀值的时候，将GAB中存活的对象通过copying的方式复制到另外分配的GAB中</li><li>原先的GAB就可以整个释放，</li></ul></li></ul><h3 id="编译器和静态分析"><a href="#编译器和静态分析" class="headerlink" title="编译器和静态分析"></a>编译器和静态分析</h3><h4 id="编译器的结构"><a href="#编译器的结构" class="headerlink" title="编译器的结构"></a>编译器的结构</h4><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><h4 id="过程内分析和过程间分析"><a href="#过程内分析和过程间分析" class="headerlink" title="过程内分析和过程间分析"></a>过程内分析和过程间分析</h4><h3 id="go编译器优化"><a href="#go编译器优化" class="headerlink" title="go编译器优化"></a>go编译器优化</h3><h4 id="函数内联（Inlining"><a href="#函数内联（Inlining" class="headerlink" title="函数内联（Inlining)"></a>函数内联（Inlining)</h4><h4 id="Beast-Mode"><a href="#Beast-Mode" class="headerlink" title="Beast Mode"></a>Beast Mode</h4><ul><li>Beast Mode :调整函数内敛的策略<ul><li>降低函数调用开销</li><li>增加其他优化：逃逸分析</li></ul></li></ul><h4 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h4><ul><li><p>逃逸分析：分析代码中指针的动态作用域：指针在何处可以被访问</p></li><li><p>大致思路</p></li><li><p>Beast Mode ：函数扩展了函数边界，更多对象不逃逸</p></li><li><p>优化：未逃逸的对象可以在栈上进行优化</p></li></ul><h2 id="笔记项目实战"><a href="#笔记项目实战" class="headerlink" title="笔记项目实战"></a>笔记项目实战</h2><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><p><code>docker-compose up</code>会读取<code>docker-compose.yml</code>配置文件来创建容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果服务容器已经存在，会重新创建容器</li><li>如果容器创建后更改配置文件，会全部关掉，重新创建容器</li></ul><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p><a href="https://juejin.cn/post/7097126973163454494#heading-21">计算机网络</a></p><h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>Linux环境下</p><ul><li>抓包工具：tcpdump、wireshark</li></ul><h4 id="tcpdump使用"><a href="#tcpdump使用" class="headerlink" title="tcpdump使用"></a>tcpdump使用</h4><ul><li><a href="https://www.jianshu.com/p/d9162722f189">教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/74812069">教程2</a></li><li><a href="https://www.jianshu.com/p/a57a5b0e58f0">教程3</a></li></ul><hr><blockquote><p>额外知识</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 sudo tcpdump -D 可以获取所有监听网卡</span><span class="token comment"># 在mac 可以通过 ifconfig 命令来查看对应网卡</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>ent1之类的是物理网卡的设备名，</p></li><li><p>en0或是et0是网络接口名(逻辑上的)</p></li><li><p>enx(x是一个数字，代表第几块网卡)是标准以太网接口，</p></li><li><p>et0是IEEE 802.3以太网接口。</p></li></ul><hr><ul><li>tcpdump是Unix/Linux 下的抓包工具，在 macOS 上也有实现。这个命令可以针对指定网卡、端口、协议进行抓包</li><li></li></ul><h4 id="wireshark使用"><a href="#wireshark使用" class="headerlink" title="wireshark使用"></a>wireshark使用</h4><ul><li><a href="https://www.wireshark.org/#learnWS">官网教程</a></li><li><a href="https://blog.csdn.net/anjisi/article/details/118651906">教程</a></li><li><a href="https://cloud.tencent.com/developer/article/1355945">教程02</a></li><li><a href="https://zhuanlan.zhihu.com/p/92993778">教程03</a></li></ul><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>MAC ：Media Access Control（媒体访问控制地址）<ul><li>物理地址</li></ul></li><li><h2 id="SDN：Software-Defined-Network（软件定义网络）"><a href="#SDN：Software-Defined-Network（软件定义网络）" class="headerlink" title="SDN：Software Defined Network（软件定义网络）"></a>SDN：Software Defined Network（软件定义网络）</h2></li></ul><h3 id="路由（routing）"><a href="#路由（routing）" class="headerlink" title="路由（routing）"></a>路由（routing）</h3><ul><li><p>路由（routing）：分组从源到目的地时，决定端到端路径的网络范围的进程</p></li><li><p>路由在发送数据包的时候，源和目的IP地址不会发生改变，只会改变MAC地址，找到发包</p></li></ul><hr><ul><li>动态路由<ul><li>BGP/OSPF</li></ul></li></ul><hr><blockquote><p>路由发包原理</p></blockquote><ul><li><p>同网段：配置网段默认添加静态路由，获取对端MAC直接发包</p></li><li><p>跨网段：配置网关路由，获取网管MAC地址发包</p></li><li><p>路由是网状的，不一定是对称的</p></li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><h4 id="ARP（Address-Resolution-Protocol）"><a href="#ARP（Address-Resolution-Protocol）" class="headerlink" title="ARP（Address Resolution Protocol）"></a>ARP（Address Resolution Protocol）</h4><ul><li>ARP（Address Resolution Protocol）<ul><li>地址解析协议：根据IP地址获取物理地址（MAC）</li></ul></li><li>ARP广播不会跨网段，且ARP应答单播</li></ul><hr><ul><li>免费ARP</li><li>ARP代理</li></ul><h4 id="IP（Internet-Protocol-Address）"><a href="#IP（Internet-Protocol-Address）" class="headerlink" title="IP（Internet Protocol Address）"></a>IP（Internet Protocol Address）</h4><ul><li>IP（Internet Protocol Address<ul><li>互联网协议地址</li></ul></li></ul><hr><ul><li>IP唯一表示，互联网通用</li><li>IPv4：</li></ul><h4 id="NAT（Network-Address-Translation）"><a href="#NAT（Network-Address-Translation）" class="headerlink" title="NAT（Network Address Translation）"></a>NAT（Network Address Translation）</h4><ul><li>NAT：（Network Address Translation）网络地址转换</li><li>NAT-改变IP和端口号</li></ul><h4 id="数据包-模型"><a href="#数据包-模型" class="headerlink" title="数据包-模型"></a>数据包-模型</h4><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220519210802862.png" alt="image-20220519210802862"></p><h4 id="DNS（Domain-Name-System）"><a href="#DNS（Domain-Name-System）" class="headerlink" title="DNS（Domain Name System）"></a>DNS（Domain Name System）</h4><ul><li>递归请求</li></ul><h4 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h4><p><img src="/2022/05/08/ji-suan-ji-yu-yan-lei/go-main/go-camp/image-20220519222009145.png" alt="image-20220519222009145"></p><ul><li><p>传输层协议</p></li><li><p>配一个UDP的头，把payload里面塞数据就可以发送</p></li><li><p>不需要建立连接就能直接进行数据发送和接收。</p></li><li><p>属于不可靠的、没有时序的通信，但是UDP协议的实时性比较好。</p></li><li><p>通常用于视频直播相关领域。</p></li></ul><hr><ul><li>不保证协议可靠</li><li>存在丢包</li></ul><h4 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）"></a>TCP（Transmission Control Protocol）</h4><ul><li>TCP是传输层的协议</li></ul><blockquote><p> 三次握手</p></blockquote><blockquote><p>TCP-传输</p></blockquote><ul><li>什么是消息确认 ACK。<ul><li>答：如果在处理消息的过程中，消费者的服务器在处理消息的时候出现异常，那么可能这条正在处理的消息就没有完成消息消费，数据就会丢失。为了确保数据不会丢失，RabbitMQ 支持消息确定 - ACK。</li></ul></li><li>ACK 的消息确认机制<ul><li>ACK 机制是消费者从 RabbitMQ 收到消息并处理完成后，反馈给 RabbitMQ，RabbitMQ 收到反馈后才将此消息从队列中删除</li></ul></li></ul><hr><ul><li>sequence number：发送方</li><li>acknowledge number（ack）：（确认字符）期望的接收方的下一次sequence number是多少</li></ul><blockquote><p>TCP-传输-有限状态机</p></blockquote><blockquote><p>Timewait</p></blockquote><blockquote><p>丢包</p></blockquote><blockquote><p>滑动窗口</p></blockquote><blockquote><p>流量控制/拥塞控制</p></blockquote><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li>HTTPS解密出来仍然是HTTP</li></ul><blockquote><p>SSL/TLS握手</p></blockquote><ul><li>对称加密和非对称加密</li></ul><blockquote><p>CA（Certificate Authority）</p></blockquote><ul><li>证书颁发机构：Certificate Authority</li><li>非对称加密的基础</li><li></li></ul><h4 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h4><ul><li>2.0协议是在1.x基础上的升级而不是重写，1.x协议的方法，状态及api在2.0协议里是一样的。</li><li>2.0协议重点是对终端用户的感知延迟、网络及服务器资源的使用等性能的优化</li></ul><blockquote><p>优化内容</p></blockquote><ul><li>二进制分帧（Binary Format)</li></ul><blockquote><p>多路复用</p></blockquote><ul><li>核心思想：多路复用</li></ul><hr><ul><li>如果多路复用的时候发生丢包的会发生对头阻塞</li></ul><h4 id="HTTP3-0-QUIC"><a href="#HTTP3-0-QUIC" class="headerlink" title="HTTP3.0-QUIC"></a>HTTP3.0-QUIC</h4><ul><li>QUIC（Quick UDP Internet Connection）<ul><li>快速</li><li>HTTP3.0就是QUIC发展</li></ul></li></ul><hr><ul><li>kernel or userSapce</li><li>解决TCP对头阻塞问题</li><li>弱网传输的优势</li></ul><h3 id="网路路径"><a href="#网路路径" class="headerlink" title="网路路径"></a>网路路径</h3><h4 id="数据中心分布"><a href="#数据中心分布" class="headerlink" title="数据中心分布"></a>数据中心分布</h4><h4 id="同运营商访问"><a href="#同运营商访问" class="headerlink" title="同运营商访问"></a>同运营商访问</h4><h4 id="CDN（Content-Delivery-Network）"><a href="#CDN（Content-Delivery-Network）" class="headerlink" title="CDN（Content Delivery Network）"></a>CDN（Content Delivery Network）</h4><ul><li>CDN：（Content Delivery Network）内容分发网络</li><li>静态资源缓存系统</li></ul><h4 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h4><ul><li>DSA 使用一个<strong>放置在源服务器上的较小“探测路径”文件来优化 CDN 的网络路由配置</strong></li></ul><h3 id="网络稳定"><a href="#网络稳定" class="headerlink" title="网络稳定"></a>网络稳定</h3><h4 id="容灾概念"><a href="#容灾概念" class="headerlink" title="容灾概念"></a>容灾概念</h4><ul><li>容灾是为了在遭遇灾害时能保证信息系统能正常运行</li></ul><hr><ul><li>故障发生</li><li>故障感知</li><li>自动切换</li><li>服务恢复</li></ul><h4 id="容灾具体案例"><a href="#容灾具体案例" class="headerlink" title="容灾具体案例"></a>容灾具体案例</h4><h4 id="网络-故障明确"><a href="#网络-故障明确" class="headerlink" title="网络-故障明确"></a>网络-故障明确</h4><h4 id="故障止损"><a href="#故障止损" class="headerlink" title="故障止损"></a>故障止损</h4><ul><li>先止损在排查</li></ul><h4 id="分段排查"><a href="#分段排查" class="headerlink" title="分段排查"></a>分段排查</h4><blockquote><p>客户端排查</p></blockquote><ul><li>访问其他服务</li><li>其他客户端访问服务</li></ul><blockquote><p>服务端排查</p></blockquote><ul><li>服务端监控指标</li><li>分组件排查</li></ul><blockquote><p>中间链路排查</p></blockquote><ul><li>中间网络设备</li><li>DNS</li></ul><h4 id="常见网络故障排查命令"><a href="#常见网络故障排查命令" class="headerlink" title="常见网络故障排查命令"></a>常见网络故障排查命令</h4><ul><li>dig：查询DNS问题</li><li>ping、telnet、nmap查询三层、四层连通性</li><li>Traceroute：排查中间链路</li><li>iptabels</li><li>tcpdump</li></ul><h4 id="故障排查案例"><a href="#故障排查案例" class="headerlink" title="故障排查案例"></a>故障排查案例</h4><ul><li><p>客户端异常-》服务端自测正常-》网关转发异常-》健康检查异常</p></li><li><p>安徽电信报障某APP无法使用-》检测后端服务正常，安徽电信流量突降-》安徽电信客<br>  户端ping不通目标服务-》电缆被挖断</p></li><li><p>个别用户报故障，生产环境大多是客户端的问题</p></li><li><p>某APP故障-》后端服务器反馈服务正常-》网络转发设备异常-》抓包-》路由不对称</p></li></ul><h4 id="故障预防"><a href="#故障预防" class="headerlink" title="故障预防"></a>故障预防</h4><ul><li>监控报警</li><li>故障演练</li><li>故障止损</li></ul><h3 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h3><h4 id="UDP-socket实现ack，感知丢包重传"><a href="#UDP-socket实现ack，感知丢包重传" class="headerlink" title="UDP socket实现ack，感知丢包重传"></a>UDP socket实现ack，感知丢包重传</h4><blockquote><p>提示</p></blockquote><ul><li>学会UDP socket编程</li><li>先从简单的ack学习，客户端等待ack再发包</li><li>什么时候客户端认为是丢包？</li><li>重传怎么考虑效率？</li><li>能不能不阻塞只穿丢掉的中间的段？</li></ul><h4 id="三台同网段内的服务器，模拟实现一个路由器"><a href="#三台同网段内的服务器，模拟实现一个路由器" class="headerlink" title="三台同网段内的服务器，模拟实现一个路由器"></a>三台同网段内的服务器，模拟实现一个路由器</h4><blockquote><p>方法一：Linux操作系统配置法提示：</p></blockquote><ol><li>了解Linux的路由配置方式</li><li>确保是同网段直连可达的环境。在三台机<br>  器上另外配置P网段和路由</li><li>一台机器做客户端，一台机器做路由器，一台机器做服务端</li><li>客户端配置到达服务器的下一跳指向路由器，路由器上配置到达服务端的路由</li></ol><blockquote><p>方法二：用户态socket编程实现简易route软件提示：</p></blockquote><ol><li>收到指定的包后做转发</li><li>注意是修改报文的MAC。不是修改IP</li><li>实现一个对称路由。这样可以实现TCP交互</li><li>可以通过ping来验证</li><li>可以支持traceroute吗？</li></ol><h3 id="TCP拥塞算法"><a href="#TCP拥塞算法" class="headerlink" title="TCP拥塞算法"></a>TCP拥塞算法</h3><h3 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h3><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h2 id="RPC-remote-procedure-calls"><a href="#RPC-remote-procedure-calls" class="headerlink" title="RPC(remote procedure calls)"></a>RPC(remote procedure calls)</h2><h3 id="STU"><a href="#STU" class="headerlink" title="STU"></a>STU</h3><ul><li><a href="https://www.jianshu.com/p/9ccdea882688">理解STU</a></li></ul><h3 id="RPC需要解决的问题"><a href="#RPC需要解决的问题" class="headerlink" title="RPC需要解决的问题"></a>RPC需要解决的问题</h3><ul><li>函数映射</li><li>数据转换成字节流</li><li>网络传输</li></ul><h3 id="完整的PRC过程"><a href="#完整的PRC过程" class="headerlink" title="完整的PRC过程"></a>完整的PRC过程</h3><ul><li>IDL</li><li>生成代码</li><li>编解码</li><li>通信协议</li><li>网络传输</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>资料链接</title>
      <link href="/2022/05/07/za-pian/zi-liao-lian-jie/"/>
      <url>/2022/05/07/za-pian/zi-liao-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo美化"><a href="#hexo美化" class="headerlink" title="hexo美化"></a>hexo美化</h2><ul><li><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/112971657?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165202984716782391815480%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165202984716782391815480&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-112971657-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=matery%E4%B8%BB%E9%A2%98&amp;spm=1018.2226.3001.4187">博客-美化matery</a></p></li><li><p><a href="https://liuruibin.com/posts/64eb/">美化matery</a></p></li><li><p><a href="http://luckyzmj.cn/posts/1b9a9e28.html">matery代码块优化</a></p></li></ul><h2 id="高清壁纸"><a href="#高清壁纸" class="headerlink" title="高清壁纸"></a>高清壁纸</h2><ul><li><a href="https://unsplash.com/">unsplash</a></li></ul><p>​</p><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p><a href="https://curlconverter.com/">curl转换</a></p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><a href="https://oktools.net/json">json转换</a></p><h2 id="live2d模型"><a href="#live2d模型" class="headerlink" title="live2d模型"></a>live2d模型</h2><ul><li><p><a href="https://github.com/ezshine/live2d-model-collections">model</a></p></li><li><p><a href="https://github.com/Eikanya/Live2d-model">model</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/05/07/ji-suan-ji-ji-chu-lei/git/"/>
      <url>/2022/05/07/ji-suan-ji-ji-chu-lei/git/</url>
      
        <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p><a href="https://www.jianshu.com/p/d220c88bb516">常用命令01</a></p><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">常用命令02</a></p>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Themeleaf</title>
      <link href="/2022/05/06/java-pian/themeleaf/"/>
      <url>/2022/05/06/java-pian/themeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h3 id="抽取公共网页"><a href="#抽取公共网页" class="headerlink" title="抽取公共网页"></a>抽取公共网页</h3><p>html 存在多个公共的部分，例如头部和侧边栏。</p><p>在Themeleaf中存在语法可以将公共部分抽出，然后其他网页通过引用的方式来展示</p><p>提供一个网页<code>common.html</code>作为公共部分的提取</p><p>使用<code>th:fragment</code>为命名</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common_javaScript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-1.10.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-ui-1.9.2.custom.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery-migrate-1.2.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/modernizr.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/jquery.nicescroll.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用公共网页"><a href="#引用公共网页" class="headerlink" title="引用公共网页"></a>引用公共网页</h3><ul><li><code>th:insert</code>：将代码块片段整个插入到使用了 th:insert 属性的 HTML 标签中；</li><li><code>th:replace</code>：将代码块片段整个替换使用了 th:replace 属性的 HTML 标签中；</li><li><code>th:include</code>：将代码块片段包含的内容插入到使用了 th:include 属性的 HTML 标签中。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>common::common_javaScript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>//common为网页的名称//common_javaScript为common.html中模块的命名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><img src="/2022/05/06/java-pian/themeleaf/image-20220222140031481.png" alt="image-20220222140031481"></p><p>Thymeleaf 实现 rander 功能</p><ul><li>将java数据加载到html文件中叫做render （渲染）</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="spring项目"><a href="#spring项目" class="headerlink" title="spring项目"></a>spring项目</h3><ul><li>添加Thymeleaf的jar包(直接在maven里面找)</li><li>新建一个Servlet类ViewBaseServlet</li><li>在web.xml中添加配置<ul><li>配置前缀 view-prefix</li><li>配置后缀 view-suffix</li></ul></li><li>Servlet 继承ViewBaseServlet<ul><li>重写**init()**方法</li></ul></li></ul><blockquote><p>路径</p></blockquote><p>家目录为Web</p><p>逻辑视图就是 index</p><p>Thymeleaf的物理视图</p><p>​view-prefix + templateName +view-suffix</p><p>​/ +index + .html</p><h3 id="spingboot项目"><a href="#spingboot项目" class="headerlink" title="spingboot项目"></a>spingboot项目</h3><blockquote><p>加载thymeleaf</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在application.yml中配置thymeleaf</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启thymeleaf视图解析</span>        <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>  <span class="token comment">#编码</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/  <span class="token comment">#前缀</span>        <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">#是否使用缓存</span>        <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML  <span class="token comment">#严格的HTML语法模式</span>        <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html  <span class="token comment">#后缀名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>路径</p></blockquote><p>路径默认在template下</p><p>也可以手动设置多个</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/template/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/static/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ViewBaseServlet实现代码"><a href="#ViewBaseServlet实现代码" class="headerlink" title="ViewBaseServlet实现代码"></a>ViewBaseServlet实现代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span></span><span class="token class-name">TemplateEngine</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>templatemode<span class="token punctuation">.</span></span><span class="token class-name">TemplateMode</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>thymeleaf<span class="token punctuation">.</span>templateresolver<span class="token punctuation">.</span></span><span class="token class-name">ServletContextTemplateResolver</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewBaseServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">TemplateEngine</span> templateEngine<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.获取ServletContext对象</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.创建Thymeleaf解析器对象</span>        <span class="token class-name">ServletContextTemplateResolver</span> templateResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextTemplateResolver</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.给解析器对象设置参数</span>        <span class="token comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setTemplateMode</span><span class="token punctuation">(</span><span class="token class-name">TemplateMode</span><span class="token punctuation">.</span>HTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ②设置前缀</span>        <span class="token class-name">String</span> viewPrefix <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"view-prefix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span>viewPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ③设置后缀</span>        <span class="token class-name">String</span> viewSuffix <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"view-suffix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span>viewSuffix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ④设置缓存过期时间（毫秒）</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setCacheTTLMs</span><span class="token punctuation">(</span><span class="token number">60000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ⑤设置是否缓存</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setCacheable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ⑥设置服务器端编码方式</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.创建模板引擎对象</span>        templateEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5.给模板引擎对象设置模板解析器</span>        templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateResolver</span><span class="token punctuation">(</span>templateResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> templateName<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.设置响应体内容类型和字符集</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.创建WebContext对象</span>        <span class="token class-name">WebContext</span> webContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.处理模板数据</span>        templateEngine<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>templateName<span class="token punctuation">,</span> webContext<span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html中使用"><a href="#html中使用" class="headerlink" title="html中使用"></a>html中使用</h2><p>在html顶部，添加<strong>themeleaf</strong>命名空间,直接就可以开箱就用</p><ul><li><!--suppress ThymeleafVariablesResolveInspection --></li><li><h tml="" lang="en" xmlns:th="http://www.thymeleaf.org"></h></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--suppress ThymeleafVariablesResolveInspection--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>// 提交方式跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/index}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>// 从session作用域获取值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#lists.isEmpty(session.studentList)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>// 对session中的数组进行遍历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span>  <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#lists.isEmpty(session.studentList)}<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student : ${session.studentList}<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${student.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${student.name}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>小白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${student.age}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${student.specialty}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><a href="http://c.biancheng.net/spring_boot/thymeleaf.html">基本语法（中文）</a></li><li><a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#the-template-engine">官方语法</a></li><li><a href="https://www.cnblogs.com/jnba/p/10832878.html">语法</a></li></ul><h2 id="过程问题"><a href="#过程问题" class="headerlink" title="过程问题"></a>过程问题</h2><h3 id="如果放在WEB-INF下，使得外界无法直接通过地址栏访问到html？"><a href="#如果放在WEB-INF下，使得外界无法直接通过地址栏访问到html？" class="headerlink" title="如果放在WEB-INF下，使得外界无法直接通过地址栏访问到html？"></a>如果放在WEB-INF下，使得外界无法直接通过地址栏访问到html？</h3><p>配置thymeleaf的前缀就可以了。。。</p><h3 id="MySQL-8-0-Public-Key-Retrieval-is-not-allowed"><a href="#MySQL-8-0-Public-Key-Retrieval-is-not-allowed" class="headerlink" title="MySQL 8.0 Public Key Retrieval is not allowed"></a>MySQL 8.0 Public Key Retrieval is not allowed</h3><p><img src="/2022/05/06/java-pian/themeleaf/image-20220302102942518.png" alt="image-20220302102942518"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>炮兵阵地</title>
      <link href="/2022/05/05/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/pao-bing-zhen-di/"/>
      <url>/2022/05/05/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/pao-bing-zhen-di/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/294/    292. 炮兵阵地    题目描述        balbala    Tag：        1.DP        2.状态压缩DP    思路：        每一行的状态用二进制来表示        首先筛选一行所有的合法状态        预处理处所有行可以有的下一行的合法状态        状态方程:f[i][j][k]:已经排了前i行，第i行状态为j，第i-1行状态为k的炮台最大数量        转移方程：                第i行的状态为a，第i-1行的状态为b，第i-2行的状态为c，第i行的状态的炮台的数量为 cnt[a]                f[i][a][b]=max(f[i][a][b],f[i-1][b][c]+cnt[a])        滚动数组优化：                每一行的状态只和上一行的状态有关                所以可以用奇偶性来分割开上一行*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>head<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> state<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j][k]: 已经排了前i行，第i行状态为j，第i-1行状态为k的炮台最大数量</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span> s <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           ans<span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>ch<span class="token punctuation">;</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span> <span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'H'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         a<span class="token operator">=</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            b<span class="token operator">=</span>state<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> aa<span class="token punctuation">,</span>bb<span class="token punctuation">,</span>cc<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// i </span>                 aa<span class="token operator">=</span>state<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>aa <span class="token operator">&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">:</span>head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// i-1 </span>                 bb<span class="token operator">=</span>state<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bb <span class="token operator">&amp;</span> g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">:</span>head<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//i-2</span>                     cc<span class="token operator">=</span> state<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cc<span class="token operator">&amp;</span> aa<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">[</span>bb<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">[</span>bb<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>bb<span class="token punctuation">]</span><span class="token punctuation">[</span>cc<span class="token punctuation">]</span><span class="token operator">+</span>cnt<span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>state<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxv <span class="token operator">=</span> <span class="token function">max</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>maxv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>maxv<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态压缩dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玉米田</title>
      <link href="/2022/05/05/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/yu-mi-tian/"/>
      <url>/2022/05/05/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/yu-mi-tian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T  <span class="token function">max</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  b<span class="token punctuation">,</span> T <span class="token keyword">const</span><span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">{</span>T maxn <span class="token operator">=</span> <span class="token number">0xc0c0c0c0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> maxn<span class="token punctuation">)</span> maxn <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> maxn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*      https://www.acwing.com/problem/content/329/    327. 玉米田    题目描述        在可以种植玉米的地方尽可能的种植玉米，且满足一个玉米的上下左右没有玉米    Tag:        1.dp        2.状态压缩DP    思路：        每一行的状态用二进制表示        状态方程：f[i][j]:已经摆好了前i行，且第i行的状态为j                转移方程：                上一行的状态为 b，当前第i行的状态为a                f[i][a]=f[i-1][b]                前提保证                1. a 和 题目条件该行的状态不冲突                2. a 和 b 没有冲突                1 可以通过if语句直接判断                2 可以通过预处理出所有状态可以有的合法状态*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> N<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> head<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token comment">//判断连续的0</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token operator">!</span>x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//不合法状态</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//两状态合法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>                head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//dp</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> aa<span class="token operator">=</span> s<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>aa <span class="token operator">&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> bb<span class="token operator">=</span>s<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态压缩dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点的赋值</title>
      <link href="/2022/05/03/summary/acwing/zhou-sai/20220430-49week/dian-de-fu-zhi/"/>
      <url>/2022/05/03/summary/acwing/zhou-sai/20220430-49week/dian-de-fu-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">_TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/4418/点的赋值    题目描述        给你一个无向图，每一条边的两个端点之和必须是奇数            端点只能是1，或2，或3    Tag：        1.二分图    思路：        通过相邻点不存在相同奇偶性来进行染色，如果不满足这样的情况答案必然是0        反之        通过奇偶来染色，可以通过1,2来进行染色通过 3-x 来转换奇偶        因为对于每个奇数可以取两个值，且每一种情况可以交替一次，        对于奇数占的位置为s1,偶数占的位置为s2        结果为 pow(2,s1)*pow(1,s2)  (1)        位置交替一次        奇数占的位置为s2,偶数占的位置为s1        结果为 pow(2,s2)*pow(1,s1)  (2)        所以总的结果为  (1)+(2)        */</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">300010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>N<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span>  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> s1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> s2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s1<span class="token operator">=</span>s2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">get</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span>MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">_IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子序列</title>
      <link href="/2022/05/03/summary/acwing/zhou-sai/20220430-49week/zi-xu-lie/"/>
      <url>/2022/05/03/summary/acwing/zhou-sai/20220430-49week/zi-xu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/4417/题目描述Tag：1.思路    思路：    奇数+偶数= 奇数    奇数+奇数= 偶数    偶数+偶数= 偶数        因为必然有结果，所以答案里面一定包含最大的奇数    如果要加偶数，把所有大于0的偶数加进来    如果要加奇数，则必须要加两个奇数维持奇偶性不变*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>a<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> alen<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> blen<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span>a<span class="token punctuation">[</span>alen<span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>blen<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        ans<span class="token operator">+=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数</title>
      <link href="/2022/05/03/ke-cheng-lei/gao-deng-shu-xue/"/>
      <url>/2022/05/03/ke-cheng-lei/gao-deng-shu-xue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计</title>
      <link href="/2022/05/03/ke-cheng-lei/gai-lu-lun/"/>
      <url>/2022/05/03/ke-cheng-lei/gai-lu-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="离散型随机变量及其分布"><a href="#离散型随机变量及其分布" class="headerlink" title="离散型随机变量及其分布"></a>离散型随机变量及其分布</h2><h3 id="几个常用的离散型分布及其关系"><a href="#几个常用的离散型分布及其关系" class="headerlink" title="几个常用的离散型分布及其关系"></a>几个常用的离散型分布及其关系</h3><h4 id="0-1分布"><a href="#0-1分布" class="headerlink" title="0-1分布"></a>0-1分布</h4><blockquote><p>定义</p></blockquote><p>随机变量X只能取到两个值0和1，分布律为<br>$$<br>P(X=)=p^k(1-p)^{1-k}<br>$$</p><h4 id="二项分布（Binomial"><a href="#二项分布（Binomial" class="headerlink" title="二项分布（Binomial)"></a>二项分布（Binomial)</h4><blockquote><p>定义</p></blockquote><p>如果随机变量 X 的所有可能取值为 0,1,….,n,且它的分布律为<br>$$<br>P(X=k)=C_n^kq^k(1-q)^{n-k}<br>$$</p><blockquote><p>符号表示</p></blockquote><p>$X～B(n,p)$</p><blockquote><p>二项分布满足的性质</p></blockquote><ul><li>$1=\sum C_n^kq^k(1-q)^{n-k}$</li></ul><h3 id="泊松分布-Poisson"><a href="#泊松分布-Poisson" class="headerlink" title="泊松分布(Poisson)"></a>泊松分布(Poisson)</h3><blockquote><p>定义</p></blockquote><p>若随机变量 X 的取值为非负整数，且它的分布律为<br>$$<br>P(X=k)=\frac{\lambda^k}{k!}e^{- \lambda}<br>$$</p><blockquote><p>符号表示</p></blockquote><p>$X～P(\lambda)$</p><h3 id="几何分布"><a href="#几何分布" class="headerlink" title="几何分布"></a>几何分布</h3><blockquote><p>定义</p></blockquote><p>$$P(X=k)=(1-q)^{k-1}q,k=1,2····$$</p><blockquote><p>符号表示</p></blockquote><p>$X～G(p)$</p><h2 id="连续型随机变量及其分布"><a href="#连续型随机变量及其分布" class="headerlink" title="连续型随机变量及其分布"></a>连续型随机变量及其分布</h2><h3 id="常用的连续型分布"><a href="#常用的连续型分布" class="headerlink" title="常用的连续型分布"></a>常用的连续型分布</h3><h4 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h4><blockquote><p>密度函数</p></blockquote><p>设连续型随机变量X在有限区间（a，b）内取值，且其概率密度为<br>$$<br>f(x)=<br>\begin{cases}<br>\cfrac{1}{b-a}, &amp;a&lt;x&lt;b\<br>0, 其他\<br>\end{cases}<br>$$</p><blockquote><p>符号表示</p></blockquote><p>$$<br>X～U(a,b)<br>$$</p><blockquote><p>分布函数</p></blockquote><p>$$<br>F(x)=<br>\begin{cases}<br>0, &amp;x\le a\<br>\cfrac{x-a}{b-a}, &amp;a&lt;x\le b\<br>1, &amp;x&gt;b\<br>\end{cases}<br>$$</p><h4 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h4><blockquote><p>密度函数</p></blockquote><p>$$<br>f(x)=<br>\begin{cases}<br>\lambda e^{-\lambda x} , &amp;x\ge 0\<br>0, &amp; x&lt;0\<br>\end{cases}<br>$$</p><blockquote><p>分布函数</p></blockquote><p>$$<br>F(x)=<br>\begin{cases}<br>1- e^{-\lambda x} , &amp;x\ge 0\<br>0, &amp; x&lt;0\<br>\end{cases}<br>$$</p><h4 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h4><blockquote><p>密度函数</p></blockquote><p>$$<br>f(x)=\cfrac{1}{\sqrt{2\pi}\sigma }e^{-\cfrac{(x- \mu)^2}{2\sigma^2}}<br>$$</p><blockquote><p>分布函数</p></blockquote><p>$$<br>F(x)=\cfrac{1}{\sqrt{2\pi}\sigma }\int_{-\infty}^{x} e^{-\cfrac{(t-\mu)^2}{2\sigma^2}}dt<br>$$</p><h4 id="标准正态分布"><a href="#标准正态分布" class="headerlink" title="标准正态分布"></a>标准正态分布</h4><blockquote><p>符号表示</p></blockquote><p>特别地当$\mu=0$,$\sigma=1$的时候，称X服从标准正态分步，符号表示为<br>$$<br>X～N(0，1)<br>$$</p><blockquote><p>密度函数</p></blockquote><p>$$<br>f(x)=\cfrac{1}{\sqrt{2\pi} }e^{-\cfrac{x^2}{2}}<br>$$</p><blockquote><p>分布函数</p></blockquote><p>$$<br>F(x)=\cfrac{1}{\sqrt{2\pi}}\int_{-\infty}^{x} e^{-\cfrac{t^2}{2}}dt<br>$$</p><h4 id="伽马分布"><a href="#伽马分布" class="headerlink" title="伽马分布"></a>伽马分布</h4>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小国王</title>
      <link href="/2022/04/29/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/xiao-guo-wang/"/>
      <url>/2022/04/29/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ya-suo-dp/xiao-guo-wang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-26 15:23:35 * @LastEditTime: 2022-05-05 16:39:22 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1066/    1064. 小国王    题目描述        在 n×n 的棋盘上放 k 个国王，国王可攻击相邻的 8 个格子，求使它们无法互相攻击的方案总数。    Tag:        1.dp        2.状态压缩DP    思路：       f[i][j][k]:已经摆了前i行，目前摆了j个国王，且第i行的状态为k              这里可以用到一个技巧       原本需要枚举所有第i行所有状态的和才是答案       但是我们这里枚举到第i+1行       那么f[n+1][m][0]就是答案         */</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">,</span>K<span class="token operator">=</span>N<span class="token operator">*</span>N<span class="token punctuation">;</span><span class="token comment">// f[i][j][k]:已经摆了前i行，目前摆了j个国王，且第i行的状态为k</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>state<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">cnt</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> head<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//判断状态是否合法</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">&gt;&gt;</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>state<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断1的个数</span><span class="token keyword">int</span> <span class="token function">allCount</span> <span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span>state<span class="token operator">&gt;&gt;</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//判断两个状态是否冲突</span><span class="token keyword">bool</span> <span class="token function">inval</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>state<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>a<span class="token operator">|</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            state<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">allCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">inval</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>state<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> aa<span class="token operator">=</span>state<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> bb<span class="token operator">=</span>state<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> c <span class="token operator">=</span>cnt<span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>aa<span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>bb<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态压缩dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot2</title>
      <link href="/2022/04/28/java-pian/springboot2/"/>
      <url>/2022/04/28/java-pian/springboot2/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="版本介绍"><a href="#版本介绍" class="headerlink" title="版本介绍"></a>版本介绍</h3><p><img src="/2022/04/28/java-pian/springboot2/image-20220428174902443.png" alt="image-20220428174902443"></p><p><strong>结论：版本格式 -&gt; 主版本号.子版本号.修正版本号。</strong></p><p>版本迭代</p><blockquote><p>主版本号：当你做了不兼容的 API 修改或者进行了大调整；<br>子版本号：当你做了向下兼容的功能性新增；<br>修订号：当你做了向下兼容的问题修正；</p></blockquote><p>版本描述</p><blockquote><p>snapshot 快照<br>alpha 内测<br>beta 公测<br>release 稳定版本<br>GA 最稳定版本<br>Final 正式版<br>Pro(professional) 专业版<br>Plus 加强版<br>Retail 零售版<br>DEMO 演示版<br>Build 内部标号<br>Delux 豪华版 （deluxe：豪华的，华丽的）<br>Corporation或Enterpraise 企业版<br>M1 M2 M3 M是milestone的简写 里程碑的意思<br>RC 版本RC:(Release Candidate)，几乎就不会加入新的功能了，而主要着重于除错<br>SR 修正版<br>Trial 试用版<br>Shareware 共享版<br>Full 完全版</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>groupId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>SpringBootStu01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    申明了父项目的版本号    子项目的版本依赖于父项目。    1.申明了父项目的版本，子项目可以不用申明版本，可以在父项目里面找到对应的子项目支持的版本    2.也可以申明版本，覆盖父项目指明的版本--&gt;</span>        <span class="token comment">&lt;!--    申明父版本--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--类热部署--&gt;</span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整合数据库"><a href="#整合数据库" class="headerlink" title="整合数据库"></a>整合数据库</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>jdbc<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>jdbc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mysql驱动<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="RequestMapping与-GetMapping区别"><a href="#RequestMapping与-GetMapping区别" class="headerlink" title="@RequestMapping与@GetMapping区别"></a>@RequestMapping与@GetMapping区别</h3><p>请求方式注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token annotation punctuation">@PostMapping</span><span class="token annotation punctuation">@PutMapping</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token annotation punctuation">@PatchMapping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的几个注解都是包含@RequestMapping的组合注解，简化了原来的使用方法。<br>下面这两个是等价的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/get"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="便利性注解"><a href="#便利性注解" class="headerlink" title="便利性注解"></a>便利性注解</h3><p><strong>当然这个注解的实现还没有去弄明白，带来的时间和空间效率如何未知</strong></p><ul><li><p>idea安装<a href="https://so.csdn.net/so/search?q=lombok&amp;spm=1001.2101.3001.7020">lombok</a>插件</p></li><li><p>添加maven依赖</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">1.16</span><span class="token number">.10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">//注解在类上, 为类提供读写属性, 此外还提供了 equals()、hashCode()、toString() 方法</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些方便的注解</p><ul><li>@Data : 注解在类上, 为类提供读写属性, 此外还提供了 equals()、hashCode()、toString() 方法</li><li>@Getter/@Setter : 注解在类上, 为类提供读写属性</li><li>@ToString : 注解在类上, 为类提供 toString() 方法</li><li>@Slf4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象</li><li>@Log4j : 注解在类上, 为类提供一个属性名为 log 的 log4j 的日志对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue学习</title>
      <link href="/2022/04/28/web/vue/"/>
      <url>/2022/04/28/web/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue基本语法"><a href="#Vue基本语法" class="headerlink" title="Vue基本语法"></a>Vue基本语法</h2><blockquote><p>试试面向官网来学习vue，提高下自己的看文档自学的能力，不要老是看视频</p></blockquote><p><a href="https://cn.vuejs.org/v2/guide/instance.html">官方文档</a></p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><p><code>beforeCreate</code>:</p></li><li><p><code>created</code>:</p></li><li><p><code>beforeMount</code>:</p></li><li><p><code>mounted</code>:</p></li><li><p><code>beforeUpdata</code>:</p></li><li><p><code>updated</code>:</p></li><li><p><code>beforeDestroy</code>:</p></li><li><p><code>destroyed</code>:</p></li></ul><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li><code>{{}}</code>：显示对应data的内容</li><li><code>v-once</code>:一次性插值，当数据改变时，插值处的内容不会更新</li><li><code>v-html</code>:<code>{{}}</code>会将data的内容解释为普通文本，而非html代码，如果data内容为html命令，可以通过这个命令将其输出为html</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{t1}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{t2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using mustaches: {{ rawHtml }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Using v-html directive: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rawHtml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>输出Using mustaches:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This should be red.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>Using v-html directive:This should be black.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绑定元素属性"><a href="#绑定元素属性" class="headerlink" title="绑定元素属性"></a>绑定元素属性</h3><ul><li><p><code>v-bind</code>:绑定对应的vue对象里面data的key</p></li><li><p><code> v-model</code>:双向绑定</p></li><li><p><code>.trim</code>：去除掉前后空格，失去焦点后会自动去掉空格</p></li><li><p>动态参数：&lt;a v-bind:[attributeName]=”url”&gt;</p></li></ul><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>缩写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 完整语法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 缩写 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:[key]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token comment">// 创建Vue对象，挂载#app这个div标签</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"el"</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token string-property property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span>               <span class="token string-property property">"vueValue"</span><span class="token operator">:</span><span class="token string">"太阳当空照"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- v-bind: 效果是从Vue对象渲染到页面--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vueValue<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{vueValue}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token comment">// 创建Vue对象，挂载#app这个div标签</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"el"</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token string-property property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span>               <span class="token string-property property">"vueValue"</span><span class="token operator">:</span><span class="token string">"太阳当空照"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- v-model:属性名 效果不仅是从Vue对象渲染到页面，而且能够在页面上数据修改后反向修改Vue对象中的数据属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vueValue<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{vueValue}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><code>v-if</code>：true添加元素和删除元素实现元素显示</p><p><code>v-else</code>：</p><p><code>v-show</code>：通过display属性实现元素显示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//根据seen的真假来操作元素</span><span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"seen"</span><span class="token operator">&gt;</span>现在你看到我了<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><code>v-for</code>：迭代</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> vue <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">List</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token literal-property property">fname</span><span class="token operator">:</span><span class="token string">"苹果"</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token literal-property property">fname</span><span class="token operator">:</span><span class="token string">"香蕉"</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token literal-property property">fname</span><span class="token operator">:</span><span class="token string">"香瓜"</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x in List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{x.fname}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>{{x.price}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p><code>v-on</code>：对应的vue对象里面的函数名</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"el"</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token string-property property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"message"</span><span class="token operator">:</span><span class="token string">"Hello Vue!"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">"methods"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"reverseMessage"</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- v-on:事件类型="事件响应函数的函数名" --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reverseMessage<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Click me,reverse message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>读取事件内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showInfo1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>点我显示信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"xiaobaicai"</span><span class="token punctuation">,</span>            <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">"scool"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function">showInfo1</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//target:显示event的html代码</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//显示内容</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//当前的vue对象：但是注意不要使用箭头函数</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件传参数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// $event:占位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showInfo1($event,66)<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>点我显示信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"xiaobaicai"</span><span class="token punctuation">,</span>            <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">"scool"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">//接受参数</span>            <span class="token function">showInfo1</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span>number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>缩写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 完整语法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 缩写 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">@[event]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doSomething<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Data-和-method"><a href="#Data-和-method" class="headerlink" title="Data 和 method"></a>Data 和 method</h3><h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><ul><li>Vue 自动为 <code>methods</code> 绑定 <code>this</code>，以便于它始终指向组件实例。这将确保方法在用作事件监听或回调时保持正确的 <code>this</code> 指向。</li><li>在定义 <code>methods</code> 时应避免使用箭头函数，因为这会阻止 Vue 绑定恰当的 <code>this</code> 指向。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">const app = Vue.createApp({  data() {    return { count: 4 }  },  methods: {    increment() {      // `this` 指向该组件实例      this.count++    }  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><p>?没了解过</p><p>Vue 没有内置支持防抖和节流，但可以使用 <a href="https://lodash.com/">Lodash</a> 等库来实现。</p><p>在<code>method</code>中应用防抖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 用 Lodash 的防抖函数</span>      <span class="token literal-property property">click</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ... 响应点击 ...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意事项</p></blockquote><p>这种方法对于可复用组件有潜在的问题，因为它们都共享相同的防抖函数。为了使组件实例彼此独立，可以在生命周期钩子的 <code>created</code> 里添加该防抖函数:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">app.component('save-button', {  created() {    // 使用 Lodash 实现防抖    this.debouncedClick = _.debounce(this.click, 500)  },  unmounted() {    // 移除组件时，取消定时器    this.debouncedClick.cancel()  },  methods: {    click() {      // ... 响应点击 ...    }  },  template: `    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debouncedClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      Save    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  `})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://v3.cn.vuejs.org/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7">下一次从这开始看起</a></p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>构造数组</title>
      <link href="/2022/04/26/summary/acwing/zhou-sai/20220423-48week/gou-zao-shu-zu/"/>
      <url>/2022/04/26/summary/acwing/zhou-sai/20220423-48week/gou-zao-shu-zu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-23 19:12:34 * @LastEditTime: 2022-04-26 22:51:10 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/4415/    题目描述    给出一个数组a，求出满足下列条件的数组b的个数对 998244353 取模后的结果。        1.对于a中相同值的两个索引的值必须相同，如果a[i]=a[j]，必然有b[i]=b[j].        2.其他要么 b[i]=b[i+1],要么b[i]+1=b[i+1]    Tag：        1.思维题        2.区间合并    思路：        1.对于一个两个相同值之间的区间必须为同一个值        2.除了第一个区间，其他区间都可以任取两个值        问题就相当于求 没有交集的区间个数        所以可以求每个相同值之间的最大区间，然后求出每个没有交集的区间个数        每个区间可以提供两个贡献分别为b[i]=b[i-1]和b[i]=b[i-1]+1（除第一个区间，因为第一个区间只能为0），那么就可以用乘法原理计算*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span> <span class="token number">998244353</span> <span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span>PII <span class="token operator">&gt;</span> mp<span class="token punctuation">;</span>    mp<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token punctuation">.</span><span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">=</span>i<span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>k<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>r<span class="token operator">=</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            l<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            r<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>              r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 区间合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三仙归洞</title>
      <link href="/2022/04/26/summary/acwing/zhou-sai/20220423-48week/san-xian-gui-dong/"/>
      <url>/2022/04/26/summary/acwing/zhou-sai/20220423-48week/san-xian-gui-dong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-23 19:01:31 * @LastEditTime: 2022-04-23 19:11:31 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/4414/题目描述：Tag：思路：每六次一循环，模6之后逆着枚举就可以了*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>    n<span class="token operator">%=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RLE</title>
      <link href="/2022/04/26/summary/atcoder/20220423-abc249/e-rle/"/>
      <url>/2022/04/26/summary/atcoder/20220423-abc249/e-rle/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-25 19:09:23 * @LastEditTime: 2022-04-26 14:30:05 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    题目描述    Tag：        1.dp        2.前缀和优化    思路：        感觉还是前缀和优化没有很理解，到时候在看～～～                 可能也不太对写的。        g[i][j]: 维护i的前缀和        区间长度            [i-9,i-1]   --1            [i-99,i-10] --2            [i-999,i-100]   --3            [i-9999,i-1000]  --4        对应solve2的暴力算法，有一层循环是用来枚举左端点，然后判断左端点和i 之间的长度可以被压缩的长度        可以看到这些左端点是连续的，可以用前缀和优化        对应可以被压缩的长度可以发现只有四种区间，也就是上述的四种        所以对于这一层循环就可以直接用上述区间的区间和来得到        对于长度为 len 的 x 和 y 点 的方案数就是 g[len][y] - g[len][y-1];*/</span><span class="token comment">//f[i][j]:</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">10010</span><span class="token punctuation">;</span>ll  f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 前i个字母中，操作后的长度为j的方案数</span>ll  g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// g[j][i]=f[1][j]+f[2][j]···f[i][j]</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前缀和优化    //维护不同长度的连续点的和</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> t <span class="token operator">=</span>j<span class="token operator">-</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">26</span><span class="token operator">*</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token comment">//[i-9,i-1]</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>q<span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//[i-99,i-10]</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//[i-999,i-100]</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//[i-9999,i-1000]</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%=</span>q<span class="token punctuation">;</span>            g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">%</span>q<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>len  <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>len <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">int</span> tx <span class="token operator">=</span> i<span class="token operator">-</span>len<span class="token punctuation">;</span>                <span class="token keyword">int</span> tlen <span class="token operator">=</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token operator">-</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tlen <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                 f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>tlen<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>tx<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unequal Array</title>
      <link href="/2022/04/24/summary/codeforces/20220423-gl20/c-unequal-array/"/>
      <url>/2022/04/24/summary/codeforces/20220423-gl20/c-unequal-array/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-24 22:35:40 * @LastEditTime: 2022-04-24 22:49:41 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1672/problem/C    Unequal Array    题目描述        相等性定义为 a[i]=a[i+1]        可以进行的操作为令任意的i，使得a[i]=a[i+1]        求最少的操作数量使得数组的相等性小于等于1    Tag：        1.思维题    思路：        存在多个分段的a[i]=a[i-1],那么必然会要往中间靠拢        所以只需要最小的i有a[i]=a[i-1],记为minv        和最大的i有a[i]=a[i-1],记为maxv        那么在maxv和minv之间的存在的i有a[i]=a[i-1]就不需要理会        因为在处理maxv和minv的过程中就会把他们处理了        处理过程价值为 maxv - minv - 1*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minv<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>maxv<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>minv<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minv<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                maxv<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minv<span class="token operator">==</span>maxv<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>maxv<span class="token operator">-</span>minv <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I Love AAAB</title>
      <link href="/2022/04/24/summary/codeforces/20220423-gl20/b-i-love-aaab/"/>
      <url>/2022/04/24/summary/codeforces/20220423-gl20/b-i-love-aaab/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-23 22:16:08 * @LastEditTime: 2022-04-24 22:31:44 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1672/problem/B    I love AAAB    题目描述        对于目标串，能否通过插入*AB 来得到    Tag：        1.思维    思路：        满足两个条件        1.目标串尾部为B        2.每一个B之前的A的数量要大于等于B的数量*/</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> sum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ok <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Index Trio</title>
      <link href="/2022/04/24/summary/atcoder/20220423-abc249/d-index-trio.cpp/"/>
      <url>/2022/04/24/summary/atcoder/20220423-abc249/d-index-trio.cpp/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-23 21:06:00 * @LastEditTime: 2022-04-24 18:37:48 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://atcoder.jp/contests/abc249/tasks/abc249_dIndex Trio     题目描述        任意i，j，k满足a[i]/a[j]==a[k];        多少个满足条件    Tag：        1.思维题    思路：        暴力枚举第一个数和第二个数       */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>ll<span class="token operator">&gt;</span>mp<span class="token punctuation">;</span>    ll x<span class="token punctuation">;</span>    ll MAXV<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        MAXV<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>MAXV<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>MAXV<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//第一位数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token punctuation">(</span>MAXV<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//第二位数</span>                ans<span class="token operator">=</span>ans<span class="token operator">+</span><span class="token number">1LL</span><span class="token operator">*</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>mp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>mp<span class="token punctuation">[</span>j<span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/24/templates/atcoder/"/>
      <url>/2022/04/24/templates/atcoder/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> atcoder </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区间和</title>
      <link href="/2022/04/24/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/qu-jian-he/"/>
      <url>/2022/04/24/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/qu-jian-he/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-24 16:58:20 * @LastEditTime: 2022-04-24 17:48:23 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://ac.nowcoder.com/acm/contest/967/A    区间和    题目描述        给定数列a[1],a[2], \dots,a[n]a[1],a[2],…,a[n]，你需要依次进行q个操作，操作有两类：        1 i x：给定i,x，将a[i]加上x；        2 l r：给定l,r，求sum[l,l]    Tag：        1.线段树        2.树状数组    思路：        线段树模版题        线段树维护一段区间的和        实现基本的pushup，build，modify，query*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1000100</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    ll v<span class="token punctuation">;</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> in<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>in <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">==</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">+=</span>v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>in <span class="token operator">&lt;=</span>mid <span class="token punctuation">)</span><span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>in<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token function">modify</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>in<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        ll  sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid <span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span><span class="token function">query</span><span class="token punctuation">(</span>u<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span>m<span class="token punctuation">;</span>       cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>opt<span class="token operator">&gt;&gt;</span>l<span class="token operator">&gt;&gt;</span>r<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nowcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1052. 设计密码</title>
      <link href="/2022/04/23/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/she-ji-mi-ma/"/>
      <url>/2022/04/23/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/she-ji-mi-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-22 20:29:06 * @LastEditTime: 2022-04-23 18:00:36 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1054/    1052. 设计密码    题目描述        设计一个密码S 需要满足条件如下            S 的长度是 N；            S  只包含小写英文字母            S  不包含子串 T        请问共有多少种不同的密码满足要求？        由于答案会非常大，请输出答案模 10^9+7 的余数    Tag：        1.状态机        2.KMP        3.dp    思路：        f[i][j] : 当前匹配了 i 个字符，对应T位置为j的状态           因为kmp下一步会跳到的位置由第 i+1 个字符决定        所以先用kmp来判定第i+1 个字符(枚举)的值的时候，会跳到什么位置，例如为位置u        只要kmp跳到的位置不是len(T)，那么就必然不是子串。        if(u&lt;len(T))            f[i+1][u]=(f[i+1][u]+f[i][j])*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">=</span>ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//对于一个字符串没有匹配完模式串 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//当前已经匹配了1～i个字符</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment">//当前已匹配到模式串的j位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> k<span class="token operator">=</span><span class="token char">'a'</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token char">'z'</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//枚举 第i+1位置的字符</span>                <span class="token comment">// 对于第 i+1 位置的字符为 k 时 j 会移动到的位置 -&gt; u</span>                <span class="token keyword">int</span> u <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">&amp;&amp;</span> k <span class="token operator">!=</span>s<span class="token punctuation">[</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> u<span class="token operator">=</span>ne<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> s<span class="token punctuation">[</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> u<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">&lt;</span>m<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> KMP </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1058. 股票买卖 V</title>
      <link href="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-v/"/>
      <url>/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-v/</url>
      
        <content type="html"><![CDATA[<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-v/image-20220419202731960.png" alt="image-20220419202731960"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 20:19:36 * @LastEditTime: 2022-04-19 20:24:23 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1060/    1058. 股票买卖 V    题目描述    Tag：        1.dp        2.状态机    思路：        f[i][j]:表示前i个物品中状态为j的最大价值        手中有物品      手中没有物品（第一天）      手中没有物品（&gt;=2天）           0                1                       2        f[i][0]=max(f[i-1][0],f[i-1][2]-w[i])        f[i][1]=f[i-1][0]+w[i];        f[i][2]=max(f[i-1][2],f[i-1][1]); */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">w</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//入口初始化为0就可以</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为只有一个状态转入，但是需要和自身做比较，所以需要初始化为负无穷大</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1057. 股票买卖 IV</title>
      <link href="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-iv/"/>
      <url>/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-iv/</url>
      
        <content type="html"><![CDATA[<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/gu-piao-mai-mai-iv/image-20220419201235590.png" alt="image-20220419201235590"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 19:56:54 * @LastEditTime: 2022-04-19 20:11:09 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1059/    1057. 股票买卖 IV    题目描述        自己去看    Tag：        1.dp        2.状态机    思路：     f[i][j][k]:表示选取前i个物品中，完成j次交易的，状态为k的最大价值        手中有物品      手中无物品            1             0                    f[i][j][0]=max(f[i-1][j][0],f[i-1][j][1]+v[i]);        f[i][j][1]=max(f[i-1][j-1][0]-v[i],f[i-1][j][1]); */</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>      vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">v</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">int</span> maxv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maxv<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>maxv<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1049. 大盗阿福</title>
      <link href="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/da-dao-a-fu/"/>
      <url>/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/da-dao-a-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/zhuang-tai-ji-mo-xing/da-dao-a-fu/../%E5%A4%A7%E7%9B%97%E9%98%BF%E7%A6%8F/image-20220419195305643.png" alt="image-20220419195305643"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 19:31:12 * @LastEditTime: 2022-04-19 19:46:06 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/1051/    1049. 大盗阿福    题目描述        自己去看好吧    Tag：        1.dp        2.状态机    思路：          状态机            f[i][j]:表示前i个物品状态为j的最大价值，j为1：洗劫当前物品，j为0:不洗劫当前物品            洗劫 和 不洗劫            1       0            f[i][0]=max(f[i-1][0],f[i-1][1]);            f[i][1]=f[i-1][0]+w[i];*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有依赖的背包问题</title>
      <link href="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/you-yi-lai-de-bei-bao-wen-ti/"/>
      <url>/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/you-yi-lai-de-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 15:47:42 * @LastEditTime: 2022-04-19 16:30:23 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    10. 有依赖的背包问题    https://www.acwing.com/problem/content/10/    题目描述            有 N 个物品和一个容量是 V 的背包。        物品之间具有依赖关系，且依赖关系组成一棵树的形状。如果选择一个物品，则必须选择它的父节点。    Tag：        1.dp        2.树形dp    思路：        f[i][j]:以i为根节点的，容量为j的最大价值        选择以i为根节点的子树里面的物品的时候，为 i 根节点预留位置        选择所有子树的最大价值后再把当前跟节点的价值加进去*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">;</span><span class="token punctuation">}</span>cas<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token operator">=</span>cas<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token operator">=</span>cas<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> son<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>m<span class="token operator">-</span>v<span class="token punctuation">;</span>k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 循环根节点全部体积</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//循环子树的体积</span>                f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">+</span>f<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>v<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> root<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>root<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能量石</title>
      <link href="/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/neng-liang-shi/"/>
      <url>/2022/04/19/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/neng-liang-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 15:38:09 * @LastEditTime: 2022-04-19 15:42:34 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/description/736/734. 能量石    题目描述        吃完第 i 块能量石需要花费的时间为 Si 秒。        第 i 块能量石最初包含 Ei 单位的能量，并且每秒将失去 Li 单位的能量。        求获得最大能量    Tag：        1.dp    思路：        对于任意两个能量石有，s[i],e[i],l[i];s[j],e[j],l[j]        如果吃完 i 能量石，吃 j 能量石             价值为：e[i]+e[j]-(s[i]*l[j])        如果吃完 j 能量石，吃 i 能量石            价值为：e[j]+e[i]-(s[j]*l[i])        两个式子抵消后可以得到            价值越大取决于 s[i]*l[j] 和 s[j]*l[i] 更小        所以可以按照这个来进行排序        然后跑一边01背包*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">50000</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span>e<span class="token punctuation">,</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span>cas<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>s<span class="token operator">*</span>b<span class="token punctuation">.</span>l <span class="token operator">&lt;</span>  b<span class="token punctuation">.</span>s <span class="token operator">*</span> a<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>T<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token operator">&gt;&gt;</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token operator">&gt;&gt;</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>            total<span class="token operator">+=</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>cas<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cas<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> s<span class="token operator">=</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span>e<span class="token operator">=</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span>l<span class="token operator">=</span>cas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>total<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>s<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>s<span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token operator">-</span><span class="token punctuation">(</span>j<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>total<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        maxv<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case #"</span><span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token operator">&lt;&lt;</span>maxv<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题求方案数</title>
      <link href="/2022/04/11/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/bei-bao-wen-ti-qiu-fang-an-shu/"/>
      <url>/2022/04/11/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/bei-bao-wen-ti-qiu-fang-an-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-01 23:30:05 * @LastEditTime: 2022-04-01 23:48:45 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    题目描述：    求出最大价值的方案数量    Tag：        1.dp        2.01背包       3.dp求出具体方案    思路：        dp[i]：容量为i的最大价值        cnt[i]:容量为i的最大价值的方案数       */</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N <span class="token operator">&gt;&gt;</span> V<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">dp</span><span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">cnt</span><span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cnt[i]：容量为i的最大价值对应的最大方案数，因为全部不选也是一种方案所以全部初始化为1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 如果存在价值更大，说明当前容量并不是最优选法</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span><span class="token comment">//cnt[j] = cnt[j-v[i]]而不是+=</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>cnt<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>cnt<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器分配</title>
      <link href="/2022/04/11/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/ji-qi-fen-pei/"/>
      <url>/2022/04/11/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/ji-qi-fen-pei/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-11 12:17:16 * @LastEditTime: 2022-04-11 14:33:23 */</span><span class="token comment">/* */</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">var</span> f<span class="token punctuation">,</span> a <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token comment">/*1013. 机器分配https://www.acwing.com/problem/content/1015/题目描述每个公司获得机器的数量有对应的收益求在给出的机器数量怎么分配求收益最大Tag：1.dp2.dp求具体方案思路：倒着来一遍dp ,f[i][j]：表示当前位置i之后的（n-i）个公司分配j个机器的最大盈利然后从前往后找解，这样找出的解也就是一条最段路必然是最小字典序*/</span><span class="token comment">//f[i][j]:前i个公司分配j个机器的最大盈利</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token punctuation">,</span> m <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//倒着来一个dp</span><span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment">//当前可以选择的个数</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment">//当前要选择的个数</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//从前往后找最短路</span>maxv <span class="token operator">:=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>maxv<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> m <span class="token operator">&gt;=</span> j <span class="token operator">&amp;&amp;</span> maxv <span class="token operator">==</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>maxv <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span>j<span class="token punctuation">]</span>m <span class="token operator">-=</span> j<span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1990 覆盖墙壁</title>
      <link href="/2022/04/10/summary/qi-ta-ping-tai/p-1990-fu-gai-qiang-bi/"/>
      <url>/2022/04/10/summary/qi-ta-ping-tai/p-1990-fu-gai-qiang-bi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-10 17:13:42 * @LastEditTime: 2022-04-10 17:33:42 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.luogu.com.cn/problem/P1990    P1990 覆盖墙壁    题目描述        你有一个长为N宽为2的墙壁，给你两种砖头：一个长2宽1，另一个是L型覆盖3个单元的砖头    Tag：        1.dp        2.递推    思路：        f[i]:表示 i 列已经全部铺满的方案数        g[i]:表示 i 列已经全部铺满,但i+1列有一个格子被铺的方案数        总共有 N 列        枚举最后一次操作的方案之和        1.最后一次操作为 竖着的I 能够铺满的方案数            方案数为 F[N-1]            f[N-1]即 N-1列已经铺满的方案数        2.最后一次操作为 两个横着的I 能够铺满的方案数            方案数为 F[N-2]            f[N-2]即 N-2列已经铺满的方案数        3.最后一次操作为 L 能够铺满的方案数            方案数为 G[N-2]            前一次操作为 I 的方案数为 ：G[N-3]             前一次操作为 倒L 的方案数为 ： f[N-3]            所以方案数就是：G[N-2]=G[N-3]+f[N-3] 求出G[n-2]        4.最后一次操作为 倒L 能够铺满的方案数            方案数为 G[N-2]            前一次操作为 I 的方案数为：G[N-3]            前一次操作为 反L 的方案数为：f[N-3]            所以方案数就是 G[N-2]=G[N-3]+f[N-3]            因为3，4操作是对称的所以只需要考虑其中一种*2就行        f[N]=f[N-1]+f[N-2]+G[N-2]+G[N-2]        G[N]=G[N-1]+f[N-1]*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>     <span class="token comment">//f[i]=f[i-1]+f[i-2]+2*g[i-2];</span>    <span class="token comment">//g[i]=g[i-1]+f[i-1]</span>        vector<span class="token operator">&lt;</span>ll <span class="token operator">&gt;</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1列铺满的方案数 就是 竖着的I 一种</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 0列铺满的方案数 就是 1</span>    g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// g[1]=g[0]+f[0]=1 从定义理解其实就是 g[1]=f[1]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span> MOD<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言</title>
      <link href="/2022/04/08/ji-suan-ji-yu-yan-lei/go-main/go/"/>
      <url>/2022/04/08/ji-suan-ji-yu-yan-lei/go-main/go/</url>
      
        <content type="html"><![CDATA[<h2 id="go学习路线"><a href="#go学习路线" class="headerlink" title="go学习路线"></a>go学习路线</h2><p><a href="https://bytedance.feishu.cn/docs/doccnwEB1HWiO6KR2nsgxOaQ2ud">路线</a></p><h2 id="MODULE管理"><a href="#MODULE管理" class="headerlink" title="MODULE管理"></a>MODULE管理</h2><p>包含go.mod文件的目录也被称为模块根，也就是说，go.mod 文件的出现定义了它所在的目录为一个模块。</p><p><strong>go.sum 是记录所依赖的项目的版本的锁定。</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> mod init 项目名<span class="token comment">//</span><span class="token comment">//导入的库会在go.sum中</span><span class="token comment">//自动拉去需要的库到go.sum    </span><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>sirupsen<span class="token operator">/</span>logrus<span class="token comment">//这里的-u作用是如果本地已有相关版本则比对本地版本,如果版本不是最新的则下载最新版本到本地使用,如果没有-u的话并且本地已有吃包了就会直接使用本地的包。</span><span class="token comment">//go 审计工具</span>gosec<span class="token punctuation">:</span> github<span class="token punctuation">.</span>com<span class="token operator">/</span>securego<span class="token operator">/</span>gosec <span class="token comment">//go 日志</span>logrus<span class="token punctuation">:</span> github<span class="token punctuation">.</span>com<span class="token operator">/</span>sirupsen<span class="token operator">/</span>logrus<span class="token comment">//@版本号  ，新版安装库需要有版本号</span><span class="token keyword">go</span> install github<span class="token punctuation">.</span>com<span class="token operator">/</span>securego<span class="token operator">/</span>gosec<span class="token operator">/</span>v2<span class="token operator">/</span>cmd<span class="token operator">/</span>gosec@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="牛顿法实现平方根函数"><a href="#牛顿法实现平方根函数" class="headerlink" title="牛顿法实现平方根函数"></a>牛顿法实现平方根函数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span>    <span class="token string">"math"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>    z <span class="token operator">:=</span> x<span class="token operator">/</span><span class="token number">2</span>    i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> math<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>z<span class="token operator">*</span>z<span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1e-5</span><span class="token punctuation">{</span>        z<span class="token operator">-=</span><span class="token punctuation">(</span>z<span class="token operator">*</span>z<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>z<span class="token punctuation">)</span>        i<span class="token operator">++</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"spendTime=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> z<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1.0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"i=%f,sqrt(i)=%f\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>混合背包问题</title>
      <link href="/2022/04/06/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/hun-he-bei-bao-wen-ti/"/>
      <url>/2022/04/06/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/hun-he-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-06 21:35:49 * @LastEditTime: 2022-04-06 21:51:34 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    混合背包问题    https://www.acwing.com/problem/content/7/    题目描述    Tag：        1.dp    思路：        对于当前第i件物品的价值最大值，就直接可以取当前规则的第i件物品的价值最大值        因为时间复杂度，多重背包采用二进制分组        同时01背包是特殊的多重背包        所以可以直接让s=1即就是01背包问题*/</span><span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>s<span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">f</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v <span class="token operator">&gt;&gt;</span> w <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span>k<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>k<span class="token operator">*</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>v<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                s<span class="token operator">-=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>s<span class="token operator">*</span>v<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>s<span class="token operator">*</span>v<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 01背包 </tag>
            
            <tag> 多重背包 </tag>
            
            <tag> 完全背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>货币系统</title>
      <link href="/2022/04/06/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/huo-bi-xi-tong/"/>
      <url>/2022/04/06/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/huo-bi-xi-tong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/534/    532. 货币系统    题目描述:        找到与货币系统(n,a)等价的货币系统（m,b)尽可能让m小    Tag：        1.dp        2.数学    思路描述        1.b中任意一个bi一定不能被其他bi表示出来，那么说明当前bi可以被删除        2.a中任意一个ai一定不能被其他ai表示出来，如果可以那么说明当前ai可以          被删除      **3.b中的bi一直是a中的ai            证：假设bi！=ai                说明对于价值bi 在a中可以由任意个ai组成                例如 b3 = a1 + 2 a2 + 3 a3                那么对于价值ai 在b中也可以由任意个bi组成                例如 a1 = b2 + b3                     a2 = b1 + b2                    a3 = b3 + b1                那么这样就会变成                    b3 = b2 + b3 + 2(b1 + b2) + 3(b3 + b1)                说明当前b3可以被其他bi表示出来，说明当前bi可以被其他bi表示出来        根据上述三个性质            b数组一定是从a数组中选择出来的            所以可以对a数组进行一次完全背包，如果a数组中            当前ai可以被其他ai表示出来，那就可以不选，反之b数组中一定有这个ai，            必须要选这个ai*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">25100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">st</span><span class="token punctuation">(</span><span class="token number">25100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  m <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//不可以被表示</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">|=</span>st<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/03/ji-suan-ji-ji-chu-lei/mit6828/"/>
      <url>/2022/04/03/ji-suan-ji-ji-chu-lei/mit6828/</url>
      
        <content type="html"><![CDATA[<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://pdos.csail.mit.edu/6.828/2018/schedule.html">官方</a></li><li><a href="https://www.cnblogs.com/JayL-zxl/p/14906344.html">博客1</a></li><li><a href="http://arttnba3.cn/2022/02/21/NOTE-0X09-MIT_6_828/">博客2</a></li><li><a href="https://github.com/woai3c/MIT6.828">别人做的放到github 的实验</a></li><li><a href="https://www.cnblogs.com/xnzone/p/15625849.html">博客3</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>187. 导弹防御系统</title>
      <link href="/2022/04/03/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/dao-dan-fang-yu-xi-tong/"/>
      <url>/2022/04/03/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/dao-dan-fang-yu-xi-tong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-03 16:01:45 * @LastEditTime: 2022-04-03 16:35:17 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/189/    187. 导弹防御系统    题目描述        一套防御系统的导弹拦截高度要么一直 严格单调 上升要么一直 严格单调 下降。    Tag：        1.最长上升子序列        2.dp        3.贪心    思路：        1.维护最长严格上升子序列和最长严格下降子序列          up[],down[]，数组的每一位表示的是一个子序列的末尾        2.对于一个导弹要么是属于上升，要么属于下降。            对于上升子序列，找到大于x的最小的子序列，将x插入到该子序列末尾            对于下降子序列，找到小于x的最大的子序列，将x插入到该子序列末尾        3.对于插入这个操作，因为一开始就是按照这样贪心的插入，所以只需要遍历每一个子序列的末尾判断插入即可。*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> up<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 只记录每个严格上升子序列的末尾</span><span class="token keyword">int</span> down<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 只记录每个严格下降子序列的末尾</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> us<span class="token punctuation">,</span><span class="token keyword">int</span> ds<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>us <span class="token operator">+</span> ds <span class="token operator">&gt;=</span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> n<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span> us <span class="token operator">+</span> ds<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//贪心的插入，每次找小于 x 最小的子序列末尾插入</span>    <span class="token comment">//严格上升子序列，     </span>    <span class="token keyword">int</span> k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> k <span class="token operator">&lt;</span> us <span class="token operator">&amp;&amp;</span> up<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>             k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span>up<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    up<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> us<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>us<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>us<span class="token punctuation">,</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    up<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">// k要是局部变量，应为还要回溯到当前的k进行复原</span>    <span class="token comment">//找到小于x的最大的子序列末尾插入</span>    <span class="token comment">//严格下降子序列</span>    k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> k <span class="token operator">&lt;</span> ds <span class="token operator">&amp;&amp;</span> down<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>             k<span class="token operator">++</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> down<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    down<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> ds<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>us<span class="token punctuation">,</span>ds<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>us<span class="token punctuation">,</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    down<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题求具体方案</title>
      <link href="/2022/04/03/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/bei-bao-wen-ti-qiu-ju-ti-fang-an/"/>
      <url>/2022/04/03/summary/acwing/suan-fa-ti-gao/dong-tai-gui-hua/bei-bao-mo-xing/bei-bao-wen-ti-qiu-ju-ti-fang-an/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-03 15:36:08 * @LastEditTime: 2022-04-03 15:52:45 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    题目描述        有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。        第 i 件物品的体积是 vi，价值是 wi。        求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。        输出 字典序最小的方案。这里的字典序是指：所选物品的编号所构成的序列。       Tag：        1.dp        2.背包    思路：        要求字典序最小，        所以应该尽可能的选择前面        对于dp我们就可以倒着来走一遍，即dp[1][V]为最大价值        如果存在 dp[i][p] = dp[i+1][p-v[i]] 那么说明当前的i点是被选择的        当然这里还有有个判断即 p&gt;v[i];*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> N <span class="token operator">&gt;&gt;</span> V<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">v</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token function">dp</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>N<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> V<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> p<span class="token operator">=</span>V<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">==</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            p<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师</title>
      <link href="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/"/>
      <url>/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机组成原理-9"><a href="#计算机组成原理-9" class="headerlink" title="计算机组成原理-9"></a>计算机组成原理-9</h2><h3 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h3><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><h2 id="操作系统-6"><a href="#操作系统-6" class="headerlink" title="操作系统-6"></a>操作系统-6</h2><h3 id="操作系统分类"><a href="#操作系统分类" class="headerlink" title="操作系统分类"></a>操作系统分类</h3><table><thead><tr><th align="center">分类</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="线程和线程"><a href="#线程和线程" class="headerlink" title="线程和线程"></a>线程和线程</h3><p>进程是系统调度的基本单位，一个进程里面有多个线程</p><p>进程具有两个基本属性</p><ul><li>拥有资源的独立单位</li><li>可以独立调度和分配资源的基本单位</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是系统调度的基本单位，由系统进行资源分配和调度的一个独立单元</p><h3 id="页式存储"><a href="#页式存储" class="headerlink" title="页式存储"></a>页式存储</h3><table><thead><tr><th align="center">页号</th><th align="center">页帧号</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">5</td></tr></tbody></table><p>逻辑地址=页号+页内地址</p><p>物理地址=页帧号+页内地址</p><p>页内地址在映射的过程中相对位置不会改变，所以只需要映射对应的页号对应的页帧号</p><hr><p>如果我们知道一个页的大小为4kb，如果没有指明存储大小，那么就是1字节存储</p><p>那么就需要4k个存储单元，也就是2^12个存储单元</p><p>也就是说需要使用12根地址线来进行选址</p><p>如果给出一个逻辑地址为10 <em>1100 1101 1110</em></p><p>那么低12位就是他的页内地址 <em>1100 1101 1110</em></p><p>剩下的高位就是他的页号 10 （2），</p><p><strong>注意页表里面的页号是十进制</strong>，所以得到页号要转换成十进制找到对应的页帧号</p><p>这里得到的页号为 2</p><p>也就是对应的页帧号为5（10），</p><p>所以物理地址就是 101 <em>1100 1101 1110</em></p><h3 id="PV操作"><a href="#PV操作" class="headerlink" title="PV操作"></a>PV操作</h3><h2 id="数据库-6"><a href="#数据库-6" class="headerlink" title="数据库-6"></a>数据库-6</h2><h2 id="计算机网络-7"><a href="#计算机网络-7" class="headerlink" title="计算机网络-7"></a>计算机网络-7</h2><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><h4 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h4><ul><li>路由协议是一种允许数据包的主机之间传送信息的一种协议</li></ul><h4 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h4><ul><li><p>SSL（Secure Socket Layer)是以安全为目标的HTTP通道</p></li><li><p>HTTPS就是在HTTP的基础上加入了SSH协议</p></li><li><p>SSL通过证书来验证服务器的身份，并为服务器和浏览器之间的通信进行加密</p></li></ul><h4 id="MIME协议"><a href="#MIME协议" class="headerlink" title="MIME协议"></a>MIME协议</h4><p>MIME（Multipurpose Internet Mail Extensions）是电子邮件发送多种格式文件的协议标准</p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><ul><li>默认端口：80</li></ul><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><ul><li>默认端口：443</li></ul><h3 id="Internet应用"><a href="#Internet应用" class="headerlink" title="Internet应用"></a>Internet应用</h3><h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><h4 id="数字签名（Digital-Signature）"><a href="#数字签名（Digital-Signature）" class="headerlink" title="数字签名（Digital Signature）"></a>数字签名（Digital Signature）</h4><h4 id="ARP攻击"><a href="#ARP攻击" class="headerlink" title="ARP攻击"></a>ARP攻击</h4><ul><li>ARP攻击欺骗攻击的一种，通过伪造IP地址和MAC地址，能够在网络中产生大量的ARP通信量使网络阻塞</li><li>ARP Request采用广播进行传送</li><li>ARP Response采用单播进行传送</li></ul><h3 id="声音及其数字化"><a href="#声音及其数字化" class="headerlink" title="声音及其数字化"></a>声音及其数字化</h3><ul><li>声音信号数字化过程中首先要进行<code>A/D转换</code></li></ul><h3 id="图形和图像"><a href="#图形和图像" class="headerlink" title="图形和图像"></a>图形和图像</h3><ul><li>dpi（dot per lnch）：每英寸像素点</li></ul><h2 id="程序语言-6"><a href="#程序语言-6" class="headerlink" title="程序语言-6"></a>程序语言-6</h2><h2 id="知识产权-2"><a href="#知识产权-2" class="headerlink" title="知识产权-2"></a>知识产权-2</h2><h2 id="数据结构与算法-10"><a href="#数据结构与算法-10" class="headerlink" title="数据结构与算法-10"></a>数据结构与算法-10</h2><h3 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h3><h4 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h4><p>耗时时间最多的一条路径</p><h3 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h3><h4 id="二叉树表达式"><a href="#二叉树表达式" class="headerlink" title="二叉树表达式"></a>二叉树表达式</h4><p>后序遍历二叉树</p><h4 id="波兰式"><a href="#波兰式" class="headerlink" title="波兰式"></a>波兰式</h4><h4 id="逆波兰式"><a href="#逆波兰式" class="headerlink" title="逆波兰式"></a>逆波兰式</h4><p>后缀表达式</p><h4 id="松弛时间"><a href="#松弛时间" class="headerlink" title="松弛时间"></a>松弛时间</h4><h2 id="软件工程-8"><a href="#软件工程-8" class="headerlink" title="软件工程-8"></a>软件工程-8</h2><h3 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h3><h4 id="开发模型"><a href="#开发模型" class="headerlink" title="开发模型"></a>开发模型</h4><blockquote><p>瀑布模型</p></blockquote><ul><li>将开发阶段描述为一个阶段如瀑布般转换到另一个阶段的过程</li><li>适合需求明确</li></ul><blockquote><p>原形模型</p></blockquote><ul><li>开发人员根据用户的需求</li></ul><blockquote><p>增量模型</p></blockquote><ul><li>系统管理成本高</li><li></li></ul><blockquote><p>喷泉模型</p></blockquote><ul><li>以用户需求为动力，以对象为驱动。</li><li></li></ul><h3 id="软件过程管理"><a href="#软件过程管理" class="headerlink" title="软件过程管理"></a>软件过程管理</h3><h4 id="水晶法（Crystal）"><a href="#水晶法（Crystal）" class="headerlink" title="水晶法（Crystal）"></a>水晶法（Crystal）</h4><ul><li>每一个项目都需要一套不同的策略，约定和方法论</li></ul><h4 id="极限编程法（XP）"><a href="#极限编程法（XP）" class="headerlink" title="极限编程法（XP）"></a>极限编程法（XP）</h4><ul><li>激发开发人员的创造性，使得管理的负担最小</li></ul><blockquote><p>组成</p></blockquote><ul><li>价值观</li><li>原则</li><li>实践</li><li>行为</li></ul><blockquote><p>价值观</p></blockquote><ul><li>沟通</li><li>简单性</li><li>反馈</li><li>勇气</li></ul><h4 id="并列争球法（Scrum）"><a href="#并列争球法（Scrum）" class="headerlink" title="并列争球法（Scrum）"></a>并列争球法（Scrum）</h4><ul><li><p>使用迭代的方法，每30天一次的迭代称为个冲刺。</p></li><li><p>按需求的优先级来实现产品多个自组织和自治小组并行地递增实现产品。</p></li><li><p>协调是通过简短的日常情况会议进行</p></li></ul><h4 id="自适应软件开发（ASD）"><a href="#自适应软件开发（ASD）" class="headerlink" title="自适应软件开发（ASD）"></a>自适应软件开发（ASD）</h4><p>自适应软件开发存在六个基本原则</p><ul><li>特征</li><li>变化不视为一种更正</li><li>确定交付时间</li><li>风险包含其中，开发人员首先跟踪最难的问题</li></ul><h4 id="CMMI"><a href="#CMMI" class="headerlink" title="CMMI"></a>CMMI</h4><blockquote><p>连续式模型</p></blockquote><ul><li>CL0（未完成的）：过程域未执行或未得到CL1中定义的所有目标</li><li>CL1（已执行的）：共性目标是过程将可标识的输入工作产品转换成可标识的输出工作产品，以实现支持过程域的特定目标</li><li>CL2（已管理的）：共性目标是集中以管理过程的制度化</li><li>CL3（已定义的）：共性目标集中于已定义的过程的制度化</li><li>CL4（定量管理的）：共性目标是集中于定量管理的过程的制度化</li><li>CL5（优化的）：使用量化（统计学）手段改变和优化过程域</li></ul><h4 id="SEI能力成熟度模型（SEICMM）"><a href="#SEI能力成熟度模型（SEICMM）" class="headerlink" title="SEI能力成熟度模型（SEICMM）"></a>SEI能力成熟度模型（SEICMM）</h4><ul><li>初始级：无规则</li><li>可重复级：建立基本的项目管理过程</li><li>已定义级：软件过程文档标准化形成</li><li>已管理级：软件过程和产品质量有详细的度量标准</li><li>优化级：</li></ul><h3 id="软件质量管理"><a href="#软件质量管理" class="headerlink" title="软件质量管理"></a>软件质量管理</h3><h4 id="软件评审"><a href="#软件评审" class="headerlink" title="软件评审"></a>软件评审</h4><p>软件应该要满足两个条件</p><ul><li>设计质量：设计的规格说明书符合用户要求</li><li>程序质量：程序按照设计规格说明的情况正确执行</li></ul><blockquote><p>设计质量评审</p></blockquote><ul><li>可靠性</li><li>可修改性</li><li>可测试性</li><li>性能实现情况</li></ul><h4 id="模块结构评审"><a href="#模块结构评审" class="headerlink" title="模块结构评审"></a>模块结构评审</h4><ul><li>控制流结构：模块之间的调用关系</li><li>数据流结构：处理模块和数据模块之间的存取关系</li><li>模块结构与功能结构之间的关系</li></ul><h4 id="McCabe度量法"><a href="#McCabe度量法" class="headerlink" title="McCabe度量法"></a>McCabe度量法</h4><ul><li>计算方式：M-N+2</li><li>其中M：边数，N：顶点数</li></ul><h4 id="ISO-x2F-IEC-9126软件质量度量模型"><a href="#ISO-x2F-IEC-9126软件质量度量模型" class="headerlink" title="ISO/IEC 9126软件质量度量模型"></a>ISO/IEC 9126软件质量度量模型</h4><p><strong>阶段</strong></p><blockquote><p>初启阶段—生命周期目标</p></blockquote><p>结束时产生一个构想问的那个，一个有关用例模型的调查，一个初始的业务用例，一个早期的风险评估和一个可以显示阶段和迭代的项目计划等物品</p><blockquote><p>精化阶段—生命周期架构</p></blockquote><p>结束时产生一个补充需求分析，一个软件架构描述和一个可执行的架构原型等制品</p><blockquote><p>构建阶段—初始运作功能</p></blockquote><p>结束时的成果是准备交到最终用户手中的产品，包括具有最初运作能力的在适当的平台上集成的软件产品，用户手册和对当前版本的描述</p><blockquote><p>移交阶段—产品发布</p></blockquote><p>结束时产生移交给用户产品发布版本</p><p><strong>质量特性</strong></p><blockquote><p>功能性</p></blockquote><ul><li>适合性</li><li>准确性</li><li>互用性</li><li>依从性</li><li>安全性</li></ul><blockquote><p>可靠性</p></blockquote><ul><li>成熟性</li><li>容错性</li><li>易恢复性</li></ul><blockquote><p>易使用性</p></blockquote><ul><li>易理解性</li><li>易学性</li><li>易操作性</li></ul><blockquote><p>效率</p></blockquote><ul><li>时间特性</li><li>资源特性</li></ul><blockquote><p>可维护性</p></blockquote><ul><li><p>易分析性</p><ul><li>：描述诊断失效原因，判定待修改的难易程度的特性</li></ul></li><li><p>易改变性</p><ul><li>：描述改变，排错或适应环境变化的难易性</li></ul></li><li><p>稳定性</p><ul><li>：描述修改后造成难以预料的后果的风险程度</li></ul></li><li><p>易测试性</p><ul><li>：描述测试已修改软件的难易程度的特性</li></ul></li></ul><blockquote><p>可移植性</p></blockquote><ul><li>适应性</li><li>易安装性</li><li>一致性</li><li>易替换性</li></ul><h3 id="软件开发项目管理"><a href="#软件开发项目管理" class="headerlink" title="软件开发项目管理"></a>软件开发项目管理</h3><h4 id="软件风险"><a href="#软件风险" class="headerlink" title="软件风险"></a>软件风险</h4><ul><li>不确定性：风险可能发生和不发生</li><li>损失：风险确实发生的时候，引起的不希望的后果。</li></ul><h2 id="系统开发与运行-8"><a href="#系统开发与运行-8" class="headerlink" title="系统开发与运行-8"></a>系统开发与运行-8</h2><h3 id="结构化开发"><a href="#结构化开发" class="headerlink" title="结构化开发"></a>结构化开发</h3><h4 id="内聚"><a href="#内聚" class="headerlink" title="内聚"></a>内聚</h4><p>多个内聚类型</p><h4 id="耦合"><a href="#耦合" class="headerlink" title="耦合"></a>耦合</h4><h3 id="结构化分析"><a href="#结构化分析" class="headerlink" title="结构化分析"></a>结构化分析</h3><h4 id="功能模型（数据流图）"><a href="#功能模型（数据流图）" class="headerlink" title="功能模型（数据流图）"></a>功能模型（数据流图）</h4><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410195807321.png" alt="image-20220410195807321"></p><h4 id="行为模型（状态转换图）"><a href="#行为模型（状态转换图）" class="headerlink" title="行为模型（状态转换图）"></a>行为模型（状态转换图）</h4><h4 id="数据模型（E-R）"><a href="#数据模型（E-R）" class="headerlink" title="数据模型（E-R）"></a>数据模型（E-R）</h4><h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410200523080.png" alt="image-20220410200523080"></p><h4 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h4><ul><li>单元测试</li><li>集成测试</li><li>确认测试 </li><li>系统测试<ul><li>系统测试采用的是黑盒测试方法</li></ul></li><li>回归测试</li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410201329666.png" alt="image-20220410201329666"></p><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><ul><li>动态测试<ul><li>黑盒测试</li><li>白盒测试</li><li>灰盒测试</li></ul></li><li>静态测试<ul><li>桌前检查</li><li></li><li>代码审查</li><li>代码走查</li></ul></li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410201247139.png" alt="image-20220410201247139"></p><h4 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h4><ul><li>自底向上：需要编写驱动程序</li><li>自顶向下：需要编写桩程序</li><li>三明治：</li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410201556099.png" alt="image-20220410201556099"></p><h4 id="黑盒测试用例设计（外部功能测试）"><a href="#黑盒测试用例设计（外部功能测试）" class="headerlink" title="黑盒测试用例设计（外部功能测试）"></a>黑盒测试用例设计（外部功能测试）</h4><ul><li>等价类划分：按照某特性归类，最多覆盖一个尚未被覆盖的无效等价类</li><li>边界值划分：按照极限数据</li><li>错误推测：经验</li><li>因果图：结果反推原因</li><li></li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410201811377.png" alt="image-20220410201811377"></p><h4 id="白盒测试用例设计（内部逻辑测试）"><a href="#白盒测试用例设计（内部逻辑测试）" class="headerlink" title="白盒测试用例设计（内部逻辑测试）"></a>白盒测试用例设计（内部逻辑测试）</h4><ul><li>语句覆盖：每个语句都覆盖了</li><li>判定覆盖 ： 对于每个判定覆盖一次</li><li>条件覆盖：对于每个判定里面的多个条件都走一遍，例如 a&lt;0 &amp;&amp; b&gt;0,会走a&gt;0,a&lt;0,b&gt;0,b&lt;0四条路径，但判定覆盖只走真假</li><li>条件/判定覆盖：</li><li>路径覆盖</li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410202346183.png" alt="image-20220410202346183"></p><h3 id="系统转换"><a href="#系统转换" class="headerlink" title="系统转换"></a>系统转换</h3><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410203627845.png" alt="image-20220410203627845"></p><h3 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h3><ul><li>正确性维护</li><li>适应性维护</li><li>完善性维护</li><li>预防性维护</li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410203701827.png" alt="image-20220410203701827"></p><h3 id="系统评价"><a href="#系统评价" class="headerlink" title="系统评价"></a>系统评价</h3><h4 id="系统评价分类"><a href="#系统评价分类" class="headerlink" title="系统评价分类"></a>系统评价分类</h4><ul><li>立项评价</li><li>中期评价</li><li>结项评价</li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410203925318.png" alt="image-20220410203925318"></p><h4 id="系统评价的指标"><a href="#系统评价的指标" class="headerlink" title="系统评价的指标"></a>系统评价的指标</h4><ul><li>信息系统组成方面<ul><li>运行效果、用户需求、系统质量、技术条件</li></ul></li><li>信息系统评价对象<ul><li>用户：用户需要和运行质量</li><li>系统外部环境：社会效益指标</li></ul></li><li>经济学角度<ul><li>系统成本、系统效益、财务指标</li></ul></li></ul><p><img src="/2022/04/02/ji-suan-ji-ji-chu-lei/ruan-kao/image-20220410204100744.png" alt="image-20220410204100744"></p><h2 id="面向对象-11"><a href="#面向对象-11" class="headerlink" title="面向对象-11"></a>面向对象-11</h2>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Get an Even String</title>
      <link href="/2022/04/02/summary/codeforces/20220331-780d3/c-get-an-even-string/"/>
      <url>/2022/04/02/summary/codeforces/20220331-780d3/c-get-an-even-string/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*  https://codeforces.com/contest/1660/problem/CC. Get an Even String    题目描述        给定一段字符串，你可以通过任意删除两个字符串使他达到合法        条件一：字符串长度为偶数        条件二：a[i]=a[i]+1 其中 i 为奇数    Tag：        1.dp        2.贪心    思路：          1.work（）            对于内部和外部，如果内部存在合法的字符串优先选择内部            abba 优先选择 bb        2.SOLVE()            f[i]：表示0到f[i-1]的合法序列的长度            每次对于相同字符，都向前匹配，或者不匹配            a b b b              b b                b b            对于b有两种情况匹配            对于第i个字符ch如果和前面的字符进行匹配            f[st[ch]]：表示0 ~ st[ch]-1 的合法字符串的长度，不包含 st[ch]位置*/</span><span class="token keyword">void</span> <span class="token function">SOLVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> <span class="token function">st</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> ch <span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不匹配</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 匹配</span>            f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>st<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">-</span> f<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>          cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span> <span class="token function">st</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token function">fill</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span> len <span class="token operator">-</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// work();</span>        <span class="token function">SOLVE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/02/za-pian/qi-qi-guai-guai-de-cao-zuo/"/>
      <url>/2022/04/02/za-pian/qi-qi-guai-guai-de-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="可以在网页开启设计模式直接编辑页面"><a href="#可以在网页开启设计模式直接编辑页面" class="headerlink" title="可以在网页开启设计模式直接编辑页面"></a>可以在网页开启设计模式直接编辑页面</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>designMode<span class="token operator">=</span> <span class="token string">"on"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1236. 递增三元组</title>
      <link href="/2022/03/28/summary/acwing/lan-qiao-bei/mo-ni/di-zeng-san-yuan-zu/"/>
      <url>/2022/03/28/summary/acwing/lan-qiao-bei/mo-ni/di-zeng-san-yuan-zu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/1238/    1236. 递增三元组    题目描述        对于三元组找到满足a[i]&lt;b[j]&lt;c[k]    Tag：        1.前缀和        2.二分    思路：        对于每个bi            找到在1-i-1 有多少个ai小于bi            找到在i+1-n 有多少个ci大于bi        如何做？            直接map映射值就可以最大也就1e5            对于每个数x map[x]++;            最后只需要判断对于b[i] 的前缀和 sum[b[i]];        ok gg        看错题了，不约束i，j，k之间的关系        所以也可以排序后用二分查找*/</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token comment">//数据范围100000</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll <span class="token operator">&gt;</span><span class="token function">b</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> x<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token function">sc</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token function">sa</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        x<span class="token operator">++</span><span class="token punctuation">;</span>        sa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        x<span class="token operator">++</span><span class="token punctuation">;</span>        sc<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>sa<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>sc<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ans<span class="token operator">+=</span><span class="token punctuation">(</span>sc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">-</span>sc<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>sa<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//b[i]可以=0，b[i]-1可能会越界</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Marin and Anti-Coprime Permutation</title>
      <link href="/2022/03/28/summary/codeforces/20220327-779d2/b-marin-and-anti-coprime-permutation/"/>
      <url>/2022/03/28/summary/codeforces/20220327-779d2/b-marin-and-anti-coprime-permutation/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-27 22:43:43 * @LastEditTime: 2022-03-28 20:06:16 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    B. Marin and Anti-coprime Permutation    https://codeforces.com/contest/1658/problem/B    题目描述    Tag:        1.思维题    思路：        我是打表找规律        首先发现奇数一定是0        偶数n答案为 (n/2)! * (n/2)!*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>b <span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token operator">*</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token operator">*</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Marin and Photoshoot</title>
      <link href="/2022/03/28/summary/codeforces/20220327-779d2/a-marin-and-photoshoot/"/>
      <url>/2022/03/28/summary/codeforces/20220327-779d2/a-marin-and-photoshoot/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-27 22:37:19 * @LastEditTime: 2022-03-28 19:59:29 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://codeforces.com/contest/1658/problem/AA. Marin and Photoshoot    题目描述        任意子序列的0数量不大于1    Tag：        1.思维题      思路：        情况分为2种        1.单独的1 左右为0        2.连续的0*/</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans<span class="token operator">+=</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>            i<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>238. 银河英雄传说</title>
      <link href="/2022/03/27/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/yin-he-ying-xiong-chuan-shuo/"/>
      <url>/2022/03/27/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/yin-he-ying-xiong-chuan-shuo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-27 22:10:46 * @LastEditTime: 2022-03-27 22:25:25 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    238. 银河英雄传说    https://www.acwing.com/problem/content/240/    题目描述        判断根据操作之后的回答    Tag：        1.并查集    思路：        维护每个节点到根节点的关系        用并查集维护*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">50050</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>      cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>opt<span class="token operator">&gt;&gt;</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">;</span>        <span class="token keyword">int</span> pa<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">,</span>pb<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>pa<span class="token punctuation">]</span><span class="token operator">=</span>pb<span class="token punctuation">;</span>            d<span class="token punctuation">[</span>pa<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>pb<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>pb<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>pa<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pa<span class="token operator">!=</span>pb<span class="token punctuation">)</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>240. 食物链</title>
      <link href="/2022/03/27/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/bing-cha-ji/shi-wu-lian/"/>
      <url>/2022/03/27/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/bing-cha-ji/shi-wu-lian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    240. 食物链    https://www.acwing.com/problem/content/242/    题目描述：        动物王国中有三类动物 A,B,C，这三类动物的食物链构成了有趣的环形。        A 吃 B，B 吃 C，C 吃 A。        判断假话的数目    Tag：           1.并查集    思路：        维护权值的并查集        如何表示关系？            用每个点到根节点的距离作为他的关系，关系有                0.跟根节点同类，根节点本身可以看成到自己的距离为0                1.吃根节点                2.被根节点吃            可以用每个点到根节点的距离%3 来表示关系，            每两个在集合中的点可以通过和根节点的关系来判断两者之间的关系*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">50050</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>opt <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>n <span class="token operator">||</span>y<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> px<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>py<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">==</span>py <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span> <span class="token operator">!=</span> d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">!=</span>py<span class="token punctuation">)</span><span class="token punctuation">{</span>                p<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>py<span class="token punctuation">;</span>                   d<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">==</span>py <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span>  <span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">!=</span>py<span class="token punctuation">)</span><span class="token punctuation">{</span>                    p<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>py<span class="token punctuation">;</span>                d<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>237. 程序自动分析</title>
      <link href="/2022/03/26/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/cheng-xu-zi-dong-fen-xi/"/>
      <url>/2022/03/26/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/cheng-xu-zi-dong-fen-xi/</url>
      
        <content type="html"><![CDATA[<p>```cpp<br>/*</p><ul><li><p>@Autor: Zver</p></li><li><p>@Date: 2022-03-24 14:16:08</p></li><li><p>@LastEditTime: 2022-03-26 22:47:36<br> <em>/<br>#include <fstream><br>#include <iostream><br>#include<queue><br>#include<stack><br>#include<unordered_map><br>#include<map><br>#include<string><br>#include<cstring><br>#include<cstdio><br>#include<list><br>#include<vector><br>#include<set><br>#include<cmath><br>#include<algorithm><br>#include<utility><br>#define INF_32 int(1e9)+5<br>void f(){exit(0);};<br>#define eps 1e-8<br>typedef long long ll;<br>typedef unsigned long long ull;<br>typedef std::pair&lt;int, int&gt; PII;<br>void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}<br>void TEST(){freopen(“input.txt”,”r”,stdin);freopen(“output.txt”,”w”,stdout);}<br>using namespace std;<br>/</utility></algorithm></cmath></set></vector></list></cstdio></cstring></string></map></unordered_map></stack></queue></iostream></fstream></em><br> <a href="https://www.acwing.com/problem/content/239/">https://www.acwing.com/problem/content/239/</a></p><ol start="237"><li>程序自动分析<br> 题目描述<br> 判断约束条件是否可以全部满足<br> Tag:<br> 1.并查集<br> 2.离散化<br> 思路：<br> 1.首先一看就可以想到并查集，但是数据范围到1e9无法用数组完全存下来<br>   -》离散化存储 ？<br>   为什么要做离散化？<br>   数据范围很大1e9，但是值的范围很少只会用到1e5<br>   为什么要去重？去重为什么还可以保证正确性？<br>   去重掉完全相同的信息，一个等价于n个作用<br>   如何做离散化？<br>   1.保序，去重，二分<br>   2.hash，unordered_map<br>   对于一个值 映射 一个唯一下标</li></ol><p> 并查集擅长动态维护许多具有传递性的关系,能在无向图中维护节点之间的连通性.</p></li></ul><p><em>/<br>const int N=2</em>100010; // 开2倍，合并到一个数组<br>unordered_map&lt;int ,int &gt;mp;<br>int p[N];<br>int inx=0,n;<br>int find(int x){<br>    if(p[x]!=x) {<br>        p[x]=find(p[x]);<br>    }<br>    return p[x];<br>}<br>struct node{<br>    int x,y;<br>    int opt;<br>}q[N];<br>int get(int x){<br>    if(!mp.count(x)) mp[x]= (++inx);<br>    return mp[x];<br>}<br>//另一种离散化方法,去重排序,这种可以表示的数据范围更大些？</p><p>void __solve2(){<br>    cin&gt;&gt;n;<br>    for(int i=1;i&lt;=2*n;i++){<br>        p[i]=i;<br>   }<br>   vector<int> num;<br>   int a,b,opt;<br>   for(int i=1;i&lt;=n;i++){<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;opt;<br>        q[i]={a,b,opt};<br>        num.push_back(a);<br>        num.push_back(b);<br>   }<br>   sort(num.begin(),num.end());<br>   int len = unique(num.begin(),num.end()) -num.begin();<br>   for(int i=1;i&lt;=n;i++){<br>       a=q[i].x;<br>       b=q[i].y;<br>       a=lower_bound(num.begin(),num.end(),a)-num.begin();<br>       b=lower_bound(num.begin(),num.end(),b)-num.begin();<br>       q[i].x=a;<br>       q[i].y=b;</int></p><p>   }<br>   for(int i=1;i&lt;=n;i++){<br>       if(q[i].opt==1){<br>           a=find(q[i].x);<br>           b=find(q[i].y);</p><pre><code>       p[a]=b;   }</code></pre><p>   }<br>   bool flag=1;<br>   for(int i=1;i&lt;=n;i++){<br>       if(q[i].opt==0){<br>           a = find(q[i].x);<br>           b = find(q[i].y);<br>           if(a==b){<br>               flag=0;<br>               break;<br>           }<br>       }<br>   }<br>   if(flag) cout&lt;&lt;”YES”&lt;&lt;endl;<br>   else cout&lt;&lt;”NO”&lt;&lt;endl;<br>}<br>//map离散化<br>void __solve(){    </p><pre><code>mp.clear();cin&gt;&gt;n;inx=0;for(int i=1;i&lt;=2*n;i++){    p[i]=i;}for(int i=1;i&lt;=n;i++){    int a,b,opt;    cin&gt;&gt;a&gt;&gt;b&gt;&gt;opt;    q[i]={get(a),get(b),opt};}bool flag=0;for(int i=1;i&lt;=n;i++){    int pa=find(q[i].x),pb=find(q[i].y);    if(q[i].opt==1){            p[pa]=pb;    }}for(int i=1;i&lt;=n;i++){    if(q[i].opt==0){        int pa=find(q[i].x),pb=find(q[i].y);        if(pa==pb){            flag=1;            break;        }    }}if(flag){    cout&lt;&lt;"NO"&lt;&lt;endl;}else{    cout&lt;&lt;"YES"&lt;&lt;endl;}</code></pre><p>}<br>int main()<br>{<br>    IOS();<br>    int t ;<br>    cin&gt;&gt;t;<br>    while(t–){<br>        __solve2();<br>    }</p><pre><code>return 0;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散化 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1250. 格子游戏</title>
      <link href="/2022/03/24/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/ge-zi-you-xi/"/>
      <url>/2022/03/24/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/bing-cha-ji/ge-zi-you-xi/</url>
      
        <content type="html"><![CDATA[<p>```cpp<br>/*</p><ul><li>@Autor: Zver</li><li>@Date: 2022-03-24 11:23:44</li><li>@LastEditTime: 2022-03-24 11:54:32<br> */<br>#include <fstream><br>#include <iostream><br>#include<queue><br>#include<stack><br>#include<unordered_map><br>#include<map><br>#include<string><br>#include<cstring><br>#include<cstdio><br>#include<list><br>#include<vector><br>#include<set><br>#include<cmath><br>#include<algorithm><br>#include<utility><br>#define INF_32 int(1e9)+5<br>void f(){exit(0);};<br>#define eps 1e-8<br>typedef long long ll;<br>typedef unsigned long long ull;<br>typedef std::pair&lt;int, int&gt; PII;<br>void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}<br>void TEST(){freopen(“input.txt”,”r”,stdin);freopen(“output.txt”,”w”,stdout);}<br>using namespace std;</utility></algorithm></cmath></set></vector></list></cstdio></cstring></string></map></unordered_map></stack></queue></iostream></fstream></li></ul><p>/*<br>    <a href="https://www.acwing.com/problem/content/1252/">https://www.acwing.com/problem/content/1252/</a><br>    1250. 格子游戏<br>    题目描述<br>        判断是否连成一个环<br>    Tag:<br>        1.并查集<br>    思路：<br>        1.如何判断环<br>            如果当前的两个点在同一个集合中，那么说明已经有了环，判断是否在集合中-》并查集<br>        2.如何表示二维的点的并查集<br>            二维转换成一维对应的点（x，y）-》x*n+y</p><p><em>/<br>const int N= 200</em>200+201;<br>int p[N];<br>int n,m,x,y;<br>int find(int x){<br>    if(p[x] != x) p[x]=find(p[x]);<br>    return p[x];<br>}<br>int main()<br>{</p><pre><code>cin &gt;&gt; n &gt;&gt; m; for(int i=1;i&lt;n*n;i++){    p[i]=i;}int a,b;        int count =-1;for(int i=1;i&lt;=m;i++){    cin&gt;&gt;x&gt;&gt;y;    x--,y--;    a=x*n+y;    string s;    cin&gt;&gt;s;    if(s=="D") {        b = (x+1)*n+y;    }else{        b = x*n+(y+1);    }    int pa=find(a),pb=find(b);    if(pa==pb){        count = i;        break;    }    p[pa]=pb;}if(count ==-1 )cout&lt;&lt;"draw"&lt;&lt;endl;else cout&lt;&lt;count&lt;&lt;endl;return 0;</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery</title>
      <link href="/2022/03/23/web/jquery/"/>
      <url>/2022/03/23/web/jquery/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA</title>
      <link href="/2022/03/23/ruan-jian-shi-yong/idea/"/>
      <url>/2022/03/23/ruan-jian-shi-yong/idea/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="清除不使用的类"><a href="#清除不使用的类" class="headerlink" title="清除不使用的类"></a>清除不使用的类</h3><p>设置清除无用 import 的 key 为 <code>optimize imports</code><br><strong>快捷键</strong></p><p><img src="/2022/03/23/ruan-jian-shi-yong/idea/image-20220323110301556.png" alt="image-20220323110301556"></p>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3491. 完全平方数</title>
      <link href="/2022/03/22/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/wan-quan-ping-fang-shu/"/>
      <url>/2022/03/22/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/wan-quan-ping-fang-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-22 16:13:27 * @LastEditTime: 2022-03-22 16:22:46 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/3494/    3491. 完全平方数    题目描述        一个整数 a 是一个完全平方数，是指它是某一个整数的平方，即存在一个整数 b，使得 a=b^2,        给定一个正整数 n，请找到最小的正整数 x，使得它们的乘积是一个完全平方数。    Tag:        1.分解质因数    思路：        分解质因数，乘所有奇数个的质因子        map，输入和答案要开ll*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>ll <span class="token punctuation">,</span>ll <span class="token operator">&gt;</span>mp<span class="token punctuation">;</span>    mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                n<span class="token operator">/=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> mp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> mp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">*=</span>x<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分解质因数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>181. 回转游戏</title>
      <link href="/2022/03/22/summary/acwing/suan-fa-ti-gao/sou-suo/hui-zhuan-you-xi/"/>
      <url>/2022/03/22/summary/acwing/suan-fa-ti-gao/sou-suo/hui-zhuan-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-19 16:51:12 * @LastEditTime: 2022-03-22 14:21:29 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/183/    181. 回转游戏    题目描述        给你一个井字型，通过循环每个位置的循环移位，通过最少的操作次数，使得中间的八个格子的数字相同    Tag:        1.IDA*        2.搜索    思路：        对于每个位置的操作的下标首先打表出来        change（）函数就实现了循环移位        迭代加深 + A* = IDA*        估价函数            ：统计中间8个出现次数最多的数出现了多少次，记为t次            ：每次操作都会从中间8个格子中移出一个数，在移入一个数，所以每次操作最多减少一个不同的数            ：估价函数就是8-t        如果抱着保证字典序最小            ：每次都是按照字典序排序后的操作来依次执行        搜索剪枝            ：每次避免和上一次操作相反抵消。*/</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">13</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> opposite<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> center<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> s<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>s<span class="token punctuation">[</span>center<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">8</span> <span class="token operator">-</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> u <span class="token operator">&gt;</span> depth<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opposite<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">change</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> depth<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">change</span><span class="token punctuation">(</span>opposite<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> depth<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No moves needed"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDA* </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛概</title>
      <link href="/2022/03/21/ke-cheng-lei/mao-gai/"/>
      <url>/2022/03/21/ke-cheng-lei/mao-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="毛泽东思想及其地位"><a href="#毛泽东思想及其地位" class="headerlink" title="毛泽东思想及其地位"></a>毛泽东思想及其地位</h2><h3 id="毛泽东思想的形成和发展"><a href="#毛泽东思想的形成和发展" class="headerlink" title="毛泽东思想的形成和发展"></a>毛泽东思想的形成和发展</h3><h4 id="毛泽东思想的形成"><a href="#毛泽东思想的形成" class="headerlink" title="毛泽东思想的形成"></a>毛泽东思想的形成</h4><ol><li><p>土地革命时期，毛泽东等人，坚持马克思列宁主义必须与中国革命具体实际结合的基本原则</p></li><li><p>毛泽东在《中国的红色政权为什么能够存在》，《井冈山的斗争》，《星星之火，可以燎原》，《反资本主义》中，提出并阐述了农村包围城市，武装夺取政权的思想，标志着毛泽东思想的形成</p></li></ol><h4 id="毛泽东思想的成熟"><a href="#毛泽东思想的成熟" class="headerlink" title="毛泽东思想的成熟"></a>毛泽东思想的成熟</h4><p>遵义会议后，在《实践论》和《矛盾论》中两篇著作中，通过运用马克思主义的认识论和辩证法，系统分析了党内的左和右的错误的思想根源</p><h4 id="毛泽东思想的发展"><a href="#毛泽东思想的发展" class="headerlink" title="毛泽东思想的发展"></a>毛泽东思想的发展</h4><h3 id="毛泽东思想的主要内容和活的灵魂"><a href="#毛泽东思想的主要内容和活的灵魂" class="headerlink" title="毛泽东思想的主要内容和活的灵魂"></a>毛泽东思想的主要内容和活的灵魂</h3><h4 id="毛泽东思想的主要内容"><a href="#毛泽东思想的主要内容" class="headerlink" title="毛泽东思想的主要内容"></a>毛泽东思想的主要内容</h4><h5 id="新民主主义革命理论"><a href="#新民主主义革命理论" class="headerlink" title="新民主主义革命理论"></a>新民主主义革命理论</h5><p>创立了无产阶级领导的，以工农联盟为基础的，人民大众的，反对帝国主义的，封建社会和官僚资本主义的新民主主义革命理论</p><ul><li>一是认为中国资产阶级有两部分，一个是依附帝国主义的大资产阶级和既有革命要求又动摇的的民族资产阶级</li><li>二是由于帝国主义的侵略，加之中国没有资产阶级民主，因此中国革命只能以长期的武装斗争为主要形式</li></ul><p>毛泽东将<code>统一战线</code>，<code>武装斗争</code>，<code>党的建设</code>概括为克敌制胜的四大法宝</p><h5 id="社会主义革命和社会主义建设理论"><a href="#社会主义革命和社会主义建设理论" class="headerlink" title="社会主义革命和社会主义建设理论"></a>社会主义革命和社会主义建设理论</h5><p>社会主义社会仍然存在矛盾，基本的矛盾仍然是生产关系和生产力之间的矛盾，上层建筑和经济基础之间的矛盾。</p><h5 id="革命军队建设和军事战略的理论"><a href="#革命军队建设和军事战略的理论" class="headerlink" title="革命军队建设和军事战略的理论"></a>革命军队建设和军事战略的理论</h5><h5 id="政策和策略的理论"><a href="#政策和策略的理论" class="headerlink" title="政策和策略的理论"></a>政策和策略的理论</h5><h5 id="思想政治工作和文化工作的理论"><a href="#思想政治工作和文化工作的理论" class="headerlink" title="思想政治工作和文化工作的理论"></a>思想政治工作和文化工作的理论</h5><h5 id="党的建设"><a href="#党的建设" class="headerlink" title="党的建设"></a>党的建设</h5><p>作为党员，应该经常注意思想的改造</p><ol><li>理论和实践相结合的作风</li><li>和人民群众紧密联系在一起</li><li>自我批评反省</li></ol><h4 id="毛泽东思想的活的灵魂"><a href="#毛泽东思想的活的灵魂" class="headerlink" title="毛泽东思想的活的灵魂"></a>毛泽东思想的活的灵魂</h4><h5 id="实事求是"><a href="#实事求是" class="headerlink" title="实事求是"></a>实事求是</h5><h5 id="群众路线"><a href="#群众路线" class="headerlink" title="群众路线"></a>群众路线</h5><h5 id="独立自主"><a href="#独立自主" class="headerlink" title="独立自主"></a>独立自主</h5><h3 id="毛泽东思想的历史地位"><a href="#毛泽东思想的历史地位" class="headerlink" title="毛泽东思想的历史地位"></a>毛泽东思想的历史地位</h3><h4 id="马克思主义中国的第一个理论成果"><a href="#马克思主义中国的第一个理论成果" class="headerlink" title="马克思主义中国的第一个理论成果"></a>马克思主义中国的第一个理论成果</h4><ul><li>毛泽东第一个提出“马克思主义中国化“的科学命题和重大任务</li><li>深刻论证了马克思主义中国化的必要性和极端重要性</li><li>系统阐述了马克思主义中国话的科学内涵和实现马克思中国话的正确途径，为党领导革命和建设事业的发展奠定了坚实的思想理论基础</li></ul><h4 id="中国革命和建设的科学指南"><a href="#中国革命和建设的科学指南" class="headerlink" title="中国革命和建设的科学指南"></a>中国革命和建设的科学指南</h4><p><strong>毛泽东思想</strong>是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结</p><h4 id="中国共产党和中国人民的宝贵精神财富"><a href="#中国共产党和中国人民的宝贵精神财富" class="headerlink" title="中国共产党和中国人民的宝贵精神财富"></a>中国共产党和中国人民的宝贵精神财富</h4><p>毛泽东思想基本原理，原则和科学方法具有普遍的指导意义</p><h2 id="新民主主义革命理论-1"><a href="#新民主主义革命理论-1" class="headerlink" title="新民主主义革命理论"></a>新民主主义革命理论</h2><h3 id="新民主主义革命理论形成的依据"><a href="#新民主主义革命理论形成的依据" class="headerlink" title="新民主主义革命理论形成的依据"></a>新民主主义革命理论形成的依据</h3><h4 id="近代中国国情和中国革命的时代特征"><a href="#近代中国国情和中国革命的时代特征" class="headerlink" title="近代中国国情和中国革命的时代特征"></a>近代中国国情和中国革命的时代特征</h4><blockquote><p>近代中国国情</p></blockquote><p>中国逐渐成为半殖民地半封建社会，这是近代中国最基本的<strong>国情</strong></p><blockquote><p> 近代中国革命的时代特征</p></blockquote><h4 id="新民主主义革命理论的实践基础"><a href="#新民主主义革命理论的实践基础" class="headerlink" title="新民主主义革命理论的实践基础"></a>新民主主义革命理论的实践基础</h4><h3 id="新民主主义革命的总路线和基本纲领"><a href="#新民主主义革命的总路线和基本纲领" class="headerlink" title="新民主主义革命的总路线和基本纲领"></a>新民主主义革命的总路线和基本纲领</h3><h4 id="新民主主义革命的总路线"><a href="#新民主主义革命的总路线" class="headerlink" title="新民主主义革命的总路线"></a>新民主主义革命的总路线</h4><p>1948年，毛泽东在《在近晋干部会议上的讲话》完整表述了总路线的内容，即无产阶级领导的，人民大众的，反对帝国主义，封建主义，和官僚资本主义的革命</p><blockquote><p> 新民主主义革命的对象</p></blockquote><ul><li>中国革命的主要<strong>敌人</strong>是帝国主义，封建主义和官僚资本主义。</li><li>帝国主义是中国革命的<strong>首要对象</strong></li></ul><blockquote><p> 新民主主义革命的动力</p></blockquote><ul><li>新民主主义革命的<strong>动力</strong>包括无产阶级，农民阶级，城市小资产阶级和民族资产阶级</li><li>其中农民是中国革命的主力军</li></ul><blockquote><p>新民主主义革命的领导力量</p></blockquote><ul><li>无产阶级的领导权是<strong>中国革命的中心问题</strong></li><li>区分新旧两个不同范畴的民主主义革命的<strong>本质</strong>就是，革命的领导权在无产阶级中还是在资产阶级中</li></ul><blockquote><p>新民主主义革命的性质和前途</p></blockquote><ul><li>近代中国半殖民地半封建社会的社会性质和中国革命的历史任务，决定了中国革命的性质不是无产阶级社会主义革命，而是资产阶级民主主义革命</li><li><strong>革命的前途</strong>是社会主义而不是资本主义</li></ul><h4 id="新民主主义的基本纲领"><a href="#新民主主义的基本纲领" class="headerlink" title="新民主主义的基本纲领"></a>新民主主义的基本纲领</h4><p>新民族主义的基本纲领是新民主主义革命总路线的进一步展开和体现，为新民主主义革命指指明来具体奋斗目标。</p><blockquote><p>新民主主义的政治纲领</p></blockquote><p>推翻帝国注意和封建主义统治，建立一个无产阶级领导的，以工农联盟为基础的，各革命阶级联合专政的新民主主义的共和国。</p><blockquote><p>新民主主义的经济纲领</p></blockquote><p>没收封建地主阶级的土地归农民所有，没收官僚资本阶级的垄断资本归新民主主义国家所有，保护民族工商业。</p><blockquote><p>新民主主义的文化纲领</p></blockquote><p>无产阶级领导的人民大众的反帝反封建的文化，即民族的科学的大众的文化</p><h3 id="新民主主义革命的道路和基本经验"><a href="#新民主主义革命的道路和基本经验" class="headerlink" title="新民主主义革命的道路和基本经验"></a>新民主主义革命的道路和基本经验</h3><h4 id="新民主主义革命的道路"><a href="#新民主主义革命的道路" class="headerlink" title="新民主主义革命的道路"></a>新民主主义革命的道路</h4><p>新民主主义革命的道路是：农村包围城市，武装夺取政权的革命</p><blockquote><p>新民主主义革命的指出</p></blockquote><blockquote><p>新民主主义革命的道路形成的必然性</p></blockquote><p>中国革命必须走农村包围城市，武装夺取政权的道路，是由中国所处的时代特点和具体国情决定的。</p><blockquote><p>新民主主义革命道路的内容及意义</p></blockquote><p>中国革命道路的理论，<strong>反映</strong>了中国半殖民地半封建社会民主革命发展的客观纪律</p><h4 id="新民主主义革命的三大法宝"><a href="#新民主主义革命的三大法宝" class="headerlink" title="新民主主义革命的三大法宝"></a>新民主主义革命的三大法宝</h4><blockquote><p>统一战线</p></blockquote><blockquote><p>武装斗争</p></blockquote><blockquote><p>党的建设</p></blockquote><ol><li><p>必须把思想建设始终放在党的建设首位</p></li><li><p>必须在任何时候都重视党的组织建设</p></li><li><p>必须重视党的作风建设</p></li></ol><h4 id="新民主主义革命理论的意义"><a href="#新民主主义革命理论的意义" class="headerlink" title="新民主主义革命理论的意义"></a>新民主主义革命理论的意义</h4><ol><li><strong>揭示</strong>了近代中国革命发展的客观规律</li><li><strong>解决了</strong>落后的半殖民地的东方大国进行革命的一系列理论问题</li><li><strong>科学回答了</strong>中国革命何去何从，以及中国革命的发展阶段问题</li><li><strong>丰富了</strong>马克思主义的理论宝库</li></ol><h2 id="社会主义改造理论"><a href="#社会主义改造理论" class="headerlink" title="社会主义改造理论"></a>社会主义改造理论</h2><h3 id="从新民主主义到社会主义的转变"><a href="#从新民主主义到社会主义的转变" class="headerlink" title="从新民主主义到社会主义的转变"></a>从新民主主义到社会主义的转变</h3><h4 id="新民主主义社会是一个过渡性的社会"><a href="#新民主主义社会是一个过渡性的社会" class="headerlink" title="新民主主义社会是一个过渡性的社会"></a>新民主主义社会是一个过渡性的社会</h4><h4 id="党在过渡时期的总路线及其理论依据"><a href="#党在过渡时期的总路线及其理论依据" class="headerlink" title="党在过渡时期的总路线及其理论依据"></a>党在过渡时期的总路线及其理论依据</h4><blockquote><p>“一化三改”</p></blockquote><ul><li><code>一化</code>：社会主义工业化</li><li><code>三改</code>：个体农业，手工业，资本主义工商业的社会主义改造</li></ul><h3 id="社会主义改造道路和历史经验"><a href="#社会主义改造道路和历史经验" class="headerlink" title="社会主义改造道路和历史经验"></a>社会主义改造道路和历史经验</h3><h4 id="适合中国特点的社会主义改造道路"><a href="#适合中国特点的社会主义改造道路" class="headerlink" title="适合中国特点的社会主义改造道路"></a>适合中国特点的社会主义改造道路</h4><blockquote><p>农业社会主义改造</p></blockquote><ol><li>积极引导农民组织起来，走互助合作道路</li><li>遵循自愿互利，典型示范和国家帮助的原则，以互助合作的优越性吸引农民</li><li>正确分析农村的阶级和阶层状况，制定阶级政策</li><li></li></ol><h4 id="社会主义改造的历史经验"><a href="#社会主义改造的历史经验" class="headerlink" title="社会主义改造的历史经验"></a>社会主义改造的历史经验</h4><h3 id="社会主义基本制度在中国的建立"><a href="#社会主义基本制度在中国的建立" class="headerlink" title="社会主义基本制度在中国的建立"></a>社会主义基本制度在中国的建立</h3><h4 id="社会主义基本制度的确立及其理论根据"><a href="#社会主义基本制度的确立及其理论根据" class="headerlink" title="社会主义基本制度的确立及其理论根据"></a>社会主义基本制度的确立及其理论根据</h4><h4 id="确立社会主义基本制度的重大意义"><a href="#确立社会主义基本制度的重大意义" class="headerlink" title="确立社会主义基本制度的重大意义"></a>确立社会主义基本制度的重大意义</h4>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Madoka and Childish Pranks</title>
      <link href="/2022/03/19/summary/codeforces/20220311-777d2/c-madoka-and-childish-pranks/"/>
      <url>/2022/03/19/summary/codeforces/20220311-777d2/c-madoka-and-childish-pranks/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-19 15:01:16 * @LastEditTime: 2022-03-19 15:31:33 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1647/problem/C    C. Madoka and Childish Pranks    题目描述        给一个全是 0 的二位矩阵，能否通过操作变成给出的01图        操作：            对于0是白色，1是黑色            可以任意选择一个子矩阵，保证这个选择子矩阵的左上角是0，然后对于每个 0 上下左右必须是1        不要求最小化操作次数。        求出操作次数和操作过程    Tag：        1.构造题        2.贪心    思路：        不要求最小化操作次数        所以考虑对于 1*2和2*1矩阵        只要不是第一行都可以采用2*1矩阵变黑        只要不是第一行第一列都可以采用1*2矩阵变黑*/</span><span class="token keyword">void</span> <span class="token function">__solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    string s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>n <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>       vector<span class="token operator">&lt;</span>PII <span class="token operator">&gt;</span>ans1<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> ans2<span class="token punctuation">;</span>    <span class="token keyword">int</span> cot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  cot<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  cot<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>cot<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ans1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>ans1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ans2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">__solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>180. 排书</title>
      <link href="/2022/03/18/summary/acwing/suan-fa-ti-gao/sou-suo/pai-shu/"/>
      <url>/2022/03/18/summary/acwing/suan-fa-ti-gao/sou-suo/pai-shu/</url>
      
        <content type="html"><![CDATA[<p>先考虑每一步的决策数量：<br>当抽取长度为 i 的一段时，有 n−i+1 种抽法，对于每种抽法，有 n−i 种放法。另外，将某一段向前移动，等价于将跳过的那段向后移动，因此每种移动方式被算了两遍，所以每个状态总共的分支数量是：</p><p>$$∑ni=1(n−i)∗(n−i+1)/2=(15∗14+14∗13+…+2∗1)/2=560∑i=1n(n−i)∗(n−i+1)/2=(15∗14+14∗13+…+2∗1)/2=560$$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-17 20:36:05 * @LastEditTime: 2022-03-18 18:32:05 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/182/    180. 排书    题目描述        给定 n 本书，编号为 1∼n。        在初始状态下，书是任意排列的。        在每一次操作中，可以抽取其中连续的一段，再把这段插入到其他某个位置。、        我们的目标状态是把书按照 1∼n 的顺序依次排列。        求最少需要多少次操作。    Tag:        1.IDA*        2.A*    思路        每次变换可以改变三个点的后继点        根据这个为当前状态的估价函数        估价函数        为每一个不合法后继的个数        估价函数为0说明已经是1～n            每次移动最多会断开三个相连的位置，再重新加入三个相连的位置，因此最多会将3个错误的连接修正，所以如果当前有 tottot 个连接，            那么最少需要 ⌈tot/3⌉⌈tot/3⌉ 次操作                   如果当前层数加上 f(s)f(s) 大于迭代加深的层数上限，则直接从当前分支回溯。        理论上最多搜索 560^4个状态，使用IDA*后实际搜索的状态数量很少。         */</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">__solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> a<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>    <span class="token comment">//估价函数: 当前</span>    <span class="token keyword">auto</span>  f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tot<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token punctuation">(</span>tot<span class="token operator">+</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     function<span class="token operator">&lt;</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">)</span> <span class="token operator">&gt;</span> dfs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 估计函数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>  u <span class="token operator">+</span> t <span class="token operator">&gt;</span> depth <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span> n<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> r <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span> k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>                        <span class="token keyword">int</span> y <span class="token operator">=</span> l<span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span>  x<span class="token operator">&lt;=</span>k <span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> l <span class="token punctuation">;</span> x<span class="token operator">&lt;=</span>r <span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        a <span class="token operator">=</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token comment">//迭代加深</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>depth <span class="token operator">&lt;</span> <span class="token number">5</span>  <span class="token operator">&amp;&amp;</span>  <span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span>depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"5 or more"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>depth<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">__solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDA* </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/15/summary/acwing/zhou-sai/zhou-sai-42/chu-xian-ci-shu/"/>
      <url>/2022/03/15/summary/acwing/zhou-sai/zhou-sai-42/chu-xian-ci-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-15 20:02:43 * @LastEditTime: 2022-03-15 22:22:55 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/4315/    4312. 出现次数    题目描述        给你两个串a，b，给你q个区间，问区间内a有多少个b    Tag：        1.前缀和    思路：        只考虑b的最后一个字母所在的位置        对于区间[l,r]        最后一个字母所在的位置为        [l+b.size()-1,r]*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span> m <span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    s<span class="token operator">=</span><span class="token char">' '</span><span class="token operator">+</span>s<span class="token punctuation">;</span>    string sm<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>sm<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>m <span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">==</span>sm<span class="token punctuation">)</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> l  <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>        l <span class="token operator">=</span> l <span class="token operator">+</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fault-Tolerant Network</title>
      <link href="/2022/03/14/summary/codeforces/20220310-124d2/c-fault-tolerant-network/"/>
      <url>/2022/03/14/summary/codeforces/20220310-124d2/c-fault-tolerant-network/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-13 15:21:04 * @LastEditTime: 2022-03-14 20:16:48 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1651/problem/C    C. Fault-tolerant Network    题目描述        给你两个数组，要求你连接两个数组，连接的花费为abs(a[i]-b[i])        要求使用最少的花费，连接两个数组成为一个部分，同时如果任何一个节点坏了        不会分出更多部分    Tag:        1.思维题        2.枚举题    思路：        对于两头只要保证两个数组的两头有连接着对面        那么任何一个节点坏，也不会使得分成更多部分        所以也是找出两数组的两头连接的最少花费         然后对于a0和an，b0和bn分别找到他在对面的最优选择 a0,an,b0,bn        以下七种情况        1.a[0]-b[0],a[n]-b[n]        2.a[0]-b[n],a[n]-b[0]        3.a[0]-b[0],an+bn        4.a[0]-b[n],an+b0        5.a[n]-b[0],a0+bn        6.a[n]-b[n],an+b0        7,a0+bn+b0+bn*/</span><span class="token keyword">int</span> n <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll <span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>x <span class="token operator">:</span> a<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>x <span class="token operator">:</span> b<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>    <span class="token comment">/*       只要保证两个数组的两头有连接着对面        那么任何一个节点坏，也不会使得分成更多部分        所以也是找出两数组的两头连接的最少花费     */</span>    ll ans <span class="token operator">=</span> INF_32<span class="token punctuation">;</span>    <span class="token comment">/*        如果两个数组的两头相互连接，那么只需要两条就可以了        也就是说头和头的连接 顶 两条普通线连接    */</span>    ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>        <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ll a0 <span class="token operator">=</span> INF_32<span class="token punctuation">,</span> an<span class="token operator">=</span>INF_32<span class="token punctuation">,</span> b0<span class="token operator">=</span>INF_32 <span class="token punctuation">,</span>bn<span class="token operator">=</span>INF_32<span class="token punctuation">;</span>    <span class="token comment">//找出两头连接对面最小的花费</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a0 <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>a0<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        an <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>an<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b0 <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>b0<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bn <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>bn<span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll t1<span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> an<span class="token operator">+</span>bn<span class="token punctuation">;</span>    ll t2<span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> an<span class="token operator">+</span>b0<span class="token punctuation">;</span>    ll t3<span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a0<span class="token operator">+</span>bn<span class="token punctuation">;</span>    ll t4<span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a0<span class="token operator">+</span>b0<span class="token punctuation">;</span>    t1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t4<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a0<span class="token operator">+</span>an<span class="token operator">+</span>b0<span class="token operator">+</span>bn<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 枚举题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>170. 加成序列</title>
      <link href="/2022/03/12/summary/acwing/suan-fa-ti-gao/sou-suo/jia-cheng-xu-lie/"/>
      <url>/2022/03/12/summary/acwing/suan-fa-ti-gao/sou-suo/jia-cheng-xu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-12 20:02:46 * @LastEditTime: 2022-03-12 20:14:53 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/172/    170. 加成序列    题目描述        数组x[1]=1 ,x[m]=n;        数组满足单调递增x[1]&lt;x[2]&lt;x[3]&lt;x[m]        对于每个k都有两个数 x[i]+x[j]= k  其中i和j可以是同一个数    Tag:        1.搜索        2.迭代加深    思路：          迭代加深其实就是对搜索的搜索深度的限制        因为进行深度搜索的时候，可能会搜得很深，但是实际答案所在的层数很浅        所以就在搜索的时候按照层数来搜        迭代加深            ：1.答案所在层数很小            ：2.搜索深度很大*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">&gt;</span> depth <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> p<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         vector<span class="token operator">&lt;</span><span class="token keyword">bool</span> <span class="token operator">&gt;</span> <span class="token function">st</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> s <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> st<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">||</span> s <span class="token operator">&lt;=</span> p<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> s <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            st<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span>n <span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span> depth <span class="token operator">++</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>depth<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> 迭代加深 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Madoka and the Elegant Gift</title>
      <link href="/2022/03/12/summary/codeforces/20220311-777d2/b-madoka-and-the-elegant-gift/"/>
      <url>/2022/03/12/summary/codeforces/20220311-777d2/b-madoka-and-the-elegant-gift/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-11 22:55:46 * @LastEditTime: 2022-03-12 14:49:40 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1647/problem/B    B. Madoka and the Elegant Gift     题目描述        1.如果矩形的所有格子没有一个是0则是黑色的矩形        2.矩形a包含矩形b里面,当且仅当矩形a的所有格子都包含在矩形b中        3.如果两个矩形有公共的格子，那么两个矩形相交        4.一个矩形是完美的，如果他是黑色并且不包含在黑色的矩形里面        5.如果没有两个相交的完美矩形，那么这个表是优雅的        判断这个表是不是优雅的    Tag：        1.思维题    思路：          找规律题吧        请注意，当且仅当图片是一定数量的不相交矩形时，问题的答案为“是”。现在在这种情况下，让我们看看所有大小为2x2的正方形        注意每个正方形中不可能有3个填充单元格。        同样清楚的是，如果有3个这样的单元，那么就会有两个相交的矩形。因此，你只需要检查是否有一个2 X 2的正方形，其中正好有3个彩色单元格        这思路完全想不出来~~~*/</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> sum <span class="token operator">==</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                   <span class="token keyword">return</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Factorials and Powers of Two</title>
      <link href="/2022/03/11/summary/codeforces/20220304-774d2/c-factorials-and-powers-of-two/"/>
      <url>/2022/03/11/summary/codeforces/20220304-774d2/c-factorials-and-powers-of-two/</url>
      
        <content type="html"><![CDATA[<pre><code class="cpp">/* * @Autor: Zver * @Date: 2022-03-05 14:44:05 * @LastEditTime: 2022-03-11 19:40:05 */#include &lt;fstream&gt;#include &lt;iostream&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;unordered_map&gt;#include&lt;map&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;list&gt;#include&lt;vector&gt;#include&lt;set&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;utility&gt;#define INF_32 int(1e9)+5void f(){exit(0);};#define eps 1e-8typedef long long ll;typedef unsigned long long ull;typedef std::pair&lt;int, int&gt; PII;void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}void TEST(){freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);}using namespace std;/*    https://codeforces.com/contest/1646/problem/C    C. Factorials and Powers of Two    题目描述        给你一个数x，判断这个数 x 可以由最少的数目的ai组成        ai = n! 或 ai = 2^n    Tag:        1.二进制枚举        2.数学知识    思路：        找出所有小于1e12的阶乘        发现才有十几个        然后可以用二进制枚举来判断选择那些阶乘数 sum 然后判断还需要补充多少个2幂次等于x        然后用 判断 (n-sum) 在二进制下有多少个1 就是需要补充的2幂次的个数        对于这种操作可以采用lowbit操作*/#define lowbit(x)  x&amp;(-x)ll ans,len,n;bool st[ 100];vector&lt;ll&gt; pn;map&lt;ll,ll&gt; mp ;void _init(){      ll ct=1;     for(ll i=1;i&lt;=ll(1e12)+10;i=i*ct){        pn.push_back(i);        ct++;    }    // sort(pn.begin(),pn.end());}void _solve(){    ll n ;    cin&gt;&gt;n;    ll  len =pn.size();    ll ans= 1e9;    for(ll i=0;i&lt;1&lt;&lt;len;i++){        ll sum =0;        ll count =0;        for(ll j=0;j&lt;len;j++){            if(i&gt;&gt;j&amp;1){                sum+=pn[j];                count ++;            }        }        if(sum &gt;n)continue;        ll temp = n-sum;        while(temp){            count++;            temp-=lowbit(temp);        }        ans =min(ans,count );    }    cout&lt;&lt;ans&lt;&lt;endl;}int main(){    IOS();    _init();    int t;    cin&gt;&gt;t;    while(t--){        _solve();    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 二进制枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quality vs Quantity</title>
      <link href="/2022/03/11/summary/codeforces/20220304-774d2/b-quality-vs-quantity/"/>
      <url>/2022/03/11/summary/codeforces/20220304-774d2/b-quality-vs-quantity/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-05 14:11:10 * @LastEditTime: 2022-03-11 19:30:13 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1646/problem/B    B. Quality vs Quantity    题目描述        给一段数组染色可以染红色或者蓝色        满足sum(red)&gt;sum(blue) and count (red)  &lt; count (blue)    Tag:        1.枚举题        2.贪心    思路        排序之后从两段开始枚举*/</span><span class="token keyword">void</span> <span class="token function">_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll blue_sum <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ll red_sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/*        10        14 15 15 15 19 16 14 18 16 10        如果判断red_sum  &lt; blue_sum 就退出那么这个数据就不合理    */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        blue_sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        red_sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>red_sum <span class="token operator">&gt;</span> blue_sum <span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">_solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Square Counting</title>
      <link href="/2022/03/11/summary/codeforces/20220304-774d2/a-square-counting/"/>
      <url>/2022/03/11/summary/codeforces/20220304-774d2/a-square-counting/</url>
      
        <content type="html"><![CDATA[<pre><code class="cpp">/* * @Autor: Zver * @Date: 2022-03-05 14:02:53 * @LastEditTime: 2022-03-11 19:24:02 */#include &lt;fstream&gt;#include &lt;iostream&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;unordered_map&gt;#include&lt;map&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;list&gt;#include&lt;vector&gt;#include&lt;set&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;utility&gt;#define INF_32 int(1e9)+5void f(){exit(0);};#define eps 1e-8typedef long long ll;typedef unsigned long long ull;typedef std::pair&lt;int, int&gt; PII;void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}void TEST(){freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);}using namespace std;/*    https://codeforces.com/contest/1646/problem/A    A. Square Counting    题目描述        给你n和s        数组有n+1个数，使得相加总和为s        0 &lt;= ai &lt;= n         ai =n * n        找到可以有多少个数可以是 n*n    Tag:        1.思维题    思路：        直接除 s / (n * n)*/int main(){    IOS();    int n;    cin&gt;&gt;n;    while(n--){        ll a,b;        cin&gt;&gt;a&gt;&gt;b;        int ans=0;        if(b&gt;=a*a){            ans=b/a/a;        }        cout&lt;&lt;ans&lt;&lt;endl;    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twist the Permutation</title>
      <link href="/2022/03/11/summary/codeforces/20220308-776d3/d-twist-the-permutation/"/>
      <url>/2022/03/11/summary/codeforces/20220308-776d3/d-twist-the-permutation/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-09 20:52:08 * @LastEditTime: 2022-03-11 18:45:20 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span>  b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1650/problem/D    D. Twist the Permutation    题目描述        操作：可以对每一个当前的第i个元素将它移到数组头，可以执行任意操作        例如数组为[1,2,3,4,5] 当前i=4         执行次数为1 ： [4,1,2,3,5]        执行次数为2 :  [3,4,1,2,5]        执行次数为3 :  [2,3,4,1,5]        ···        对于初始序列a[i]=i        初始序列能否通过操作变成给出n个数    Tag:        1.思维题        2.枚举题    思路：        1.首先每一个位置 in  ，对于 in 之后的数没有影响        2.所以可以考虑倒着操作        3.也就是说对数值从大到小开始归位        4.首先对数值进行排序，从大到小进行操作        5.对于当前数值所在的位置  in             i表示前i个数的模循环            如果 j 在 in 之前那么他的下标变化为 j - in + i            如果 j 在 in 之后那么他的下标变化为 j - in*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>         vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">int</span> x<span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>             ans<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;</span> x <span class="token operator">?</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> x<span class="token operator">+</span> i<span class="token operator">:</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> x<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>         cout<span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 枚举题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weight of the System of Nested Segments</title>
      <link href="/2022/03/11/summary/codeforces/20220308-776d3/c-weight-of-the-system-of-nested-segments/"/>
      <url>/2022/03/11/summary/codeforces/20220308-776d3/c-weight-of-the-system-of-nested-segments/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-09 00:32:22 * @LastEditTime: 2022-03-11 18:34:15 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1650/problem/C    C. Weight of the System of Nested Segments    题目描述:        要你选择n个区间，m个点，每个点有位置和权值        选择出n个区间，使得每一个区间是嵌套在更大的区间里面        [l1,r1],[l2,r2],[l3,r3]        li&lt;lj&lt;rj&lt;ri        每个区间的值为  w[li]+w[ri]        求出n个区间的最小权重    Tag：        1.贪心        2.排序    思路:        将权值从小到大排序        从前往后选出2*n个点        然后将这些点按照下标大小重新排序            1-r ,2-r-1···        就是n个区间的最小权重 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token punctuation">,</span> m <span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span> n<span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>PII <span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            index<span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>ans<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            <span class="token keyword">int</span> in <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            sum<span class="token operator">+=</span>w<span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>in<span class="token punctuation">,</span>w<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>index<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>index<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIV + MOD</title>
      <link href="/2022/03/11/summary/codeforces/20220308-776d3/b-div-mod/"/>
      <url>/2022/03/11/summary/codeforces/20220308-776d3/b-div-mod/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-08 22:53:34 * @LastEditTime: 2022-03-11 18:23:38 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1650/problem/B    B. DIV + MOD    题目描述        定义操作f(x)=x/a(向下取整)+x%a        给你 l和r和a        求出[l,r] 中操作f(x)的最大值    Tag:        1.数学知识        2.思维题    思路        对于 l , r , a        判断在 1 到 r 中对于a的整数倍的最大可能数 x        取 x 和 r 操作 a 的最大值*/</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>l<span class="token operator">&gt;&gt;</span>r<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span>        <span class="token keyword">int</span> rt<span class="token operator">=</span>r<span class="token operator">/</span>a<span class="token punctuation">;</span>        <span class="token keyword">int</span> num  <span class="token operator">=</span>a<span class="token operator">*</span>rt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span>num <span class="token operator">/</span> a <span class="token operator">+</span> num <span class="token operator">%</span> a<span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span> ans <span class="token punctuation">,</span>r<span class="token operator">/</span>a <span class="token operator">+</span>r<span class="token operator">%</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A. Deletions of Two Adjacent Letters</title>
      <link href="/2022/03/11/summary/codeforces/20220308-776d3/a-deletions-of-two-adjacent-letters/"/>
      <url>/2022/03/11/summary/codeforces/20220308-776d3/a-deletions-of-two-adjacent-letters/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-08 22:43:23 * @LastEditTime: 2022-03-11 18:18:13 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1650/problem/A    A. Deletions of Two Adjacent Letters    题目描述        操作就是你可以任意选择两个相邻的字符删掉        给你一个字符串a和一个字符b        问可以不可以通过操作使得a==b    Tag:        1.思维题    思路:        就判断 a 中等于字符b的字符所在的位置的左右两边是否为偶数*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string a<span class="token punctuation">;</span>    string b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>168. 生日蛋糕</title>
      <link href="/2022/03/08/summary/acwing/suan-fa-ti-gao/sou-suo/sheng-ri-dan-gao/"/>
      <url>/2022/03/08/summary/acwing/suan-fa-ti-gao/sou-suo/sheng-ri-dan-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先这个题目不用考虑π,所以所有公式涉及  π 的不在写出 </p><p>求出最小的表面积</p><p>表面积=侧面积+顶部露出面积</p><p>因为顶部露出面积直接就等于最底下一层的蛋糕的面积$r*r$(这里省略π )下面也如此</p><h4 id="1-优化搜索顺序"><a href="#1-优化搜索顺序" class="headerlink" title="1.优化搜索顺序"></a>1.优化搜索顺序</h4><ul><li>从大枚举到小，因为前面越大，后面可选择的范围就越小</li></ul><h4 id="2-上下界剪枝"><a href="#2-上下界剪枝" class="headerlink" title="2.上下界剪枝"></a>2.上下界剪枝</h4><p>对于每一个r和h的取值范围</p><p>因为从下到上进行搜索,设当前的层数为<code>dep</code>,设当前体积为<code>v</code>,总体积为<code>n</code>,所以前<code>1</code>到<code>dep</code>层的体积为<code>n-v</code>.</p><p>$dep\le r \le r[dep+1]-1$</p><p>$dep\le h \le h[dep+1]-1$</p><p>由体积公式可以知道前<code>1</code>到<code>dep</code>层的体积为$n-v=r\cdot r\cdot h$</p><p>当h为1，可以取到r的最大值，即</p><p>$n-v\ge r^2 $等式转换得到$\sqrt{n-v}\ge r$</p><p>对应的h的取值范围为$\frac{n-v}{r^2}\ge h$</p><p>所以对于r和h的取值范围为</p><p>$dep\le r \le min(\sqrt{n-v},r[dep+1]-1)$</p><p>$dep\le h \le min(\frac{n-v}{r^2},h[dep+1]-1)$</p><h4 id="3-可行性剪枝"><a href="#3-可行性剪枝" class="headerlink" title="3.可行性剪枝"></a>3.可行性剪枝</h4><p>对于1到n层可以预处理出1到n的最小体积和最小面积</p><p>显然对于每一层 i，选择半径为i，高度为i时，有最小的体积和侧面积</p><ul><li>如果 v + minv(1~dep) &gt; n ；<ul><li>说明当前的体积，无论之后体积如何分配都会大于给出的n</li></ul></li></ul><h4 id="4-最优性剪枝1"><a href="#4-最优性剪枝1" class="headerlink" title="4.最优性剪枝1"></a>4.最优性剪枝1</h4><p>对于1到n层可以预处理出1到n的最小体积和最小面积</p><ul><li>如果 s + mins(1~dep) &gt; ans ;<ul><li>ans为已经找出的最大表面积， s为(dep~n)的表面积，如果当前表面积s加上之后的最小表面积</li><li>仍然大于已经找出的答案，所以无法优化答案</li></ul></li></ul><h4 id="5-最优性剪枝2"><a href="#5-最优性剪枝2" class="headerlink" title="5.最优性剪枝2"></a>5.最优性剪枝2</h4><p>$v(1-dep)=\sum^{dep}_{k=1} r_k^{2}\cdot h_k$</p><p>$s(1-dep)=\sum^{dep}_{k=1}2 \cdot h_k \cdot r_k$等式变形得到</p><p>$\frac{2}{r_{dep+1}}\sum^{dep}_{l=1}h_k\cdot r_k$</p><p>$\cdot r_{dep+1}$</p><p>$\ge \frac{2}{r_{dep+1}}\sum^{dep}_{l=1}h_k\cdot r_k^2$</p><p>由上述两式结合得到</p><p>$s(1-dep) \ge \frac{2}{r_{dep}+1}\cdot v(1-dep)$</p><p>所以对于最优答案就有了两个优化</p><p>$s+mins(1-dep)&gt;ans$</p><p>$s+\frac{2}{r_{dep}+1}\cdot v(1-dep) = s+\frac{2}{r_{dep+1}}\cdot (n-v)&gt;ans$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** @Autor: Zver* @Date: 2022-03-08 17:23:00 * @LastEditTime: 2022-03-08 17:46:58*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/170/    168. 生日蛋糕    题目描述            制造一个体积为Nπ的M层生日蛋糕        要求当 i&lt;M 时，要求 Ri&gt;Ri+1 且 Hi&gt;Hi+1。        求最小的表面积    Tag:        1.dfs        2.剪枝    思路：        写在md里*/</span><span class="token keyword">const</span> <span class="token keyword">int</span>  N<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token operator">=</span>INF_32<span class="token punctuation">;</span><span class="token keyword">int</span> R<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>H<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> minv<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> mins<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> s <span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//剪枝3</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">+</span>minv<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//v和最小的v的关系</span>    <span class="token comment">//剪枝4</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> s <span class="token operator">+</span> mins<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment">//s和最小的s的关系</span>    <span class="token comment">//这一层优化不优化其实吧，不遇到强数据也可以过</span>    <span class="token comment">//剪枝5</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> v<span class="token punctuation">)</span> <span class="token operator">/</span> R<span class="token punctuation">[</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//s和当前v的关系 </span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//恰好用完体积</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>n<span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">//剪枝2和1,从大到小枚举和上下界</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token operator">-</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&gt;=</span> u<span class="token punctuation">;</span> r <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>H<span class="token punctuation">[</span>u <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span>v<span class="token operator">/</span>r<span class="token operator">/</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> h <span class="token operator">&gt;=</span> u<span class="token punctuation">;</span> h <span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>m<span class="token punctuation">)</span>  t<span class="token operator">=</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>                R<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>H<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token operator">*</span>h<span class="token operator">+</span>t<span class="token punctuation">,</span>v <span class="token operator">+</span> r<span class="token operator">*</span>r<span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token comment">//剪枝3和4</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        minv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>minv<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>        mins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>mins<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    R<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>INF_32<span class="token punctuation">;</span>    H<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF_32<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span>INF_32<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>         cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> 剪枝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>167. 木棒</title>
      <link href="/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/mu-bang/"/>
      <url>/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/mu-bang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/169/    167. 木棒    题目描述        乔治拿来一组等长的木棒，将它们随机地砍断，使得每一节木棍的长度都不超过 50 个长度单位。        然后他又想把这些木棍恢复到为裁截前的状态，但忘记了初始时有多少木棒以及木棒的初始长度。        请你设计一个程序，帮助乔治计算木棒的可能最小长度。        每一节木棍的长度都用大于零的整数表示。    Tag:        1.dfs    思路：        搜索+剪枝        优化思路        1.优化搜索顺序            木棍长度从大到小排序，先搜长度长的        2.排除等效冗余           2.1.限制后加入的木棍长度是递减的，因为对于y&gt;x,先加x在加y和先加y再加x是等效的           2.2.对于当前的木棍，记录最近一次尝试的拼接的木棍长度，如果是失败的那么就不需要在                去拼接相同长度的木棍           2.3.如果当前原始木棍中，尝试拼接的第一根木棍是失败的，那么这一次必然是失败的                因为该木棍对于空的原始木棍拼接失败，那么对于其余任何木棍都是失败的           2.4.如果当前原始木棍中，拼接入一根木棍后恰好拼接完整==len，这个分支如果失败的话                那么这一次也是必然失败的，这一个剪枝可以用贪心来解释，对于用一个木棍就可以                恰好拼接当前原始木棍，必然比若干根木棍拼接原始木棍更优                        */</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> cnt<span class="token punctuation">,</span> n<span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mlen</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sumv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxv <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxv<span class="token punctuation">,</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumv <span class="token operator">+=</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//剪枝1.1</span>        <span class="token function">sort</span><span class="token punctuation">(</span>mlen<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mlen<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//grounp : 正在拼接第 grounp 原始木棍</span>        <span class="token comment">//cab ： 第grounp根原始木棍的长度</span>        <span class="token comment">//last : 对第grounp根原始木棍上一个拼接木棍的为last</span>        function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> dfs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> grounp<span class="token punctuation">,</span> <span class="token keyword">int</span> cab<span class="token punctuation">,</span> <span class="token keyword">int</span> last<span class="token punctuation">)</span>         <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>grounp<span class="token operator">&gt;</span>cnt<span class="token punctuation">)</span><span class="token comment">//满足条件了</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cab <span class="token operator">==</span> len<span class="token punctuation">)</span>                 <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grounp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//少了个return 我服气</span>            <span class="token keyword">int</span> fail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 剪枝2.2</span>            <span class="token comment">//last 剪枝2.1 从比上一个拼接木棍小的长度开始枚举起</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> last<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> fail <span class="token operator">&amp;&amp;</span> cab <span class="token operator">+</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>grounp<span class="token punctuation">,</span> cab <span class="token operator">+</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    fail <span class="token operator">=</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//剪枝 2.3和2.4</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>cab<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> cab <span class="token operator">+</span> mlen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>len<span class="token punctuation">)</span>                             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>len <span class="token operator">=</span> maxv<span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> sumv<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sumv <span class="token operator">%</span> len<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            cnt <span class="token operator">=</span> sumv <span class="token operator">/</span> len<span class="token punctuation">;</span>            <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数独</title>
      <link href="/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/shu-du/"/>
      <url>/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/shu-du/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-06 17:33:23 * @LastEditTime: 2022-03-06 19:52:51 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/168/    166. 数独    题目描述            给你一个9*9的数独填写数独    Tag:        1.dfs        2.二进制枚举    思路:        每一行，每一列，每一个九宫格的状态用9位的二进制来表示        （优化搜索顺序）每次优先选择，可以选择数量最少的状态来进行填充（剪枝）                常见剪枝手法        1.优化搜索顺序        2.排除等效冗余        3.可行性        4.最优性        5.记忆化搜索*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">;</span><span class="token keyword">int</span> cot<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示每一个状态里面有多少个1，也就是有多少个空位</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示每一个状态对应的数字</span><span class="token keyword">int</span> col<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示每一列的状态</span><span class="token keyword">int</span> row<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示每一行的状态</span><span class="token keyword">int</span> cell<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表示每一个九宫格的状态</span>string s<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span>col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span>cell<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cnt <span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> minv<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token comment">//找出空位最少的状态</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">*</span>N<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> cot<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span> minv <span class="token punctuation">)</span><span class="token punctuation">{</span>                    minv <span class="token operator">=</span>count<span class="token punctuation">;</span>                    x<span class="token operator">=</span>i<span class="token punctuation">,</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取当前空位最少的状态</span>    <span class="token keyword">int</span> state <span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对于每个空位尝试填空</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> state <span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">-=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//当前空位的状态</span>        <span class="token keyword">int</span> v<span class="token operator">=</span><span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前空位对应的数字</span>        <span class="token keyword">int</span> t<span class="token operator">=</span> mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span>        col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span>        cell<span class="token punctuation">[</span>x<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-=</span>v<span class="token punctuation">;</span>          s<span class="token punctuation">[</span>x<span class="token operator">*</span>N<span class="token operator">+</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'1'</span><span class="token operator">+</span>t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        cell<span class="token punctuation">[</span>x<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        s<span class="token punctuation">[</span>x<span class="token operator">*</span>N<span class="token operator">+</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//2的次幂对应的数字</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">,</span>s<span class="token operator">!=</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> num <span class="token operator">=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'1'</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">;</span>                    row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span>v<span class="token punctuation">;</span>                    col<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span>v<span class="token punctuation">;</span>                    cell<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-=</span>v<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                   <span class="token keyword">else</span><span class="token punctuation">{</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>               cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制枚举 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1117. 单词接龙</title>
      <link href="/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/dan-ci-jie-long/"/>
      <url>/2022/03/06/summary/acwing/suan-fa-ti-gao/sou-suo/dan-ci-jie-long/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1119/    AcWing 1117. 单词接龙    题目描述        单词接龙是一个与我们经常玩的成语接龙相类似的游戏。        现在我们已知一组单词，且给定一个开头的字母，要求出以这个字母开头的最长的“龙”，每个单词最多被使用两次。        在两个单词相连时，其重合部分合为一部分，例如 beast 和 astonish ，如果接成一条龙则变为 beastonish。        我们可以任意选择重合部分的长度，但其长度必须大于等于1，且严格小于两个串的长度，例如 at 和 atide 间不能相连。    Tag:        1.dfs    思路：        匹配的过程如何实现        剩下的就是dfs爆搜看最大的长度*/</span>string str<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> newlen<span class="token punctuation">;</span><span class="token keyword">int</span> maxlen<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>string a <span class="token punctuation">,</span>string b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment">//substr(x,y)：x下标开始取y个 (x,x+y-1)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            string x<span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            string y<span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> toge<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>toge<span class="token operator">&amp;&amp;</span> cnt <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            newlen<span class="token operator">+=</span>toge<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>newlen <span class="token operator">&gt;</span> maxlen<span class="token punctuation">)</span> maxlen<span class="token operator">=</span> newlen<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newlen<span class="token operator">-=</span>toge<span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// TEST();</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string start<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>start<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>maxlen<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语</title>
      <link href="/2022/03/03/ke-cheng-lei/ying-yu/"/>
      <url>/2022/03/03/ke-cheng-lei/ying-yu/</url>
      
        <content type="html"><![CDATA[<h2 id="词性"><a href="#词性" class="headerlink" title="词性"></a>词性</h2><h3 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h3><h4 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h4><ul><li>不及物动词</li><li>单及物动词</li><li>双及物动词</li><li>复杂及物动词</li><li>系动词</li></ul><p>上述动词构成简单句的五种类型</p><h4 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h4><ul><li>非谓语动词可以充当除谓语动词外的所有句子成分，取代几乎所有从句，简化句子</li></ul><h3 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h3><h3 id="冠词"><a href="#冠词" class="headerlink" title="冠词"></a>冠词</h3><h3 id="代词"><a href="#代词" class="headerlink" title="代词"></a>代词</h3><h3 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h3><h3 id="数词"><a href="#数词" class="headerlink" title="数词"></a>数词</h3><h3 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h3><h3 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h3><h3 id="叹词"><a href="#叹词" class="headerlink" title="叹词"></a>叹词</h3><h3 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h3><h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><h3 id="主语"><a href="#主语" class="headerlink" title="主语"></a>主语</h3><h3 id="谓语动词-1"><a href="#谓语动词-1" class="headerlink" title="谓语动词"></a>谓语动词</h3><p><strong>动作时间</strong>和<strong>动作状态</strong>排列组合构成了动词时态</p><h4 id="动作时间（Tense）"><a href="#动作时间（Tense）" class="headerlink" title="动作时间（Tense）"></a>动作时间（Tense）</h4><ul><li>现在</li><li>过去</li><li>将来</li><li>过去将来</li></ul><h4 id="动作状态（Aspect）"><a href="#动作状态（Aspect）" class="headerlink" title="动作状态（Aspect）"></a>动作状态（Aspect）</h4><ul><li>一般</li><li>完成</li><li>进行</li><li>完成进行</li></ul><h4 id="动作假设，情感（Mood）"><a href="#动作假设，情感（Mood）" class="headerlink" title="动作假设，情感（Mood）"></a>动作假设，情感（Mood）</h4><h5 id="陈述语气（indicative-Mood）"><a href="#陈述语气（indicative-Mood）" class="headerlink" title="陈述语气（indicative Mood）"></a>陈述语气（indicative Mood）</h5><p>描述现实</p><h5 id="祈使语气（imperative-Mood）"><a href="#祈使语气（imperative-Mood）" class="headerlink" title="祈使语气（imperative Mood）"></a>祈使语气（imperative Mood）</h5><ul><li>第二人称（你）用现在时态</li><li>然后去掉（你），并保证动词的原形</li><li>例如<ul><li>you eat the carrot  和 eat the carrot</li><li>you don’t eat it! 和 don’t eat it</li></ul></li></ul><h5 id="虚拟语气（subjunctive-Mood）"><a href="#虚拟语气（subjunctive-Mood）" class="headerlink" title="虚拟语气（subjunctive Mood）"></a>虚拟语气（subjunctive Mood）</h5><p>虚拟语气基本用于从句中如下情况</p><ul><li><p>描述主观意愿，脑中的情况</p></li><li><p>和现在的事实相反</p></li></ul><p>条件句里动词虚拟语气构成</p><ul><li>should+动词原形 ，而主句也不能用will ，因为要很确定采用将来时态</li></ul><h3 id="宾语"><a href="#宾语" class="headerlink" title="宾语"></a>宾语</h3><h3 id="宾语补语"><a href="#宾语补语" class="headerlink" title="宾语补语"></a>宾语补语</h3><h3 id="主语补语"><a href="#主语补语" class="headerlink" title="主语补语"></a>主语补语</h3><h3 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h3><ul><li>修饰主语或宾语</li></ul><h3 id="状语"><a href="#状语" class="headerlink" title="状语"></a>状语</h3><ul><li>主要用来修饰谓语动词</li></ul><h3 id="同位语"><a href="#同位语" class="headerlink" title="同位语"></a>同位语</h3><ul><li>以另一种方式复述主语或宾语</li></ul><h2 id="简单句类型"><a href="#简单句类型" class="headerlink" title="简单句类型"></a>简单句类型</h2><ul><li>多个简单句并列关系的句子为<strong>并列复合句</strong></li><li>简单句嵌套简单句的句子为<strong>复杂句</strong><ul><li>根据嵌套关系分为主句和从句<ul><li>根据从句简单句充当的句子成分不同又分为多个从句<ul><li>如宾语从句，状语从句等等</li></ul></li></ul></li></ul></li></ul><h3 id="主语-不及物动词"><a href="#主语-不及物动词" class="headerlink" title="主语+不及物动词"></a>主语+不及物动词</h3><ul><li>无需承受者（宾语）</li></ul><h3 id="主语-单及物动词-宾语"><a href="#主语-单及物动词-宾语" class="headerlink" title="主语+单及物动词+宾语"></a>主语+单及物动词+宾语</h3><ul><li>一个宾语，不需要补充信息</li></ul><h3 id="主语-双及物动词-间接宾语-直接宾语"><a href="#主语-双及物动词-间接宾语-直接宾语" class="headerlink" title="主语+双及物动词+间接宾语+直接宾语"></a>主语+双及物动词+间接宾语+直接宾语</h3><ul><li>两个宾语</li></ul><h3 id="主语-复杂及物动词-宾语-（宾语）补语"><a href="#主语-复杂及物动词-宾语-（宾语）补语" class="headerlink" title="主语+复杂及物动词+宾语+（宾语）补语"></a>主语+复杂及物动词+宾语+（宾语）补语</h3><ul><li>一个宾语+补充信息</li></ul><h3 id="主语-系动词-（主语）补语-x2F-表语"><a href="#主语-系动词-（主语）补语-x2F-表语" class="headerlink" title="主语+系动词+（主语）补语/表语"></a>主语+系动词+（主语）补语/表语</h3><ul><li>非动作，赋予信息</li><li>和主谓宾的差别在于动词的表示不同，主谓宾的动词时实义动词</li></ul><h4 id="系动词"><a href="#系动词" class="headerlink" title="系动词"></a>系动词</h4><ul><li><p>表状态</p><ul><li>be</li></ul></li><li><p>感官动词</p><ul><li>look</li><li>smell</li><li>taste</li><li>sound</li><li>feel</li></ul></li><li><p>表变化</p><ul><li>become </li><li>get</li><li>turn</li><li>grow</li><li>fall</li></ul></li><li><p>表保持</p><ul><li>keep</li><li>stay</li><li>remain</li><li>stand</li></ul></li><li><p>表表象</p><ul><li>seem</li><li>appear</li></ul></li></ul><h2 id="16种时态"><a href="#16种时态" class="headerlink" title="16种时态"></a>16种时态</h2><p><a href="https://www.bilibili.com/video/BV1Sv411y7d8?spm_id_from=333.999.0.0">时态视频</a></p><h3 id="现在一般时态"><a href="#现在一般时态" class="headerlink" title="现在一般时态"></a>现在一般时态</h3><h3 id="现在进行时态"><a href="#现在进行时态" class="headerlink" title="现在进行时态"></a>现在进行时态</h3><h3 id="现在进行时态-1"><a href="#现在进行时态-1" class="headerlink" title="现在进行时态"></a>现在进行时态</h3><p>现在正在进行的过程</p><h4 id="现在进行时态构成"><a href="#现在进行时态构成" class="headerlink" title="现在进行时态构成"></a>现在进行时态构成</h4><ul><li>现在进行时态构成<ul><li><strong>助动词be的变位+动词的现在分词</strong></li></ul></li></ul><h3 id="现在完成时态（Present-Perfect-Tence）"><a href="#现在完成时态（Present-Perfect-Tence）" class="headerlink" title="现在完成时态（Present Perfect Tence）"></a>现在完成时态（Present Perfect Tence）</h3><p>现在已经完成了的动作仍对现在有影响</p><h4 id="现在完成时态构成"><a href="#现在完成时态构成" class="headerlink" title="现在完成时态构成"></a>现在完成时态构成</h4><ul><li>现在完成时态的构成<ul><li><strong>助动词have的变位+动词的过去分词</strong></li></ul></li></ul><h4 id="动词的过去分词"><a href="#动词的过去分词" class="headerlink" title="动词的过去分词"></a>动词的过去分词</h4><ul><li>通常变化<ul><li>+ed</li></ul></li><li><h2 id="不规则变化"><a href="#不规则变化" class="headerlink" title="不规则变化"></a>不规则变化</h2></li></ul><h3 id="现在完成进行时态（Present-Perfect-Progreesive-Tense）"><a href="#现在完成进行时态（Present-Perfect-Progreesive-Tense）" class="headerlink" title="现在完成进行时态（Present Perfect Progreesive Tense）"></a>现在完成进行时态（Present Perfect Progreesive Tense）</h3><p>现在不仅完成了一部分，并且还在进行</p><h4 id="现在完成进行时态构成"><a href="#现在完成进行时态构成" class="headerlink" title="现在完成进行时态构成"></a>现在完成进行时态构成</h4><ul><li><p>现在 +（完成+进行）=现在完成时态+现在进行时态</p><ul><li><p>现在完成时态的构成 是 <strong>have的变位+动词过去分词</strong></p></li><li><p>现在进行时态的构成是 <strong>be的变位+动词现在分词</strong></p><ul><li>二则组合成现在完成进行时态</li><li><strong>have的变位+be的过去分词+动词现在分词</strong></li></ul></li></ul></li></ul><h3 id="一般过去时态（Simple-Past-Tense）"><a href="#一般过去时态（Simple-Past-Tense）" class="headerlink" title="一般过去时态（Simple Past Tense）"></a>一般过去时态（Simple Past Tense）</h3><p>相当于过去的一张定格照片，叙述一个事实，对现在没多大影响</p><h4 id="一般过去时态的构成"><a href="#一般过去时态的构成" class="headerlink" title="一般过去时态的构成"></a>一般过去时态的构成</h4><ul><li><strong>动词过去式</strong></li><li>注意：<strong>动词过去式</strong>不等于<strong>动词过去分词</strong></li></ul><h4 id="动词的过去式"><a href="#动词的过去式" class="headerlink" title="动词的过去式"></a>动词的过去式</h4><ul><li>通常变化<ul><li>+ed</li></ul></li><li>不规则变化</li></ul><h3 id="过去进行时态（Past-Progressive-Tense）"><a href="#过去进行时态（Past-Progressive-Tense）" class="headerlink" title="过去进行时态（Past Progressive Tense）"></a>过去进行时态（Past Progressive Tense）</h3><p>相当于过去纪录片播放过程中，过去进行的过程</p><p>过去正在进行的状态</p><h4 id="过去进行时态构成"><a href="#过去进行时态构成" class="headerlink" title="过去进行时态构成"></a>过去进行时态构成</h4><ul><li><strong>助动词be的变位+动词的现在分词</strong><ul><li>相当于现在进行时态的be变位不同</li></ul></li></ul><h3 id="过去完成时态"><a href="#过去完成时态" class="headerlink" title="过去完成时态"></a>过去完成时态</h3><p>过去的的一个点A已经完成的动作，对过去的一个点B得影响</p><h4 id="过去完成时态构成"><a href="#过去完成时态构成" class="headerlink" title="过去完成时态构成"></a>过去完成时态构成</h4><ul><li><strong>助动词have的变位+动词的过去分词</strong><ul><li>和现在完成时态构成的差别就是have的变位</li></ul></li></ul><h3 id="过去完成进行时态"><a href="#过去完成进行时态" class="headerlink" title="过去完成进行时态"></a>过去完成进行时态</h3><p>过去已经完成一部分并且还在继续进行的过程</p><h4 id="过去完成进行时态的构成"><a href="#过去完成进行时态的构成" class="headerlink" title="过去完成进行时态的构成"></a>过去完成进行时态的构成</h4><ul><li>过去+（完成+进行）<ul><li>过去完成时态的构成是 <strong>助动词have的变位+动词过去分词</strong></li><li>过去进行时态的构成是 <strong>助动词be+动词现在分词</strong></li><li>所以二则组成就变成了过去完成进行时态<ul><li><strong>助动词have的变位+be过去分词+动词现在分词</strong></li><li>和现在完成进行时构成区别就是have的变位</li></ul></li></ul></li></ul><h2 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h2><h3 id="动词-1"><a href="#动词-1" class="headerlink" title="动词"></a>动词</h3><h4 id="动词后缀"><a href="#动词后缀" class="headerlink" title="动词后缀"></a>动词后缀</h4><ul><li>ate </li><li>e/te/de/se</li><li>ify</li><li>izen</li><li>en</li><li>y/ye</li></ul><h4 id="动词常用结构"><a href="#动词常用结构" class="headerlink" title="动词常用结构"></a>动词常用结构</h4><h4 id="动词充当的成分"><a href="#动词充当的成分" class="headerlink" title="动词充当的成分"></a>动词充当的成分</h4><h5 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h5><ul><li>时态</li><li>状态</li><li>情态</li></ul><h5 id="非谓语"><a href="#非谓语" class="headerlink" title="非谓语"></a>非谓语</h5><ul><li>动名词: doing</li><li>现在分词:doing</li><li>过去分词:done</li><li>不定式：to do</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>91. 最短Hamilton路径</title>
      <link href="/2022/03/03/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/zui-duan-hamilton-lu-jing/"/>
      <url>/2022/03/03/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/zui-duan-hamilton-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/93/    91. 最短Hamilton路径    题目描述        给定一张 n 个点的带权无向图，点从 0∼n−1 标号，求起点 0 到终点 n−1 的最短 Hamilton 路径。、        Hamilton 路径的定义是从 0 到 n−1 不重不漏地经过每个点恰好一次。    Tag:        1.二进制        2.状态压缩dp    思路:        当前的路线状态压缩进二进制表示        i=1&lt;&lt;n        dp[i][j]: 表示当前的路线状态为i, 且走到j点的最短路线        对于每个走到j点的路线状态，看能否通过k走到j来缩短0到j的距离;*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 状态压缩dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>台阶-NIM游戏</title>
      <link href="/2022/03/03/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/bo-yi-lun/tai-jie-nim-you-xi/"/>
      <url>/2022/03/03/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/bo-yi-lun/tai-jie-nim-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-03 18:59:21 * @LastEditTime: 2022-03-03 19:41:23 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/894/    892. 台阶-Nim游戏    题目描述        现在，有一个 n 级台阶的楼梯，每级台阶上都有若干个石子，其中第 i 级台阶上有 ai 个石子(i≥1)。        两位玩家轮流操作，每次操作可以从任意一级台阶上拿若干个石子放到下一级台阶中（不能不拿）。        已经拿到地面上的石子不能再拿，最后无法进行操作的人视为失败。        问如果两人都采用最优策略，先手是否必胜。    Tag:        1.数学知识        2.博弈论    思路:        此时我们需要将奇数台阶看做一个经典的Nim游戏，如果先手时奇数台阶上的值的异或值为0，则先手必败，反之必胜        证明：        先手时，如果奇数台阶异或非0，根据经典Nim游戏，先手总有一种方式使奇数台阶异或为0，于是先手留了奇数台阶异或为0的状态给后手        于是轮到后手：        ①当后手移动偶数台阶上的石子时，先手只需将对手移动的石子继续移到下一个台阶，这样奇数台阶的石子相当于没变，于是留给后手的又是奇数台阶异或为0的状态        ②当后手移动奇数台阶上的石子时，留给先手的奇数台阶异或非0，根据经典Nim游戏，先手总能找出一种方案使奇数台阶异或为0        因此无论后手如何移动，先手总能通过操作把奇数异或为0的情况留给后手，当奇数台阶全为0时，只留下偶数台阶上有石子。        （核心就是：先手总是把奇数台阶异或为0的状态留给对面，即总是将必败态交给对面）        因为偶数台阶上的石子要想移动到地面，必然需要经过偶数次移动，又因为奇数台阶全0的情况是留给后手的，因此先手总是可以将石子移动到地面，当将最后一个（堆）石子移动到地面时，后手无法操作，即后手失败。        因此如果先手时奇数台阶上的值的异或值为非0，则先手必胜，反之必败！        作者：Anoxia_3        链接：https://www.acwing.com/solution/content/13187/        来源：AcWing        著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  sum<span class="token operator">^=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3421. 异或数列</title>
      <link href="/2022/03/02/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/yi-huo-shu-lie/"/>
      <url>/2022/03/02/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/yi-huo-shu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-02 20:31:17 * @LastEditTime: 2022-03-02 23:24:52 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">int</span> ct <span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/3424/    3421. 异或数列    题目描述：        两个人初始都为0        每个数可以变成 x^a[i]        问先手和后手每个都是最优选择，谁的值最后最大    Tag:        1.博弈论    思路:        偶数-偶数=偶数        偶数-奇数=奇数        奇数-偶数=奇数        谁拥有对最高位为1操作数位为奇数谁就胜利        若最高位的1数量为奇数，那么先手拿了之后，数量变为偶数，        如果n为偶数的话，那么对于最高位为0的有 偶数-奇数=奇数 个可以操作            那么对于后手最优选择就是尽可能选择最高位为0的数，此时对于先手，因为他最高位已经为1，所以先手也是尽可能选最高位为0的数，但是无论如何选，后手总是可以让先手的最            选到最高位为1的数量为偶数，使得先手的高位异或为0        如果n为奇数，那么对于最高位为0的有 奇数-奇数=偶数 个可以操作            那么对于后手无论是先选最高位为0的数还是选最高位为1的数，在偶数次操作后，            必然后手的最高位必然为0若最高位的1数量为偶数，那么先手拿了之后，数量变为奇数无论后手先选最高位为0的数还是选最高位为1的数，最后最高位的值都会抵消掉，        所以如果当最高位的1位奇数时            如果n为偶数，那么后手胜利            如果n为奇数，那么先手胜利          当最高位的1位偶数时          不必考虑当前位，找下一个最高位                            好！！！说了那么多回头再看我本人还是不懂*/</span>void <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ct<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>ct <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span>x<span class="token operator">:</span>a<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>             <span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">^=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3419. 双向排序</title>
      <link href="/2022/03/01/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/shuang-xiang-pai-xu/"/>
      <url>/2022/03/01/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/shuang-xiang-pai-xu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-01 19:02:31 * @LastEditTime: 2022-03-01 20:57:35 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*https://www.acwing.com/problem/content/3422/3419. 双向排序    思路：        1.合并连续操作        2.            如果                当前操作的边界大于上一个同一操作的边界，那么当前操作的前两个操作可以作废            否则                我们只需要处理和上一个操作的交集        3.之后就可以模拟反转操作，由于操作的区间会越来越小，所以时间复杂度不会很大        4.根据操作对于不会在改变的区域进行填数*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>PII sa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//合并连续相同操作</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> top <span class="token operator">&amp;&amp;</span> sa<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">)</span> q<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>sa<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当前操作的边界大于上一个同一操作的边界</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">&gt;=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> sa<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;=</span> q <span class="token punctuation">)</span>  top <span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span>            sa<span class="token punctuation">[</span><span class="token operator">++</span>top <span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//合并连续相同操作</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>top <span class="token operator">&amp;&amp;</span> sa<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> q<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>sa<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当前操作的边界大于上一个同一操作的边界</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span> sa<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&gt;=</span> q<span class="token punctuation">)</span> top<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">;</span>                  sa<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">int</span> k<span class="token operator">=</span> n<span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">ans</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>top<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&gt;</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span>r <span class="token punctuation">)</span>ans<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3494. 国际象棋</title>
      <link href="/2022/03/01/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/guo-ji-xiang-qi/"/>
      <url>/2022/03/01/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/guo-ji-xiang-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-03-01 17:16:40 * @LastEditTime: 2022-03-01 18:09:01 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span>  i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/3497/    3494. 国际象棋    题目描述        他想研究在 N×M 的棋盘上，摆放 K 个马，使得两两之间互不攻击有多少种摆放方案。        由于方案数可能很大，只需计算答案除以 1000000007 (即 109+7) 的余数。    Tag:        1.状压dp    思路:    1.首先数据范围不大，N&lt;6,M&lt;100 所以应该要考虑到dp？    2.然后对于每个位置判断是否合法，判断合法要有两个判断依据    ：该行是否和前一行冲突    ：该行是否和前两行存在冲突          所以在这里我们至少需要三个for循坏来分别枚举当前行，前一行，前两行的状态3.然后要解决的是状态的表示，如何表示该列的位置那些地方有马行数据范围很小，采用二进制枚举状态 1&lt;&lt;N,这样就可以通过位运算定位对应位置的马        dp状态表示        f[i][a][b][k]:前i行时第i-1行的状态为a，第i-1行的状态为a，第i行的马的数量为k        a        b        c        对于c和a 存在冲突的情况就是 a&lt;&lt;1 &amp; c ==1 || c&lt;&lt;1 &amp; a ==1        对于c和b 存在冲突的情况就是 c&lt;&lt;2 &amp; b ==1 || b&lt;&lt;2 &amp; c ==1        对于a和b 存在冲突的情况就是 a&lt;&lt;2 &amp; b ==1 || b&lt;&lt;2 &amp; a ==1*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>K<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//  前前行</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//  前行</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>b<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> b <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//  当前行</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span> c <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">&amp;</span> <span class="token punctuation">(</span>b<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> count  <span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>u<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 马的总数量</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">&gt;</span> count <span class="token punctuation">)</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token operator">-</span>count<span class="token punctuation">]</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>b<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token operator">+</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Differential Sorting</title>
      <link href="/2022/02/28/summary/codeforces/20220220-772d2/c-differential-sorting/"/>
      <url>/2022/02/28/summary/codeforces/20220220-772d2/c-differential-sorting/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-28 20:20:36 * @LastEditTime: 2022-02-28 20:48:26 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1635/problem/C    C. Differential Sorting    题目描述        给你一个长度为n的数组，你可以通过 x,y,z将a[i]=a[x]-a[y]        构造一个非递减数组。输出操作数和具体操作，不要求最小化操作数        可以输出任意一个答案    Tag:        1.贪心    思路：        如果a[n] &gt; a[n-1]，那么就必然不可以        否则            存在a[n-1] &gt; a[n]            我们总是可以通a[n-1] -a[n] 来将之前的所有数变成一样            但是这里要判断a[n]的正负            如果a[n] &lt; 0             那么通过a[n-1]-a[n]得出来的数必然大于a[n-1]，也就意味着我们无法进行操作            */</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字重构</title>
      <link href="/2022/02/27/summary/acwing/zhou-sai/zhou-sai-40/shu-zi-chong-gou/"/>
      <url>/2022/02/27/summary/acwing/zhou-sai/zhou-sai-40/shu-zi-chong-gou/</url>
      
        <content type="html"><![CDATA[<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>```cpp<br>/*</p><ul><li><p>@Autor: Zver</p></li><li><p>@Date: 2022-02-27 13:06:32</p></li><li><p>@LastEditTime: 2022-02-27 13:25:17<br> <em>/<br>#include <fstream><br>#include <iostream><br>#include<queue><br>#include<stack><br>#include<unordered_map><br>#include<map><br>#include<string><br>#include<cstring><br>#include<cstdio><br>#include<list><br>#include<vector><br>#include<set><br>#include<cmath><br>#include<algorithm><br>#include<utility><br>#define INF_32 int(1e9)+5<br>void f(){exit(0);};<br>#define eps 1e-8<br>typedef long long ll;<br>typedef unsigned long long ull;<br>#define rep(i, l, r) for(int i = int(l); i &lt;= int(r); i++)<br>#define FOR(i,r) for(int i=0 ;i&lt;int(r);i++)<br>typedef std::pair&lt;int, int&gt; PII;<br>void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}<br>using namespace std;<br>/</utility></algorithm></cmath></set></vector></list></cstdio></cstring></string></map></unordered_map></stack></queue></iostream></fstream></em><br> <a href="https://www.acwing.com/problem/content/4310/">https://www.acwing.com/problem/content/4310/</a></p><ol start="4307"><li>数字重构<br> 题目描述<br> 给定两个正整数 a 和 b，均不含前导 0。<br> 现在，请你对 a 进行重构，重新排列其各位数字顺序，得到一个不含前导 0 的新正整数。<br> 要求新正整数在不超过 b 的前提下，尽可能大。<br> Tag:<br> 1.贪心<br> 思路：<br> 从高位开始枚举每一位，从9到0判断a中是否存在，如果该位选取了该最大值，之后每一位尽量取最小值能否小于等于b<br>*/<br>int cnt[20];<br>string getMin(int x){<br> string res=to_string(x);<br> cnt[x]–;<br> for(int i=0;i&lt;=9;i++){<br> for(int j =1;j&lt;=cnt[i];j++){<br>  res+=to_string(i);<br> }<br> }<br> cnt[x]++;<br> // cout&lt;&lt;”ans=”&lt;&lt;res&lt;&lt;”\n”;<br> return res;<br>}<br>int main()<br>{<br> string a,b;<br> cin&gt;&gt;a&gt;&gt;b;<br> if(a.size()&lt;b.size()){<br> sort(a.rbegin(),a.rend());<br> cout&lt;&lt;a&lt;&lt;endl;<br> }else{<br> string ans;<br> for(auto x:a )cnt[x-‘0’]++;<br> //当前位<br> for(int i=0;i&lt;a.size();i++){<br>  for(int j=9;j&gt;=0;j–){<br>  if( cnt[j] &amp;&amp; ans+getMin(j) &lt;= b){<br>      ans+=to_string(j);<br>      cnt[j]–;<br>      break;<br>  }<br>  }<br> }<br> cout&lt;&lt;ans&lt;&lt;”\n”;<br> }</li></ol><p> return 0;</p></li></ul><p>}</p>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3418. 杨辉三角形</title>
      <link href="/2022/02/26/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/yang-hui-san-jiao-xing/"/>
      <url>/2022/02/26/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/yang-hui-san-jiao-xing/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="/2022/02/26/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/yang-hui-san-jiao-xing/32DF1F9CE2BD769B8702D3B3F3E6F082.jpg" alt="32DF1F9CE2BD769B8702D3B3F3E6F082"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-25 20:58:23 * @LastEditTime: 2022-02-26 12:10:16 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/activity/content/problem/content/3899/    3418. 杨辉三角形    题目描述        杨辉三角形,求出n第一次出现的位置    Tag:        1.思维题    思路：        左右所以只用看左边        C_32^17&gt;1e9        C_32^16&lt;1e9        反对角线为一行        找16行之内的就行       对于第 i 个斜行最小的为C_k_2k       因为这个斜行是单调并且递增的，所以最坏的情况就是C_n^1       所以可以用二分下界 r = max(2k,n)*/</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//  组合数</span>ll <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll ans <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a <span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span>ans  <span class="token operator">*</span>i<span class="token operator">/</span>j<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll l <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>n<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span>        ll mid <span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token operator">&gt;=</span>n<span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token operator">!=</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span> r<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token comment">//  倒着找第i个斜行</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3417. 砝码称重</title>
      <link href="/2022/02/25/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/fa-ma-cheng-chong/"/>
      <url>/2022/02/25/summary/acwing/lan-qiao-bei/shi-er-jie-yi-chang-abc-zu-zhen-ti/fa-ma-cheng-chong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-25 19:57:09 * @LastEditTime: 2022-02-25 20:09:59 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/3420/    3417. 砝码称重    题目描述        你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1,W2,···,WN。        请你计算一共可以称出多少种不同的正整数重量？        注意砝码可以放在天平两边。    Tag:        1.dp    思路：        对于每个物品要么放在左边要么放在右边要么都不放        那么就可以分成三个集合        1.左边 -        2.右边 +         3.不放 0        f[i][j]: 前i个物品中重量为j*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>sum<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sum*2 </span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/"/>
      <url>/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机系统概论"><a href="#计算机系统概论" class="headerlink" title="计算机系统概论"></a>计算机系统概论</h2><h3 id="计算机发展与应用"><a href="#计算机发展与应用" class="headerlink" title="计算机发展与应用"></a>计算机发展与应用</h3><h4 id="摩尔"><a href="#摩尔" class="headerlink" title="摩尔"></a>摩尔</h4><p>1965年，英特尔公司创始人之一戈登·摩尔提出摩尔定律：集成电路上可容纳的晶体管数量每18个月翻一番，性能提高一倍，价格降低一半。表现在</p><ul><li>单个芯片集成度提高后，成本变化不大，因此总体成本总体下降</li><li>高度集成的芯片中，电路间的距离更近，工作速度跟高</li><li>增加了芯片内部的连接，从而减少了外部连线，可靠性提高</li><li>计算机变得更小，减少了电能消耗，适应性更好</li></ul><h4 id="多核处理器"><a href="#多核处理器" class="headerlink" title="多核处理器"></a>多核处理器</h4><h5 id="何为多核技术"><a href="#何为多核技术" class="headerlink" title="何为多核技术"></a>何为多核技术</h5><p>多核技术是通过在一个芯片上集成多个简单的处理器以充分利用这些晶体管资源，以发挥其最大能效</p><h5 id="多核技术的优点"><a href="#多核技术的优点" class="headerlink" title="多核技术的优点"></a>多核技术的优点</h5><p>- </p><p>- </p><h3 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h3><h4 id="冯·诺伊曼体系"><a href="#冯·诺伊曼体系" class="headerlink" title="冯·诺伊曼体系"></a>冯·诺伊曼体系</h4><p>20世纪40年代，美国科学家（John von Neumann）</p><ul><li>存储程序和程序控制是冯诺依曼型计算机的<strong>主要设计思想</strong></li></ul><p>根据冯·诺依曼的设计思想，计算机的硬件系统应该包含如下</p><h5 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h5><ul><li>运算器是一种用于信息加工的部件，对数据进行算术运算和逻辑运算</li><li>运算器通常由<strong>算术逻辑部件（ALU）</strong>和<strong>一系列寄存器</strong>组成</li><li>运算器一次运算处理的二进制位数称为<strong>字长</strong></li></ul><h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><ul><li>控制器是全机的指挥中心，使计算机各部件协调工作</li><li><strong>控制器工作的实质就是解释程序</strong></li><li>计算机由两股信息在流动<ul><li>一股是<strong>控制信息</strong>，即操作命令，分散流向各个部件</li><li>一股是<strong>数据信息</strong>，受控制信息控制，从一个部件流向另一个部件</li></ul></li></ul><h5 id="存储器（主存储器）"><a href="#存储器（主存储器）" class="headerlink" title="存储器（主存储器）"></a>存储器（主存储器）</h5><ul><li><strong>存储器的主要功能</strong>：存放程序和数据</li></ul><h5 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h5><ul><li><strong>输入设备</strong>是将信息输入到计算机的外部设备</li></ul><h5 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h5><ul><li><strong>输出设备</strong>是将计算机运算结果转换成人们能够接收和识别的设备</li></ul><p><strong>其中运算器和控制器合称为中央处理器（Central Processing Unit）</strong></p><h4 id="计算机硬件系统"><a href="#计算机硬件系统" class="headerlink" title="计算机硬件系统"></a>计算机硬件系统</h4><ul><li><strong>计算机硬件系统（Hardware System）</strong>是指构成计算机系统的电子线路和电子元件等物理设备的总称<ul><li>硬件是构成计算机的物质基础，是计算机系统的核心</li></ul></li></ul><h4 id="计算机软件系统"><a href="#计算机软件系统" class="headerlink" title="计算机软件系统"></a>计算机软件系统</h4><p><strong>计算机的软件</strong>是将解决问题的方法，思想和过程用程序进行描述，因此程序是软件的核心组成部分</p><ul><li>一台计算机全部程序的集合，统称为这台<strong>计算机的软件系统</strong></li></ul><h5 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h5><p>系统软件是用于对计算机系统的管理调度，监视和服务等功能目的是为了方便用户，提高计算机使用效率，扩充系统功能</p><ul><li><strong>操作系统</strong><ul><li>操作系统是管理计算机各种资源，调度用户作业，处理各种中断的软件</li><li>操作系统管理的资源，通常由硬件，软件和数据信息。</li></ul></li><li><strong>语言处理程序</strong><ul><li>计算机识别的语言，它们都各自规定了一套基本符号和语法规则，用这些语言编制的程序叫做<strong>源程序</strong></li><li>用<strong>0</strong>或<strong>1</strong>的机器代码按照一定的规则组成的语言，称为<strong>机器语言</strong></li><li>用<strong>机器语言</strong>编制的程序，称为<strong>目标程序</strong></li><li>语言处理程序的作用就是把<strong>源程序</strong>翻译成<strong>目标程序</strong></li></ul></li><li><strong>标准程序库</strong><ul><li>为方便用户，通常将一些常用的程序段按照标准的格式事先编制好，组成一个标准程序库，使得用户可以直接调用</li><li>封装函数</li></ul></li><li><strong>服务性程序</strong><ul><li>服务性程序，提过多种计算机系统运行所需的服务功能，是一种辅助计算机工作的程序</li><li>例如程序的装入，连接，编辑，诊断故障程序，纠错程序，监督程序</li></ul></li><li><strong>数据库管理系统（Database Management System DBMS）</strong><ul><li>DBMS用来管理系统中的所有文件，实现数据共享</li></ul></li><li><strong>计算机网络软件</strong><ul><li>计算机网络软件是为计算机网络配置的系统软件</li></ul></li></ul><h5 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h5><p><strong>应用软件</strong>是用户为解决某个应用问题而编制的一些程序</p><h3 id="计算机的性能指标"><a href="#计算机的性能指标" class="headerlink" title="计算机的性能指标"></a>计算机的性能指标</h3><h4 id="基本性能指标"><a href="#基本性能指标" class="headerlink" title="基本性能指标"></a>基本性能指标</h4><h5 id="字长"><a href="#字长" class="headerlink" title="字长"></a>字长</h5><ul><li>运算器一次运算处理的二进制位数称为<strong>字长</strong></li><li>字长一般以<strong>Byte</strong>为单位</li><li>字长对于计算机性能的影响<ul><li>影响运算精度</li><li>影响数据的表示范围</li><li>影响运算速度</li></ul></li></ul><h5 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h5><ul><li><strong>主存容量</strong>指主存能存储的最大信息量</li><li>一般用M<em>N表示，其中M 表示存储单元个数<strong>（字容量）</strong>，N表示每个存储单元存储的二进制位数*<em>（位容量）</em></em></li><li>增加主存容量可以减少程序运行期间访问辅助存储器的次数，从而提高程序的执行速度，利于计算机性能的提高</li></ul><h4 id="于执行时间有关的性能指标"><a href="#于执行时间有关的性能指标" class="headerlink" title="于执行时间有关的性能指标"></a>于执行时间有关的性能指标</h4><h5 id="时钟周期"><a href="#时钟周期" class="headerlink" title="时钟周期"></a>时钟周期</h5><ul><li><p><strong>时钟周期</strong>是时钟频率的倒数，是处理操作的最基本时间单位</p></li><li><p><strong>1Hz</strong>：表示每秒1024个时钟周期</p></li><li><p><strong>主频</strong>：cpu 的时钟频率</p></li><li><p><strong>外频</strong>：系统总线的时钟工作频率</p></li><li><p>主频 = 外频 * 倍频</p></li></ul><h5 id="CPI（Clock-cycles-Per-Instruction）"><a href="#CPI（Clock-cycles-Per-Instruction）" class="headerlink" title="CPI（Clock cycles Per Instruction）"></a>CPI（Clock cycles Per Instruction）</h5><ul><li><strong>CPI</strong>：执行每条指令所需要的平均时钟周期的个数</li></ul><p>根据CPI的定义，可以得到CPI的计算公式</p><p>$$CPI=\frac {程序执行需要的CPU时钟周期个数和}{程序包含的指令条数}$$</p><h5 id="CPU时间"><a href="#CPU时间" class="headerlink" title="CPU时间"></a>CPU时间</h5><ul><li><strong>CPU时间</strong>：计算某个任务时CPU实际消耗的时间<ul><li>该时间不包括等待输入输出的时间，指汇编语言程序中包含的每条指令执行时间的总和</li></ul></li></ul><p>根据CPU时间的定义，可以到的CPU时间的计算公式</p><p>$$CPU时间=程序中所有指令的CPU时钟周期个数的和\cdot CPU的时钟周期 $$</p><p>根据时钟频率为时钟周期的倒数，公式等价于</p><p>$$CPU时间=\frac{程序中所有指令的CPU时钟周期个数和}{CPU的时钟频率} $$</p><p>引入<strong>CPI的公式</strong>，公式可以等价变形为</p><p>$$CPU时间=\frac{CPI\cdot 指令条数}{CPU的时钟频率}=CPI\cdot 指令条数 \cdot CPU的时钟周期$$</p><p>这个公式就是由英特尔得出的并被广泛认可的<strong>CPU全性能公式</strong></p><ul><li>这个公式从CPU的主频，指令的CPI和程序中的指令数量等多个方面来综合评价计算机的性能</li><li>根据这个公式可以看出CPU的性能于计算机体系的关系<ul><li><strong>时钟的频率</strong>反应了计算机的实现技术和生产工艺</li><li><strong>CPI</strong>反应了计算机的实现技术和指令集架构</li><li><strong>指令条数</strong>反应了计算机指令系统的设计和编译技术</li></ul></li></ul><h5 id="4-MIPS（Million-Instruction-Per-Second）"><a href="#4-MIPS（Million-Instruction-Per-Second）" class="headerlink" title="4.MIPS（Million Instruction Per Second）"></a>4.MIPS（Million Instruction Per Second）</h5><ul><li><strong>MISP</strong>：即每秒百万条指令，每秒完成的指令数量作为指标，<strong>单位为百万条</strong></li><li>用每秒执行完成的指令数量作为衡量计算机性能的一个标准，</li></ul><p>根据MISP的定义，可以得到如下的公式计算MISP</p><p>$$MISP=\frac{指令条数}{CPU时间\cdot 10^6}$$</p><p>代入CPI的定义，公式可以等价变形得</p><p>$$MISP=\frac{1}{\frac{CPU}{指令条数}\cdot10^6}=\frac{1}{CPI\cdot 时钟周期\cdot 10^6}=\frac{时种频率}{CPI\cdot 10^6}$$</p><p>从这个公式看，在用MISP作为衡量系统性能的时候要注意一下问题</p><ul><li>该指标没有考虑不同的指令在功能和执行速度上的差异性即</li></ul><h5 id="5-MFLOPS（Million-Floting-Point-Operations-Per-Second）"><a href="#5-MFLOPS（Million-Floting-Point-Operations-Per-Second）" class="headerlink" title="5.MFLOPS（Million Floting-Point Operations Per Second）"></a>5.MFLOPS（Million Floting-Point Operations Per Second）</h5><ul><li><strong>MFLOPS</strong> ：描述的是计算机每秒运行的浮点操作次数</li></ul><h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><h4 id="计算机系统的层级结构简介"><a href="#计算机系统的层级结构简介" class="headerlink" title="计算机系统的层级结构简介"></a>计算机系统的层级结构简介</h4><ul><li><p>高级语言级</p><ul><li>面向应用</li></ul></li><li><p>汇编语言级</p><ul><li><p>面向应用</p></li><li><p>为用户提供的一种助记符表示的汇编编程工具，相较操作系统级更容易理解记忆</p></li><li><p>从而方便用户使用和管理计算机，该级由汇编语言执行和支持</p></li></ul></li><li><p>操作系统级</p><ul><li>面向机器</li><li>操作系统定义和解释的软件指令</li></ul></li><li><p>机器语言级</p><ul><li><p>面向硬件机器</p></li><li><p>该层的功能由下一层的微程序解释实现</p></li></ul></li><li><p>微程序设计级</p><ul><li>面向硬件机器</li></ul></li></ul><p><strong>将计算机系统分成多级层次结构的目的在于</strong></p><ul><li>分清各层次结构之间的界面，明确各自功能</li><li>构成更合理，高效的计算机系统</li></ul><h4 id="各层之间的关系"><a href="#各层之间的关系" class="headerlink" title="各层之间的关系"></a>各层之间的关系</h4><h4 id="硬件和软件逻辑功能的等价性"><a href="#硬件和软件逻辑功能的等价性" class="headerlink" title="硬件和软件逻辑功能的等价性"></a>硬件和软件逻辑功能的等价性</h4><p>计算机的硬件往往实现的就是最基本的算术运算和逻辑运算功能，而其他功能大多都是根据软件的扩充而实现的</p><ul><li>有许多功能可以通过硬件实现，也可以通过软件实现，从用户的角度看来，它们的功能上是等价的，这一等价性就被称为<strong>软硬件的逻辑功能的等价性</strong></li><li>例如乘法运算可以通过硬件一步实现，但是也可以通过加法运算来扩充得到</li></ul><p><strong>软硬件的逻辑等价性是计算机系统设计的重要依据</strong></p><h2 id="数据信息的表示"><a href="#数据信息的表示" class="headerlink" title="数据信息的表示"></a>数据信息的表示</h2><h3 id="数据表示的目的及设计数据格式应该考虑的因素"><a href="#数据表示的目的及设计数据格式应该考虑的因素" class="headerlink" title="数据表示的目的及设计数据格式应该考虑的因素"></a>数据表示的目的及设计数据格式应该考虑的因素</h3><ul><li>数据类型</li><li>数据表示范围和精度</li><li>存储和处理的代价</li><li>软件的可移植性</li></ul><h3 id="数值数据的表示"><a href="#数值数据的表示" class="headerlink" title="数值数据的表示"></a>数值数据的表示</h3><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>注意数学公式里面的x是真值</p><p><strong>定点小数</strong></p><p>对于定点小数x的原码表现形式为$x_0.x_1x_2x_3····x_n$,其中$x_0$为符号位，小数原码的定义为<br>$$<br>[x]_原=\begin{cases}<br>x,&amp; 0\le x &lt; 1  \<br>1+ \vert x\vert ,&amp; -1&lt;x\le 0<br>\end{cases}<br>$$<br>$最大正数：0.1111···11;1-2^{-n}$ </p><p>$最小负数：1.111···11;-(1-2^{-n})$</p><p><strong>定点整数</strong></p><p>对于定点整数x的原码表示形式为$x_0x_1x_2x_3····x_n$，其中$x_0$为符号位，整数原码的定义为<br>$$<br>[x]_{原}=<br>\begin{cases}<br>x,&amp; 0\le x &lt; 2^n\<br>2^n+\vert x\vert ,&amp; -2^n &lt; x \le 0<br>\end{cases}<br>$$</p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p><strong>定点小数</strong></p><p>如果定点小数x的反码形式为$x_0.x_1x_2x_3···x_n$，其中$x_0$为符号位，反码的定义为<br>$$<br>[x]_{反}=<br>\begin{cases}</p><p>\end{cases}<br>$$</p><p><strong>定点整数</strong></p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p><strong>定点小数</strong></p><p><strong>定点整数</strong></p><h4 id="定点小数"><a href="#定点小数" class="headerlink" title="定点小数"></a>定点小数</h4><h4 id="定点整数"><a href="#定点整数" class="headerlink" title="定点整数"></a>定点整数</h4><h4 id="定点数的数据表示范围"><a href="#定点数的数据表示范围" class="headerlink" title="定点数的数据表示范围"></a>定点数的数据表示范围</h4><h3 id="数据信息的校验"><a href="#数据信息的校验" class="headerlink" title="数据信息的校验"></a>数据信息的校验</h3><h4 id="码距"><a href="#码距" class="headerlink" title="码距"></a>码距</h4><p>一组编码中任何两个编码之间代码不同的位数称为两个编码的距离，简称<strong>码距</strong></p><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>判断有效信息包含校验位中1的个数的奇偶性</p><p>奇校验：</p><p>$C=\overline{x_1\oplus x_2 \oplus ··· \oplus x_n} $</p><p>偶校验：</p><p>$C=x_1\oplus x_2 \oplus ··· \oplus x_n $</p><h4 id="海明校验"><a href="#海明校验" class="headerlink" title="海明校验"></a>海明校验</h4><h5 id="海明校验的基本思想"><a href="#海明校验的基本思想" class="headerlink" title="海明校验的基本思想"></a>海明校验的基本思想</h5><h5 id="海明校验的校验位数的求法"><a href="#海明校验的校验位数的求法" class="headerlink" title="海明校验的校验位数的求法"></a>海明校验的校验位数的求法</h5><p>信息位+校验位</p><p>如果信息位为n，校验位为k</p><p>那么k个校验位可以表示出2^k种状态</p><p>如果要求海明码可以检错一位并且可以纠错一位,所以有如下要求</p><p>$2^k &gt; n+k+1$</p><p>其中+1代表一个正确状态</p><p>如果要求海明码可以检错两位并且可以纠错一位，有如下满足关系式</p><p>$2^{k-1}\ge k+n$</p><h5 id="海明校验求解过程"><a href="#海明校验求解过程" class="headerlink" title="海明校验求解过程"></a>海明校验求解过程</h5><ul><li>确定校验位个数</li><li>求校验位<ul><li>将信息位的位置序号用k位二进制数表示出来</li><li>校验位pi与位置序号第i位为1的信息位归位同一组，进行偶校验<ul><li>如p1=001表示 x&gt;&gt;1&amp;1 归为p1</li><li>如p2=010 表示 x&gt;&gt;2&amp;1 归为p2</li><li>如p3=100 表示 x&gt;&gt;3&amp;1 归为p3</li></ul></li></ul></li><li>纠错<ul><li>对p1,p2,p3进行分组进行异或（相当于分组偶校验）求得s1,s2,s3</li><li>s3s2s1=000，说明无误</li><li>s3s2s1!=000 ,其对应十进制的值就是出出错位置</li></ul></li><li>补充<ul><li>海明码只有<strong>一位纠错</strong>和<strong>两位检错</strong>能力</li><li>为了区分1位错还是两位错，还需要添加全校验位对整体进行偶校验，使得海明码的1的个数为偶数个<ul><li>如果s3s2s1=000,并且全体偶校验成功，说明无错误</li><li>如果s3s2s1!=000，并且全体偶校验失败,说明有一个错误</li><li>如果s3s2s1!=000，并且全体偶校验成功，说明有两个错误</li></ul></li></ul></li></ul><h4 id="循环冗余校验码（Cylic-Redundancy-Check-CRC）"><a href="#循环冗余校验码（Cylic-Redundancy-Check-CRC）" class="headerlink" title="循环冗余校验码（Cylic Redundancy Check,CRC）"></a>循环冗余校验码（Cylic Redundancy Check,CRC）</h4><blockquote><p>CRC码的基本思想</p></blockquote><p>需要对发送方的数据M左移r位可表示$M*2^r$右边的r用来放置校验位也就是余数</p><ul><li>r &gt; log2(k)：这里k表示有效信息位数</li></ul><p>约定一个多项式作为被除数，使得发送方的数据对多项式做除法取得余数</p><ul><li><p>那么<em>发送方</em>的数据=发送方的数据+余数</p></li><li><p>那么<em>接收方</em>接收的数据去除约定的多项式</p></li></ul><p>如果余数为0说明数据无误，否则数据有误</p><blockquote><p>CRC码的构造</p></blockquote><ul><li><p>R&gt;log2(K)，其中K为有效信息位数，R为校验位位数</p></li><li><p>K个信息位+R个0，作为被除数</p></li><li><p>生成多项式，作为除数</p></li><li><p>被除数，除数进行“模二除”，可以得到R位余数</p><ul><li>“模二除”：如果被除数最高位为1，商上1，否则商上0，做异或运算</li></ul></li><li><p>K个信息位+R位余数=CRC码</p></li></ul><blockquote><p>CRC码的检错纠错</p></blockquote><p>理论上可以证明CRC的检错能力有以下特点</p><ul><li>可以检测出所有奇数个错误</li><li>可以检测出所有双比特的错误</li><li>可以检测出所有小于等于校验位长度的连续错误</li><li>K个信息位和R个校验位，如果生成的多项式选择得当，且$2^R\ge K +R+1$，那么CRC码可以纠正1位错但是实际应用中一般只是用来检错</li></ul><h2 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h2><p>计算机所有功能的实现就是各种信息在计算机内各大功能部件之间进行交换的过程，</p><p>因此必须在部件之间构筑信息传输的公共通路，即<strong>总线</strong></p><h3 id="总线的基本概念"><a href="#总线的基本概念" class="headerlink" title="总线的基本概念"></a>总线的基本概念</h3><p><strong>总线</strong>是连接各个部件的信息传输线是各个部件共享的传输介质</p><h4 id="总线的传输方式"><a href="#总线的传输方式" class="headerlink" title="总线的传输方式"></a>总线的传输方式</h4><p><strong>总线的传输方式</strong>有串行和并行</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220319140926922.png" alt="image-20220319140926922"></p><h5 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h5><p><strong>串行传输</strong>指一个单元信息从低位到高位的的顺序逐位以脉冲方式传送</p><ul><li>串行传输的特点<ul><li>只需要一条传输线，成本低</li><li>远距离传输的时候采用这种方式比较经济，但是串行传输速度慢</li></ul></li></ul><h5 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h5><p><strong>并行传输</strong>指一个信息的所有位同时传送，每位都有各自的传输线，互不干扰，一次传送整个信息</p><ul><li>并行传输一般采用电位传输法，位的次序由传输线排序而定</li></ul><h5 id="并串行传输"><a href="#并串行传输" class="headerlink" title="并串行传输"></a>并串行传输</h5><p><strong>并串行传输</strong>是指将被传送信息分成若干组，组内采用并行传送，组间采用串行传送。</p><ul><li>并串行传输是对传送速度和传输线数进行折中的传输方式</li></ul><h5 id="分时传送"><a href="#分时传送" class="headerlink" title="分时传送"></a>分时传送</h5><ul><li>分时传送有两个含义</li><li>一个是采用<strong>总线复用</strong>，也就是指的是在某个传输线上既传输传送地址信息，又传送数据信息，<ul><li>目的是减少线数，为此划分时间片 ，使得在不同的时间间隔内完成传送地址和传送数据的任务</li></ul></li><li>一个是共享总线的部分<strong>分时使用总线</strong>，指的是总线通常只为目标部件和目的部件单一服务，所以多个部件要求使用总线时候，只能由总线控制按时间片分时提供服务</li></ul><h4 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h4><h5 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h5><ul><li><strong>片内总线</strong>：是指芯片内部各组成部分之间的连接线</li><li>如寄存器与寄存器之间，寄存器与算数逻辑单元之间，cpu芯片内部</li></ul><h5 id="系统总线-1"><a href="#系统总线-1" class="headerlink" title="系统总线"></a>系统总线</h5><ul><li><p><strong>系统总线</strong>是指连接cpu，主存，IO模块等主要部件之间的信息传输</p></li><li><p>按照传输的类型不同可以分为三类</p><ol><li><p><strong>数据总线</strong></p><ul><li>数据总线用来传输各功能部件之间的数据信息</li><li>数据总线是双向传输总线</li></ul></li><li><p><strong>地址总线</strong></p><ul><li>地址总线主要用来指出数据总线上的源数据或者主存单元的地址</li><li>地址总线是单向传输总线</li></ul></li><li><p><strong>控制总线</strong></p><ul><li>控制总线是各种控制信号的传输线</li><li>常见的控制信号有<ul><li>时钟</li><li>复位</li><li>中断请求</li><li>中断确认</li></ul></li></ul></li></ol></li></ul><h5 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h5><ul><li>这类总线主要用于计算机和IO设备之间的或计算机系统与其他系统之间的通信</li><li>因为系统之间不同部件的差异很大，所以这类总线的涉及内容很广</li><li>按照通信总线连接线由可以划分以下两种<ul><li>串行通信总线</li><li>并行通信总线</li></ul></li></ul><h4 id="总线的特性"><a href="#总线的特性" class="headerlink" title="总线的特性"></a>总线的特性</h4><ol><li><p><strong>物理特性</strong></p><ul><li>物理特性：尺寸，形状，管脚数以及排列顺序</li></ul></li><li><p><strong>功能特性</strong></p><ul><li>功能特性：每个传输线的功能（包含地址，数据，控制）</li></ul></li><li><p><strong>电气特性</strong></p><ul><li>电器特性：传输方向和有效的电平范围</li></ul></li><li><p><strong>时间特性</strong></p><ul><li>时间特性： 信号的时序关系</li></ul></li></ol><h4 id="信号线的类型"><a href="#信号线的类型" class="headerlink" title="信号线的类型"></a>信号线的类型</h4><ul><li><strong>专用信号线</strong><ul><li>专用信号线用于传输一种信号</li></ul></li><li><strong>复用信号线</strong><ul><li>复用线指一组传输线具有多种用途，分时（时间片）传送不同类型的信息</li></ul></li></ul><p><strong>总线复用可以提高总线的利用率，节省布线空间和降低成本，但是对需要采用并行传输来实现</strong></p><p><strong>部件功能的或提高传输性能的场合，就不宜采用复用方式</strong></p><h4 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h4><ol><li><strong>总线宽度</strong><ul><li>总线宽度指数据总线的根数，用bit表示，如16位，32位，64位</li></ul></li><li><strong>波特率</strong><ul><li>信道上每秒钟传送的码元（波形）个数</li></ul></li><li><strong>比特率</strong><ul><li>每秒通过信道传输的信息量称为比特</li></ul></li><li><strong>总线传输周期</strong><ul><li>指一次总线操作需要的时间，简称总线周期，其中包括有<ul><li>总线申请阶段</li><li>寻址阶段</li><li>传输阶段</li><li>结束阶段</li></ul></li></ul></li><li><strong>总线带宽</strong></li></ol><h4 id="总线的事务"><a href="#总线的事务" class="headerlink" title="总线的事务"></a>总线的事务</h4><ul><li><strong>总线事务</strong>：总线上一对设备之间的一次信息交换过程称为事务</li><li>一次总线事务一般包括地址阶段和数据阶段</li><li>如突发传送事务则由一个地址阶段和多个数据阶段完成</li><li></li></ul><h3 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h3><h4 id="单总线结构"><a href="#单总线结构" class="headerlink" title="单总线结构"></a>单总线结构</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318101637169.png" alt="image-20220318101637169"></p><ol><li>单总线<strong>优点</strong><ul><li>主存和外设统一编址，省去一类IO指令，简化了指令系统</li><li>总线结构简单，灵活，易于扩充</li></ul></li><li>单总线的<strong>不足</strong><ul><li>主存和外设采用统一编址，减少了主存的地址空间</li><li>高速设备和低速设备连接在同一组总线上，高速设备的高速特性得不到发挥</li><li>总线只能被分时使用，通信速度慢</li><li>任何两部间之间的信息传递共用一条总线，系统总线负载重，系统性能低</li></ul></li></ol><h4 id="双总线结构"><a href="#双总线结构" class="headerlink" title="双总线结构"></a>双总线结构</h4><p>以主存为中新，在cpu和主存之间连接着主存总线，cpu可以直接通过主存总线来访问主存，而访问外部IO，则需要通过与通道进行信息传递，IO设备之间的通信通过IO总线进行</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318101837236.png" alt="image-20220318101837236"></p><h4 id="三总线结构"><a href="#三总线结构" class="headerlink" title="三总线结构"></a>三总线结构</h4><p>DMA（Direct Memory Access）总线负责高速设备和主存的信息传递</p><p>通过DMA总线区分高速IO设备和低速设备</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318101930962.png" alt="image-20220318101930962"></p><p>Cpu发展很快，但是主存发展的很慢，Cache作为一个高缓存的存储芯片通过系统总线和主存连接</p><p>然后CPU通过局部总线连接Cache通过Cache读取主存的信息</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318101946543.png" alt="image-20220318101946543"></p><h4 id="四总线结构"><a href="#四总线结构" class="headerlink" title="四总线结构"></a>四总线结构</h4><p>四总线结构就是多加了一条高速总线来提供给高速的IO设备，区分低速和高速设备</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318102103774.png" alt="image-20220318102103774"></p><h4 id="传统微型机总线结构"><a href="#传统微型机总线结构" class="headerlink" title="传统微型机总线结构"></a>传统微型机总线结构</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318102221075.png" alt="image-20220318102221075"></p><h4 id="VL-BUS（VESA（Video-Electronics-Standard-Association）-Local-BUS）局部总线结构"><a href="#VL-BUS（VESA（Video-Electronics-Standard-Association）-Local-BUS）局部总线结构" class="headerlink" title="VL-BUS（VESA（Video Electronics Standard Association） Local-BUS）局部总线结构"></a>VL-BUS（VESA（Video Electronics Standard Association） Local-BUS）局部总线结构</h4><p>通过VL-BUS连接高速IO设备，通过VL-BUS连接标准总线控制器连接低速IO设备</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318102247281.png" alt="image-20220318102247281"></p><h4 id="PCI总线结构"><a href="#PCI总线结构" class="headerlink" title="PCI总线结构"></a>PCI总线结构</h4><p>PCI主要连接的高速设备，再通过连接一个标准总线控制器，来连接普通设备</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318102328322.png" alt="image-20220318102328322"></p><h4 id="PCI（Peripheral-Component-Interconnect）多层总线结构"><a href="#PCI（Peripheral-Component-Interconnect）多层总线结构" class="headerlink" title="PCI（Peripheral Component Interconnect）多层总线结构"></a>PCI（Peripheral Component Interconnect）多层总线结构</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318102424647.png" alt="image-20220318102424647"></p><h4 id="高性能总线"><a href="#高性能总线" class="headerlink" title="高性能总线"></a>高性能总线</h4><ul><li><p>总线总体发展趋势</p><ul><li><p>采用分层次的多总线结构，不同层次总线之间采用桥接方式进行连接和缓冲</p></li><li><p>将IO设备与主存之间的通信与处理器的活动分离开来</p></li><li><p>高速设备靠近CPU，低数设备远离CPU</p></li></ul></li></ul><h3 id="总线的仲裁（控制）方法"><a href="#总线的仲裁（控制）方法" class="headerlink" title="总线的仲裁（控制）方法"></a>总线的仲裁（控制）方法</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p><strong>主设备</strong>：对总线有控制权的设备</p></li><li><p><strong>从设备</strong>：响应从主设备发送来的总线命令</p></li><li><p><strong>总线的判优方法</strong></p></li><li><p>集中式</p><ol><li><p>链式查询</p></li><li><p>计数器定时查询</p></li><li><p>独立请求方式</p></li></ol></li><li><p>分布式</p></li></ul><h4 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h4><h5 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h5><ul><li><strong>BR（bus request）</strong>：总线请求线，向总线控制器发出总线使用申请信号</li><li><strong>BG（bus grant）</strong>：总线响应线，总线控制器对设备发出的申请信号作出应答</li><li><strong>BS（bus state）</strong>：总线状态线，向总线控制器传递该设备已经占用总线</li></ul><h5 id="链式查询方式"><a href="#链式查询方式" class="headerlink" title="链式查询方式"></a>链式查询方式</h5><p>IO设备共用一条BR线，由此线将请求信号传到总线控制部件，如果总线控制部件无状态，那么就会通过BG线一个接一个的查找发出请求信号的IO设备，查找成功则该IO设备通过BS线向总线控制部件表示总线已经被占用，即总线当前存在状态</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318104447019.png" alt="image-20220318104447019"></p><ul><li><p>链式查询方式的<strong>优点</strong></p><ul><li>结构简单和扩充容易，</li></ul></li><li><p>链式查询方式<strong>缺点</strong></p><ol><li>优先级是固定的，越靠近总线控制部件的IO设备优先级越高</li><li>单点故障敏感，如果当前IO出现故障，那么之后的IO设备的请求都不会得到响应</li><li>当优先级高的IO设备频繁使用总线，那么低优先级的IO设备无法使用总线</li><li>响应速度慢</li></ol></li><li><p>所以综合以上信息，链式查询方式只适合在小系统中使用</p></li></ul><h5 id="计数器定时查询方式"><a href="#计数器定时查询方式" class="headerlink" title="计数器定时查询方式"></a>计数器定时查询方式</h5><p>计数器定时查询方式相比较于链式查询方式，就是用地址线代替了BG线。</p><p>工作原理：当总线控制器部件接收到请求信号并且当前无状态，那么计数器开始计数，</p><p>当地址线上的计数与请求使用设备的地址一致时，那么该设备获得总线控制权</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318105056738.png" alt="image-20220318105056738"></p><ul><li>计数器查询方式的优点<ol><li>优先级改变灵活，通过<strong>设置计数的初始化就可以改变优先级</strong></li><li>单点故障不影响其他部件工作</li></ol></li><li>计数器查询方式的缺点<ol><li>系统扩充复杂，计数地址线增加后涉及所有连接部件的改变</li><li>响应速度慢</li></ol></li></ul><h5 id="独立请求方式"><a href="#独立请求方式" class="headerlink" title="独立请求方式"></a>独立请求方式</h5><p>独立请求方式就是每个IO部件都有独立的BR和BG线，工作原理：</p><p>每个部件通过BR线发送请求，在总线控制器内部按照一定的优先级进行排序，发送BG给对应的部件，该部件获得总线控制权。</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318105537915.png" alt="image-20220318105537915"></p><ul><li>独立请求方式的优点<ol><li>响应速度快</li><li>优先级调整灵活</li></ol></li><li>独立请求方式的缺点<ol><li>相当于空间换时间，所以总线控制部件的复杂性变高了</li></ol></li></ul><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><h3 id="总线的通信控制（总线的定时方式）"><a href="#总线的通信控制（总线的定时方式）" class="headerlink" title="总线的通信控制（总线的定时方式）"></a>总线的通信控制（总线的定时方式）</h3><ul><li>总线通信控制的<strong>目的</strong><ul><li>解决通信双方的协调配合问题</li></ul></li><li>总线的<strong>传输周期</strong><ul><li>总线申请与仲裁：主模块模块申请，总线仲裁</li><li>寻址阶段：主模块向从模块给出地址和命令</li><li>信息传输阶段：主模块和从模块交换输出</li><li>结束阶段：主模块撤销总线请求有关信息，让出总线控制权</li></ul></li></ul><h4 id="总线通信的四种方式"><a href="#总线通信的四种方式" class="headerlink" title="总线通信的四种方式"></a>总线通信的四种方式</h4><ul><li><strong>总线通信</strong>的四种方式<ul><li><strong>同步通信</strong>：统一时钟控制数据传输</li><li><strong>异步通信</strong>：采用应答方式传输数据</li><li><strong>半同步通信</strong>：同步，异步集合</li><li><strong>分离式同步通信</strong>：按需获取总线控制权</li></ul></li></ul><h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><p>在同步通信下，通信双方在统一的时钟控制下进行信息的传输</p><p>如下图，在第一个时钟上升沿，开始总线申请和地址给出</p><p>在第二个时钟上升沿，主设备向从设备给出输入命令</p><p>在第三个时钟上升沿，从设备向主设备发送数据</p><p>在第四个时钟上升沿，主设备撤销总线占用信息，结束通信</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318203937163.png" alt="image-20220318203937163"></p><hr><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318203949726.png" alt="image-20220318203949726"></p><ul><li>同步通信的<strong>优点</strong><ul><li>传送速度快，具有较高的传输速率</li></ul></li><li>同步通信的<strong>缺点</strong><ul><li>时钟线上的干扰信号会引起同步误差</li><li>滞后的时钟信号会引起同步误差</li><li>同步方式的时钟频率必须能适应总线上最长的延迟和最慢的接口需要</li></ul></li><li>综上所述<ul><li>同步通信适用于总线长度较短，及总线所接部件的存储时间比较接近的系统</li></ul></li></ul><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p><strong>异步通信</strong>，也叫做应答通信，指通信联络的控制信号采用异步式的一种通信方式</p><p>根据应答信号是否互锁，异步通信可以分为三种类型</p><ul><li><strong>非互锁通信</strong>：指应答信号的建立和撤销没有直接关系</li><li><strong>半互锁通信</strong>：指应答信号的建立和撤销存在一定的依赖关系，即请求信号的撤销依赖回答信号的建立，而回答信号的撤销和请求信号没有关系</li><li><strong>全互锁通信</strong>：应答信号的建立与撤销存在完全的依赖关系，请求信号的撤销依赖回答信号的建立，回答信号的撤销依赖请求信号的撤销</li></ul><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318204005161.png" alt="image-20220318204005161"></p><h4 id="半同步通信"><a href="#半同步通信" class="headerlink" title="半同步通信"></a>半同步通信</h4><p>半同步通信结合了同步和异步</p><p>保留了同步通信的特点，</p><ul><li>即发送端在时钟的上升沿发出地址，数据和控制信号</li><li>接收端在时钟的下降沿识别他们</li></ul><p>也有异步通信的特点，通过<code>wait</code>信号，保留了异步通信允许不同速率的设备能协同工作</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318204039139.png" alt="image-20220318204039139"></p><hr><p>如果从模块没有数据提供，那么会有<code>wait</code>信号来等待使得从模块准备好数据就开始主从通信</p><p>每个时钟信号的上升沿发出存储器读信号设备采样<code>wait</code>信号，当从模块没有准备好，那么就插入等待周期$T_w$</p><p><strong>因为存在等待周期，所以这样就会造成总线资源的浪费</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318205054879.png" alt="image-20220318205054879"></p><hr><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318205426406.png" alt="image-20220318205426406"></p><h4 id="分离式同步通信"><a href="#分离式同步通信" class="headerlink" title="分离式同步通信"></a>分离式同步通信</h4><p>通过上述三个通信的共同点，发现在一个总线传输周期的其中</p><ul><li>主模块发送地址和命令会占用总线资源</li><li>从模块准备准备数据的时候不占用总线，此时总线资源没有被使用，但是被占用</li><li>从模块向主模块发送数据会占用总线资源</li></ul><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318205939957.png" alt="image-20220318205939957"></p><hr><p>分离式通信的潜力</p><p>主模块申请占用总线资源给出地址和命名后，放弃总线的使用权，</p><p>当从模块申请占用总线时就会将信息发送至总线上，然后就放弃总线的使用权</p><p>这样就避免了半同步通信的存在等待信号导致总线资源的浪费</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318205951610.png" alt="image-20220318205951610"></p><hr><p>分离式通信的<strong>特点</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220318210016675.png" alt="image-20220318210016675"></p><h3 id="总线的标准"><a href="#总线的标准" class="headerlink" title="总线的标准"></a>总线的标准</h3><p>为了按照各个部件之间能够正常传输数据，就需要对总线作出一个标准，其中USB就是Universal Serial BUS(通用串行总线)</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220319143026451.png" alt="image-20220319143026451"></p><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><h3 id="存储器分类"><a href="#存储器分类" class="headerlink" title="存储器分类"></a>存储器分类</h3><h4 id="按存储介质分类"><a href="#按存储介质分类" class="headerlink" title="按存储介质分类"></a>按存储介质分类</h4><ol><li><strong>半导体存储器</strong>：<ul><li>TTL，MOS</li></ul></li><li><strong>磁表面存储器</strong>：<ul><li>磁头，载磁体</li></ul></li><li><strong>磁芯存储器</strong>：<ul><li>硬磁材料，环状元件</li></ul></li><li><strong>光盘存储器</strong>：<ul><li>激光，磁光材料</li></ul></li></ol><h4 id="按存储方式分类"><a href="#按存储方式分类" class="headerlink" title="按存储方式分类"></a>按存储方式分类</h4><ol><li><strong>存储时间于物理地址无关</strong>（随机访问）<ul><li>随机存储器：程序执行过程中可读可写</li><li>只读存储器：程序执行过程中只读</li></ul></li><li><strong>存储时间与物理地址有关</strong>（串行访问）<ul><li>顺序存取存储器：磁带</li><li>直接存取存储器：磁盘</li></ul></li></ol><h4 id="在计算机中的作用分类"><a href="#在计算机中的作用分类" class="headerlink" title="在计算机中的作用分类"></a>在计算机中的作用分类</h4><ol><li><strong>主存储器</strong><ul><li>RAM（random Access Memory）<ul><li>静态RAM</li><li>动态RAM</li></ul></li><li>ROM（Read Only Memory）<ul><li>MROM</li><li>PROM</li><li>EPROM</li><li>EEPROM</li></ul></li></ul></li><li><strong>Flash Memory</strong><ul><li>半导体存储器</li><li>例如u盘等</li></ul></li><li><strong>高速缓冲存储器</strong>（Cache）<ul><li>一般是SRAM</li></ul></li><li><strong>辅助存储器</strong></li></ol><ul><li>磁盘，磁带，光盘等</li></ul><h3 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h3><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220316205858633.png" alt="image-20220316205858633"></p><h4 id="缓存-主存层次和主存-辅存层次"><a href="#缓存-主存层次和主存-辅存层次" class="headerlink" title="缓存-主存层次和主存-辅存层次"></a>缓存-主存层次和主存-辅存层次</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220316211438929.png" alt="image-20220316211438929"></p><h5 id="缓存-主存（速度）"><a href="#缓存-主存（速度）" class="headerlink" title="缓存-主存（速度）"></a>缓存-主存（速度）</h5><h5 id="主存-辅存（容量）"><a href="#主存-辅存（容量）" class="headerlink" title="主存-辅存（容量）"></a>主存-辅存（容量）</h5><ul><li>主存储器 -&gt; 虚拟存储器</li><li>实地址 -&gt; 虚地址</li><li>物理地址 -&gt; 逻辑地址</li></ul><h3 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h3><h4 id="主存的组成"><a href="#主存的组成" class="headerlink" title="主存的组成"></a>主存的组成</h4><p><strong>MAR（Memory Address Register）</strong>：存储器地址寄存器</p><p><strong>MDR（Memory Data Register ）</strong>：存储数据寄存器</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220328222318565.png" alt="image-20220328222318565"></p><h4 id="主存和CPU之间的联系"><a href="#主存和CPU之间的联系" class="headerlink" title="主存和CPU之间的联系"></a>主存和CPU之间的联系</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220316222056890.png" alt="image-20220316222056890"></p><h4 id="主存中存储单元地址的分配"><a href="#主存中存储单元地址的分配" class="headerlink" title="主存中存储单元地址的分配"></a>主存中存储单元地址的分配</h4><ul><li><strong>大端数据存放方式</strong><ul><li>存储器的低字节地址单元存放数据的最高字节</li><li>大端方式符合人类正常思维</li></ul></li><li><strong>小端数据存放方式</strong><ul><li>存储器的低字节地址单元存放数据的最低字节</li><li>方便计算机处理</li></ul></li></ul><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220316222622360.png" alt="image-20220316222622360"></p><h4 id="主存的技术指标"><a href="#主存的技术指标" class="headerlink" title="主存的技术指标"></a>主存的技术指标</h4><blockquote><p> 存储容量</p></blockquote><ul><li><strong>存储容量</strong>：主存存放二进制代码的总位数</li></ul><blockquote><p>存储速度</p></blockquote><ol><li><strong>存取时间</strong>：存储器的访问时间（读出时间+写入时间）</li><li><strong>存取周期</strong>：<strong>连续</strong>两次<strong>独立</strong>的存储器操作所需要的<strong>最小间隔时间</strong></li><li><strong>存储器的带宽</strong>：单位时间内数据量</li></ol><blockquote><p>存储器的可靠性</p></blockquote><ul><li><strong>可靠性</strong>：可靠通过平均故障间隔时间MTBF（Mean Time Between Failures）衡量</li></ul><h3 id="半导体芯片简介"><a href="#半导体芯片简介" class="headerlink" title="半导体芯片简介"></a>半导体芯片简介</h3><h4 id="半导体存储芯片的基本结构"><a href="#半导体存储芯片的基本结构" class="headerlink" title="半导体存储芯片的基本结构"></a>半导体存储芯片的基本结构</h4><p><strong>CS（chip select）</strong>：芯片选择端</p><p><strong>CE（chip energy）</strong>：芯片势能端</p><p>如果仅为WE，那么低电平为写，高电平为读</p><p>如果分为OE和WE，则OE（Output Enable）为输出使端 ，WE（Write Enable）为写使能</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220328223224687.png" alt="image-20220328223224687"></p><h4 id="存储芯片的片选线的作用"><a href="#存储芯片的片选线的作用" class="headerlink" title="存储芯片的片选线的作用"></a>存储芯片的片选线的作用</h4><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220317192138233.png" alt="image-20220317192138233"></p><h4 id="半导体存储芯片的译码驱动方式"><a href="#半导体存储芯片的译码驱动方式" class="headerlink" title="半导体存储芯片的译码驱动方式"></a>半导体存储芯片的译码驱动方式</h4><h5 id="线选法"><a href="#线选法" class="headerlink" title="线选法"></a>线选法</h5><p>通过4个输入信号A0-A3在通过译码器，可以对一整行的基本存储单元进行访问</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220317192438304.png" alt="image-20220317192438304"></p><p>进行IO操作</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220328223928658.png" alt="image-20220328223928658"></p><h5 id="重合法"><a href="#重合法" class="headerlink" title="重合法"></a>重合法</h5><p>通过行地址和列地址译码后，可以访问二维矩阵</p><p>如图为进行IO操作时</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220328223834295.png" alt="image-20220328223834295"></p><h3 id="随机访问存储器RAM（random-access-memory）"><a href="#随机访问存储器RAM（random-access-memory）" class="headerlink" title="随机访问存储器RAM（random access memory）"></a>随机访问存储器RAM（random access memory）</h3><h4 id="SRAM（Static-RAM）"><a href="#SRAM（Static-RAM）" class="headerlink" title="SRAM（Static RAM）"></a>SRAM（Static RAM）</h4><blockquote><p>保存0，1原理？</p></blockquote><blockquote><p>静态存储单元</p></blockquote><p>下图的基本单元电路里面的T1～T4就是一个静态存储单元</p><p>内部结是T1，T2作为工作管，T3，T4作为负载管</p><p>静态存储单元是由T1，T2组成的双稳态触发器存储</p><blockquote><p>基本单元电路的构成？</p></blockquote><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220317193618978.png" alt="image-20220317193618978"></p><blockquote><p>对单元电路如何读出和读入？</p></blockquote><p>SRAM电路的读操作</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220317194122411.png" alt="image-20220317194122411"></p><hr><p>SRAM电路的写操作：</p><p>首先行选开关T5，T6打开</p><p>然后列选开关T7，T8打开</p><p>Din开始输入数据，通过写放大器</p><p>因为左边为A’ ，所以左边的放大器取反</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220328224238116.png" alt="image-20220328224238116">   </p><blockquote><p>典型芯片的结构样子？</p></blockquote><blockquote><p>RAM如何进行读出和写入操作</p></blockquote><h4 id="动态RAM（DRAM）"><a href="#动态RAM（DRAM）" class="headerlink" title="动态RAM（DRAM）"></a>动态RAM（DRAM）</h4><h4 id="DRAM和RAM的比较"><a href="#DRAM和RAM的比较" class="headerlink" title="DRAM和RAM的比较"></a>DRAM和RAM的比较</h4><h3 id="只读存储器（ROM）"><a href="#只读存储器（ROM）" class="headerlink" title="只读存储器（ROM）"></a>只读存储器（ROM）</h3><h3 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h3><h4 id="位扩展"><a href="#位扩展" class="headerlink" title="位扩展"></a>位扩展</h4><h4 id="字扩展"><a href="#字扩展" class="headerlink" title="字扩展"></a>字扩展</h4><h4 id="位字扩展"><a href="#位字扩展" class="headerlink" title="位字扩展"></a>位字扩展</h4><h4 id="CPU和存储器的连接"><a href="#CPU和存储器的连接" class="headerlink" title="CPU和存储器的连接"></a>CPU和存储器的连接</h4><p>对于6000H到67FFH分配地址为存放系统系统软件</p><p>对于6800H到6BFFH分配地址为用户使用区</p><p>其中A11-A13为片选信号，100代表选择1片ROM芯片，101代表选择2片RAM芯片</p><p>A11-A13连接138译码器，对于138译码器</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220327132754084.png" alt="image-20220327132754084"></p><p>MREQ（Memory request )：存储器请求信号</p><p>对于RAM不仅需要片选信号为101，还需要A10为低电平</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220327132731855.png" alt="image-20220327132731855"></p><h3 id="提供访存速度的措施"><a href="#提供访存速度的措施" class="headerlink" title="提供访存速度的措施"></a>提供访存速度的措施</h3><ul><li>采用高速器件</li><li>采用层级结构 Cache-主存</li><li>调整主存结构</li></ul><h3 id="调整主存结构"><a href="#调整主存结构" class="headerlink" title="调整主存结构"></a>调整主存结构</h3><blockquote><p> 单体多字存储器 </p></blockquote><p>单体多字存储器的构造与存储器位扩展方式完全相同</p><p>多个并行的存储模块共用一套地址寄存器，按同一地址并行访问不同存储模块的同一单元</p><p>从而实现在一个存储周期可以访问多个存储字，提高主存带宽</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220331162012656.png" alt="image-20220331162012656"></p><p><strong>单体多字系统存在的不足为</strong></p><p>如果指令或者数据在主存中是连续存放的，那么单体多字系统可以充分提高带宽</p><p>如果遇到不连续，那么加速效果不明显</p><blockquote><p>高位多体交叉</p></blockquote><p>其实就是用高位段地址译码后产生片选信号，选择不同的存储体，而低位段地址直接选择一个存储体内的不同存储单元。</p><p>其工作原理其实也就是前面的存储器的字扩展</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220401210219616.png" alt="image-20220401210219616"></p><p><strong>高位交叉系统的不足为</strong></p><p>由于程序具有局部性和连续性的特点，如果采用高位交叉存储器，那么一个存储体中的地址单元是连续的，会导致CPU频繁的对此存储体进行访问，而其他的存储体处于空闲状态，无法实现存储体并行工作。</p><p>高位交叉系统的应用</p><p>存储器容量的扩展</p><blockquote><p> 低位交叉存储器</p></blockquote><p>高位段地址带直接选择一个存储体内的不同存储单元，而低位段地址经过译码后会产生片选信号，选择不同的存储体</p><p>工作原理：</p><p>高位段地址：体内地址</p><p>低位段地址：体号</p><p>将顺序的M个地址依次分配给M个存储模块，</p><p>横着来访问，</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220401210253819.png" alt="image-20220401210253819"></p><p>低位交叉的<strong>应用</strong></p><p>存储器带宽的提升</p><p>低位交叉的<strong>特点</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220401210959359.png" alt="image-20220401210959359"></p><p>这就是流水线方式的存储</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220401211054181.png" alt="image-20220401211054181"></p><p>对于的低位交叉存储器，可以实现并行读取，读取K个字所需要的时间为 T+（k-1）t</p><p>其中T为一个存储周期，t为总线传输周期</p><h3 id="高速缓冲存储器-Cache"><a href="#高速缓冲存储器-Cache" class="headerlink" title="高速缓冲存储器(Cache)"></a>高速缓冲存储器(Cache)</h3><h4 id="程序访问的局部性原理"><a href="#程序访问的局部性原理" class="headerlink" title="程序访问的局部性原理"></a>程序访问的局部性原理</h4><p><strong>时间局部性</strong>：</p><p>当前正在使用的指令和数据，在不久的将来还会被使用，那么当前使用的指令和数据可以放到Cache中。</p><p><strong>空间局部性</strong>：</p><p>当前正在使用的指令和数据，在不久的将来相邻的指令和数据会被用到，</p><p>因为上述程序访问的局限性原理，所以可以把最近使用过的指令和正在使用的指令放到Cache中，使得可以直接从Cache中获取而不用从主存中重新获取</p><h4 id="Cache的工作原理"><a href="#Cache的工作原理" class="headerlink" title="Cache的工作原理"></a>Cache的工作原理</h4><p><strong>Cache-主存层次</strong>之间的存储信息的交换是按照一个存储块来交换</p><p>一个存储块的大小在主存和缓存中都是一样的</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220405190947378.png" alt="image-20220405190947378"></p><h4 id="CPU访问Cache"><a href="#CPU访问Cache" class="headerlink" title="CPU访问Cache"></a>CPU访问Cache</h4><p>如果缓存中有 C块</p><p>主存中有M块，其中M&gt;C</p><p><strong>Cache命中</strong>：</p><p>说明CPU访问的该主存块已经调入了缓存，即主存块和缓存块已经建立了对应关系</p><p><strong>Cache未命中</strong>：</p><p>说明CPU访问的该主存块没有调入缓存，CPU还需要到主存中去寻找即主存块和缓存块没有建立相应的关系</p><p><strong>Cache的命中率</strong></p><p>Cache的命中率：就是CPU要访问的存储块在Cache中的比率</p><p>命中率和Cache的<strong>容量</strong>和<strong>块长</strong>有关</p><p>一般每块取4～8个存储字，每个存储字里面为64位</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220405191908542.png" alt="image-20220405191908542"></p><h4 id="Cache的基本结构"><a href="#Cache的基本结构" class="headerlink" title="Cache的基本结构"></a>Cache的基本结构</h4><p>cache的结构一般包括3个部分</p><ul><li>数据存储体：存在主存数据的副本</li><li>标记存储体：对于不同的映射方法有不同的标记</li><li>有效位：用于标识当前的数据是否有效</li></ul><h4 id="Cache-主存的地址映射"><a href="#Cache-主存的地址映射" class="headerlink" title="Cache-主存的地址映射"></a>Cache-主存的地址映射</h4><blockquote><p>直接映射</p></blockquote><p><strong>工作原理</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507171058527.png" alt="image-20220507171058527"></p><p><strong>工作流程</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507171128024.png" alt="image-20220507171128024"></p><p><strong>工程图</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507171250808.png" alt="image-20220507171250808"></p><blockquote><p>全相联映射</p></blockquote><p><strong>工作原理</strong></p><p>主存会被放到Cache的任意块之后给一个Tag</p><p>之后如果主存要来访问就要迭代Cache</p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507170528268.png" alt="image-20220507170528268"></p><p><strong>工作流程</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507170803912.png" alt="image-20220507170803912"></p><p><strong>工程图</strong></p><p><img src="/2022/02/25/ji-suan-ji-ji-chu-lei/ji-suan-ji-zu-cheng-yuan-li/image-20220507170844613.png" alt="image-20220507170844613"></p><p>tag:主存的Tag对应Cache的Tag</p><p>offset:代表主存块在Cache块中的地址</p><p><strong>特点</strong></p><ul><li>Cache利用率高</li><li>块冲突率低</li><li>淘汰算法复杂</li><li>速度不是很快</li></ul><p><strong>适合场所</strong></p><ul><li>小容量Cache</li></ul><blockquote><p>组相联映射</p></blockquote><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><h3 id="指令的格式"><a href="#指令的格式" class="headerlink" title="指令的格式"></a>指令的格式</h3><p>表示一条指令的机器字，称为指令字，简称指令                            </p>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Expand the Path</title>
      <link href="/2022/02/24/summary/codeforces/20220222-123d2/e-expand-the-path/"/>
      <url>/2022/02/24/summary/codeforces/20220222-123d2/e-expand-the-path/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1644/problem/E    E. Expand the Path    题目描述        给一个n*n的框框        给一个机器人和操作序列        D：向下走        R：向右走        当你遇到任意一个操作，可以无限复制该操作，但是最终机器人不能走出框框        问对机器人任意修改操作，机器人最多可以覆盖多少单元格    Tag:        1.思维题    思路：        1.情况一：让机器人第一次遇到R时，尽可能的向右走，但是确保最终不会存在向右走超出地图        2.情况二：让机器人第一次遇到D时，尽可能的向下走，但是确保最终不会存在向下走超出地图        情况一当遇到D时，这时右边就会存在绝对无法覆盖到的区域        情况二当遇到D时，这时左边就会存在绝对无法覆盖到的区域        答案就是 n*n-无法覆盖到的区域   */</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       ll n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> sr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">'R'</span><span class="token punctuation">)</span> sr<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> sd<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sr<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> sd<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span> n<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll tx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    ll count_d<span class="token operator">=</span>sd<span class="token punctuation">;</span>    ll ans<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">bool</span> fx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//第一次遇到R尽量走右边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">'R'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fy<span class="token punctuation">)</span><span class="token punctuation">{</span>                ty<span class="token operator">=</span>n<span class="token operator">-</span><span class="token punctuation">(</span>sr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fy<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                ty<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans<span class="token operator">-=</span>n<span class="token operator">-</span>ty<span class="token punctuation">;</span>            tx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ty<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    fx<span class="token operator">=</span>fy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//第一次遇到D尽量走下边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">'R'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ty<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fx<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">int</span> t<span class="token operator">=</span>tx<span class="token punctuation">;</span>                tx<span class="token operator">=</span> n<span class="token operator">-</span><span class="token punctuation">(</span>sd<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans <span class="token operator">-=</span> <span class="token punctuation">(</span>tx<span class="token operator">-</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ty<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 fx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span>  ans<span class="token operator">-=</span><span class="token punctuation">(</span>ty<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//对于第一种情况右边存在无法覆盖的区域</span>    <span class="token comment">//对于第二种情况左边存在无法覆盖的区域</span>    <span class="token comment">//将两种情况的无法覆盖的区域减去</span>    cout<span class="token operator">&lt;&lt;</span> ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross Coloring</title>
      <link href="/2022/02/23/summary/codeforces/20220222-123d2/d-cross-coloring/"/>
      <url>/2022/02/23/summary/codeforces/20220222-123d2/d-cross-coloring/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-23 20:44:01 * @LastEditTime: 2022-02-23 23:10:08 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1644/problem/D    D. Cross Coloring    题目描述        给你一个n*m的纸，全是白色，每次操作给出xi,yi，对所有xi行和yi列进行k种染色之一，问你经过q次操作后，纸可以有多少种不同的着色。        至少有一个单元格颜色不同就是不同的着色    Tag:        1.思维题    思路：        对于每个单元格最后颜色，取决于最新的该行或者该列的颜色        所以对于染色操作可以倒着来，确保当前的行或列必然是会显示且不会覆盖的        只要当前行或者当前列没有被覆盖        如果行或者列全部被覆盖说明，纸已经没有位置颜色*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>    ll  ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    set<span class="token operator">&lt;</span>ll<span class="token operator">&gt;</span>col<span class="token punctuation">,</span>row<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>ll <span class="token operator">&gt;</span><span class="token function">xs</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ys</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>q<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            col<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  ans<span class="token operator">=</span>ans<span class="token operator">*</span>k<span class="token operator">%</span>MOD<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>n <span class="token operator">||</span> col<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Increase Subarray Sums</title>
      <link href="/2022/02/23/summary/codeforces/20220222-123d2/c-increase-subarray-sums/"/>
      <url>/2022/02/23/summary/codeforces/20220222-123d2/c-increase-subarray-sums/</url>
      
        <content type="html"><![CDATA[<pre><code class="cpp">/* * @Autor: Zver * @Date: 2022-02-23 19:20:47 * @LastEditTime: 2022-02-23 23:07:46 */#include &lt;fstream&gt;#include &lt;iostream&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;unordered_map&gt;#include&lt;map&gt;#include&lt;string&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;list&gt;#include&lt;vector&gt;#include&lt;set&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;utility&gt;#define INF_32 int(1e9)+5void f(){exit(0);};#define eps 1e-8typedef long long ll;typedef unsigned long long ull;#define rep(i, l, r) for(int i = int(l); i &lt;= int(r); i++)#define FOR(i,r) (for(int i=0 ;i&lt;int(r);i++))typedef std::pair&lt;int, int&gt; PII;void IOS(){ std::ios::sync_with_stdio(0);std::cin.tie();std::cout.tie();}using namespace std;/*    https://codeforces.com/contest/1644/problem/C    C. Increase Subarray Sums    题目描述        给你长度为n的数组，一个数值x        求出最大的前缀和f(k)        f(k)表示k个不同位置的加上x后最大的前缀和    Tag:        1.dp    思路：          dp[x] : 表示长度为len的最大前缀和        对于长度为len的最大前缀和，        x是非负数加进来是最佳的        So if 𝑘≤𝑙en, then the sum of the segment increases by 𝑘⋅𝑥. Otherwise, only the elements inside the segment will affect the sum, thus, it will increase by 𝑙⋅𝑥. That can be written as 𝑚𝑖𝑛(𝑘,𝑙)⋅𝑥.        理解错题意了，题意是让每个位置加上x,保证这些位置只加一次        我之前理解，我以为是在k个位置插入x        所以对于        长度为len的子段，每个位置都可以加x那么就可以加min(k,len)*x;    */void solve(){    int n,m;    cin&gt;&gt;n&gt;&gt;m;    vector&lt;int &gt;a(n+1,0);    for(int i=1;i&lt;=n;i++){        cin&gt;&gt;a[i];    }    //dp[x] : 长度为len的最大前缀和    vector&lt;int &gt;dp(n+1,-0x3f3f3f3f);    dp[0]=0;        rep(i,1,n){        int sum =0;         rep(j,i,n){            sum+=a[j];            dp[j-i+1] =max(dp[j-i+1],sum);        }    }    //i表示要放多少个 m    for(int i=0;i&lt;=n;i++){        int maxn=0;        for(int len=0;len&lt;=n;len++){            maxn=max(maxn,dp[len]+min(i,len)*m);        }        cout&lt;&lt;maxn&lt;&lt;" ";    }    cout&lt;&lt;endl;}int main(){    IOS();    int t;    cin&gt;&gt;t;    while(t--){        solve();    }    return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3492. 负载均衡</title>
      <link href="/2022/02/23/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/fu-zai-jun-heng/"/>
      <url>/2022/02/23/summary/acwing/lan-qiao-bei/shi-er-jie-er-chang-b-zu-zhen-ti/fu-zai-jun-heng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-23 00:00:05 * @LastEditTime: 2022-02-23 00:11:40 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/3495/    3492. 负载均衡    题目描述        有 n 台计算机，第 i 台计算机的运算能力为 vi。有一系列的任务被指派到各个计算机上，第 i 个任务在 ai 时刻分配，指定计算机编号为 bi，耗时为 ci 且算力消耗为 di。如果此任务成功分配，将立刻开始运行，期间持续占用 bi 号计算机 di 的算力，持续 ci 秒。        对于每次任务分配，如果计算机剩余的运算能力不足则输出 −1，并取消这次分配，否则输出分配完这个任务后这台计算机的剩余运算能力。    Tag:        1.树状数组        2.优先队列        3.模拟    思路：        优先队列维护每个计算机的可以处理的每个任务的结束时间和算力        再次遇到要用第i个计算机的时候，判断时间点和第i计算机每个任务的结束时间能否加回算力        然后就是判断当前计算机的剩余算力和当前任务的算力*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token number">2e5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span> heap<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">g</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>d<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>            g<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">+=</span>heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&gt;=</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>            heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token operator">+</span>c<span class="token punctuation">,</span>d<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            g<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">-=</span>d<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>g<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论</title>
      <link href="/2022/02/21/ji-suan-ji-ji-chu-lei/shu-ju-ku-xi-tong-gai-lun/"/>
      <url>/2022/02/21/ji-suan-ji-ji-chu-lei/shu-ju-ku-xi-tong-gai-lun/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="数据库系统论述"><a href="#数据库系统论述" class="headerlink" title="数据库系统论述"></a>数据库系统论述</h3><h4 id="数据库的4个基本概念"><a href="#数据库的4个基本概念" class="headerlink" title="数据库的4个基本概念"></a>数据库的4个基本概念</h4><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><ul><li><p>描述事物的符号记录称为数据</p></li><li><p>数据的含义称为数据的语义，数据与语义是不可分的</p></li></ul><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul><li>数据库是长期存储在计算机，有组织，可共享的大量数据的集合。</li><li>数据库中的数据具有一定的数据模型组织，描述和存储，具有较小的redundancy，较高的data independency和scalability，可以为各种用户共享</li></ul><h5 id="数据库管理系统-DataBase-Management-System-DBMS"><a href="#数据库管理系统-DataBase-Management-System-DBMS" class="headerlink" title="数据库管理系统(DataBase Management System DBMS)"></a>数据库管理系统(DataBase Management System DBMS)</h5><p><strong>数据库管理系统</strong>是位于用户与操作系统之间的一层数据管理软件，数据库管理系统和操作系统一样是计算机的基础软件</p><ul><li>主要功能包含如下<ul><li>数据定义功能</li><li>数据组织，存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能<ul><li>数据库管理系统与网络中其他软件系统的通信功能</li></ul></li></ul></li></ul><h5 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h5><p>数据库系统是由<code>数据库</code>,<code>数据库管理系统</code>,<code>应用程序</code>和<code>数据库管理员(DataBase Administrator)</code>组成的存储，管理，处理和维护数据的系统</p><h4 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h4><h5 id="数据结构化"><a href="#数据结构化" class="headerlink" title="数据结构化"></a>数据结构化</h5><ul><li>数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是<code>数据库系统与文件系统的本质区别</code></li></ul><h5 id="数据的共享性高，redundancy且易扩充"><a href="#数据的共享性高，redundancy且易扩充" class="headerlink" title="数据的共享性高，redundancy且易扩充"></a>数据的共享性高，redundancy且易扩充</h5><ul><li>数据共享可以大大减少数据数据沉余，节约存储空间,数据共享还能够别面数据之间的不相容性与不一致性</li><li>数据面向整个系统，是有结构的数据，不仅可以被多个应用共享使用，而且容易添加应用，这就使得数据库系统弹性大，易于扩充</li></ul><h5 id="数据独立性高"><a href="#数据独立性高" class="headerlink" title="数据独立性高"></a>数据独立性高</h5><ul><li><p><strong>数据独立性</strong>是指借助数据库管理数据的一个显著优点，数据的独立性由数据库管理系统提供的二级映像功能来保证</p></li><li><p><strong>物理独立性</strong>是指用户的应用程序与数据库中数据的物理存储是相互独立的</p></li><li><p><strong>逻辑独立性</strong>是指用户的应用程序与数据库的逻辑结构相互独立</p></li></ul><h5 id="数据由数据库管理系统统一管理和控制"><a href="#数据由数据库管理系统统一管理和控制" class="headerlink" title="数据由数据库管理系统统一管理和控制"></a>数据由数据库管理系统统一管理和控制</h5><p>数据库管理系统需要提供以下数据控制功能</p><ul><li><p><strong>数据的安全性保护</strong>是指保护数据以防止不合法使用造成的数据泄密和破坏</p></li><li><p><strong>数据的完整性</strong>是指数据正确性，有效性和相容性。完整性检查将数据控制在有效的范围之内，并保证数据在满足一定的关系</p></li><li><p><strong>并发控制</strong></p></li><li><p><strong>数据库恢复</strong></p></li></ul><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li>数据模型是一种模型，是对现实世界数据特征的抽象</li><li><strong>数据模型是数据库系统的核心和基础</strong></li></ul><h4 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h4><h5 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h5><p>概念模型</p><ul><li>信息模型，按照用户的观点来对数据和信息建模，主要用于数据库设计</li></ul><h5 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h5><p>逻辑模型</p><ul><li><p>逻辑模型的主要的三个模型</p><ul><li><p>层次模型</p></li><li><p>网状模型</p></li><li><p>关系模型</p></li></ul></li><li><p>按照计算机系统的观点对数据建模，主要用于数据库管理系统的实现</p></li></ul><p>物理模型</p><ul><li>物理模型是对数据最底层的抽象</li><li>描述数据在系统内部的表示方式和存取方式，或在磁盘上的存储方式</li></ul><p><strong>将现实世界抽象为信息世界，然后将信息世界转换为机器世界，从逻辑模型到物理模型的转换一般是由DBMS完成的</strong></p><h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><h5 id="信息世界中的基本概念"><a href="#信息世界中的基本概念" class="headerlink" title="信息世界中的基本概念"></a>信息世界中的基本概念</h5><ul><li><p><strong>实体</strong></p><ul><li>客观存在并可相互区分的事务称为<strong>实体</strong></li></ul></li><li><p><strong>属性</strong></p><ul><li>实体所具有的某一特性称为<strong>属性</strong></li></ul></li><li><p><strong>key</strong></p><ul><li>唯一标识实体的属性称为<strong>key</strong></li></ul></li><li><p><strong>实体型</strong></p><ul><li>用实体名及其属性名集合来抽象和刻画同类实体，称为<strong>实体型</strong></li></ul></li><li><p><strong>实体集</strong></p><ul><li>同一类型实体的集合称为<strong>实体集</strong></li></ul></li><li><h5 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h5><ul><li>实体之间的联系通常是指不同实体集之间的联系</li></ul></li></ul><h5 id="概念模型的一种表示方式：实体-联系方法"><a href="#概念模型的一种表示方式：实体-联系方法" class="headerlink" title="概念模型的一种表示方式：实体-联系方法"></a>概念模型的一种表示方式：实体-联系方法</h5><p>P.P.S.Chen于1976年提出的实体-联系方法（Entity-Relationship approach）该方法用E-R图来描述显示世界的概念模型</p><h4 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h4><p><strong>数据模型通常由数据结构，数据操作和数据的完整性约束条件三部分组成</strong></p><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>数据结构描述数据库的组成对象以及对象之间的关系</p><h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><p>数据操作是指对数据库中各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则</p><h5 id="数据的完整性约束条件"><a href="#数据的完整性约束条件" class="headerlink" title="数据的完整性约束条件"></a>数据的完整性约束条件</h5><p>数据的完整性约束条件是一组完整性规则</p><h4 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h4><h5 id="层次模型的数据结构"><a href="#层次模型的数据结构" class="headerlink" title="层次模型的数据结构"></a>层次模型的数据结构</h5><p>在数据库中定义满足下面两个条件的基本层次联系的集合为层次模型：</p><ul><li>有且只有一个节点没有父节点，这个结点称为根节点</li><li>根以外的其他节点有且只有一个父节点</li></ul><h5 id="层次模型的数据操作和完整性约束"><a href="#层次模型的数据操作和完整性约束" class="headerlink" title="层次模型的数据操作和完整性约束"></a>层次模型的数据操作和完整性约束</h5><p>数据操作</p><ul><li>数据操纵主要有查询，插入，删除和更新</li></ul><p>完整性约束条件</p><ul><li>插入操作时，如果没有相应的双亲结点值就不能插入他的子女结点</li><li>删除操作时，如果删除父节点，那么相应的子女结点值将同时删除</li></ul><h5 id="层次模型的优缺点"><a href="#层次模型的优缺点" class="headerlink" title="层次模型的优缺点"></a>层次模型的优缺点</h5><p>优点</p><ul><li>层次模型的数据结构比较简单清晰</li><li>层次数据库的性能优于关系数据库，不低于网状数据库</li></ul><p>缺点</p><ul><li>无法很好表现出现实世界的非层次性的联系</li><li>查询子女节点必须通过双亲节点</li><li>结构严密，层次命令程序化</li></ul><h4 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h4><p>网状数据模型的典型代表是DBTG系统，也称CODASYL系统</p><h5 id="网状模型的数据结构"><a href="#网状模型的数据结构" class="headerlink" title="网状模型的数据结构"></a>网状模型的数据结构</h5><p>数据库中，把满足以下两个条件的基本层次联系集合称为网状模型</p><ul><li>允许一个以上的结点无父节点</li><li>一个结点可以有多于一个的父节点</li></ul><h5 id="网状模型的数据操作和完整性约束"><a href="#网状模型的数据操作和完整性约束" class="headerlink" title="网状模型的数据操作和完整性约束"></a>网状模型的数据操作和完整性约束</h5><p>完整性约束</p><ul><li>支持记录码的概念，key即唯一表示记录的数据项的集合</li><li>保证一个联系中父元组和子女元组之间是一对多的联系</li></ul><h5 id="网状模型的优缺点"><a href="#网状模型的优缺点" class="headerlink" title="网状模型的优缺点"></a>网状模型的优缺点</h5><p>优点</p><ul><li>直观的描述现实世界</li><li>具有良好的性能，查找效率高</li></ul><p>缺点</p><ul><li>结构复杂</li><li>网状模型的DDL,DML复杂</li><li>元组之间通过存取路径实现，用户在访问数据时必须选择适当的路径。因此用户必须了解系统结构的细节。—不够简单</li></ul><h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><h5 id="关系模型的数据结构"><a href="#关系模型的数据结构" class="headerlink" title="关系模型的数据结构"></a>关系模型的数据结构</h5><p>关系模型建立在严格的数学概念的基础上</p><ul><li><p>一些关系模型的术语</p><ul><li><p>关系：表</p></li><li><p>元组：表行</p></li><li><p>属性：表列</p></li><li><p>码（key）：表中的每个属性组</p></li><li><p>域（domain）：域是一组具有相同数据类型的值的集合</p></li><li><p>分量 ：元组中的一个属性值</p></li></ul></li><li><p>关系模型要求关系必须是规范的</p></li><li><p>关系的每一个分量是一个不可分的数据项</p></li><li><p><strong>不可以存在表中套表</strong></p></li></ul><h5 id="关系模型的数据操作与完整性约束"><a href="#关系模型的数据操作与完整性约束" class="headerlink" title="关系模型的数据操作与完整性约束"></a>关系模型的数据操作与完整性约束</h5><p>完整性约束包括三大类：实体完整性，参照完整性，用户定义完整性</p><h5 id="关系模型的优缺点"><a href="#关系模型的优缺点" class="headerlink" title="关系模型的优缺点"></a>关系模型的优缺点</h5><p>优点</p><ul><li>建立在严格的数学概念的基础上</li><li>关系模型的概念单一，无论实体还是实体之间的联系都是关系表示，对数据的检索和更新结果都是关系，所以数据结构简单，清晰，用户易懂</li><li>关系模型的存取路径对用户透明，从而具有更高的数据独立性，更好的安全保密，简化工作</li></ul><p>缺点</p><ul><li>存储路径对用户隐蔽，查询效率不如格式化数据模型</li><li>为了提高性能，数据库管理系统必须对用户的查询请求进行优化，增加开发难度，不过用户不必考虑内部的技术细节</li></ul><h3 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h3><h4 id="数据库系统模式的概念"><a href="#数据库系统模式的概念" class="headerlink" title="数据库系统模式的概念"></a>数据库系统模式的概念</h4><p>数据模型中有<code>type</code>和<code>value</code>的概念</p><ul><li><p><code>type</code> : 指对某一数据的结构和属性的说明</p></li><li><p><code>value</code>:型的具体赋值</p></li><li><p><strong>模式</strong>是数据库中全体数据的逻辑结构和特征描述，仅仅涉及<code>type</code>的描述</p></li><li><p>模式的一个具体值称为<strong>实例</strong>，一个模式可以有很多实例</p></li></ul><p><strong>模式是相对稳定的，实例是相对变动的</strong></p><h4 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h4><p>数据库系统的三级模式结构是指数据库系统由<code>外模式</code>，<code>模式</code>和<code>内模式</code>三部分组成</p><h5 id="模式（schema）"><a href="#模式（schema）" class="headerlink" title="模式（schema）"></a>模式（schema）</h5><p><strong>模式</strong>是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据图</p><ul><li><p>模式实际上是数据库数据在逻辑级上的视图，一个数据库只有一个模式</p></li><li><p>数据库管理系统提供 模式数据定义语言（模式DDL）来严格定义模式</p></li></ul><h5 id="外模式（external-schema）"><a href="#外模式（external-schema）" class="headerlink" title="外模式（external schema）"></a>外模式（external schema）</h5><ul><li><p>外模式是子模式</p></li><li><p>他是数据库用户能够看见和使用的局部的逻辑结构和特征描述</p></li><li><p>是用户的数据视图</p></li><li><p>是与某一个应用有关的数据的逻辑表示。</p></li><li><p>数据库管理系统提供外模式数据定义语言（外模式DDL）来严格定义模式</p></li></ul><h5 id="内模式（internal-schema）"><a href="#内模式（internal-schema）" class="headerlink" title="内模式（internal schema）"></a>内模式（internal schema）</h5><ul><li>一个数据库只有一个内模式</li><li>内模式是数据物理结构和存储方式的描述</li><li>内模式是数据在数据库内部的组织方式</li></ul><h5 id="数据库系统的三级模式结构的作用"><a href="#数据库系统的三级模式结构的作用" class="headerlink" title="数据库系统的三级模式结构的作用"></a>数据库系统的三级模式结构的作用</h5><p>数据库系统的三级模式是数据的三个抽象级别,他把数据的具体组织留给数据库管理系统使得用户能逻辑地，抽象地处理数据，而不必关心数据在计算机中的具体表示方式和存储方式</p><h4 id="数据库的二级映像与数据独立性"><a href="#数据库的二级映像与数据独立性" class="headerlink" title="数据库的二级映像与数据独立性"></a>数据库的二级映像与数据独立性</h4><p>为了能够在系统内部实现这三个抽象层次的联系和转换，数据库管理系统在这三级模式之间提供的两层映像：<code>外模式/模式映像</code>和<code>模式/内模式映像</code></p><ul><li><p>两层映像的作用</p><ul><li>这两层映像保证了数据库系统中的数据能够具有较高的<strong>逻辑独立性</strong>和<strong>物理独立性</strong></li></ul></li><li><p>外模式/模式映像</p><ul><li>模式改变时，由数据库管理员对各个 外模式/模式映像 做出相应改变，使外模式保持不变，因为应用程序是根据外模式编写的，从而应用程序不用改变，保证了数据与程序的逻辑独立性—<code>数据的逻辑独立性</code></li></ul></li><li><p>模式/内模式映像</p><ul><li>模式/内模式映像是唯一的，他定义了数据全局逻辑结构与存储结构之间的关系</li><li>当内模式改变时，对各个 模式/内模式映像 做出相应改变，使模式不变，从而应用程序不用改变，保证了数据和程序的物理独立性—<code>数据的物理独立性</code></li></ul></li></ul><h3 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h3><h4 id="硬件平台及数据库"><a href="#硬件平台及数据库" class="headerlink" title="硬件平台及数据库"></a>硬件平台及数据库</h4><ul><li>足够大的内存，存放操作系统，数据库管理系统的核心模块，数据缓冲区和应用程序</li><li>足够大的磁盘存放数据库或备份</li><li>要求系统具有较高的通道能力，提高数据传送率</li></ul><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><ul><li>数据库管理系统</li><li>操作系统</li><li>具有与数据库结构的高级及其编译系统</li></ul><h4 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h4><ul><li><p>数据库管理员（DataBase Administrator ，DBA）</p><ul><li><strong>负责全面的管理和控制数据库系统，职责如下</strong><ul><li>决定数据库的信息内容和结构</li><li>决定数据库的存储结构和策略</li><li>定义数据安全性要求和完整性约束</li><li>监控数据库的运行和使用</li><li>数据库的改进，重组和重构</li></ul></li></ul></li><li><p>系统分析员和数据库设计员</p></li><li><p>应用程序员</p></li><li><p>用户</p></li></ul><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>系统严格来说提出关系模型的是美国IBM公司的E.F.Codd</p><p>关系模型由<code>关系数据结构</code>，<code>关系操作集合</code>和<code>关系完整性</code>三个部分组成</p><h3 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h3><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><h5 id="域"><a href="#域" class="headerlink" title="域"></a>域</h5><ul><li>定义<ul><li>域是一组具有相同数据类型的值的集合</li></ul></li></ul><h5 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h5><p>给定一组域$D_1,D_2···,D_n,$允许其中的某些域是相同的，那么笛卡尔积为</p><p>$D_1\cdot D_2·D_2····D_n=[(d_1,d_2,···，d_n)｜d_i \in D_i,i=1,2,···n]$</p><p>其中每一个元素$(d_1,d_2,···，d_n)$叫做一个n元组（n-tuple）或简称元组（tuple），元素中的每一个值$d_i$叫做一个分量</p><ul><li>一个域允许的不同取值个数称为这个域的基数</li></ul><h5 id="关系-1"><a href="#关系-1" class="headerlink" title="关系"></a>关系</h5><ul><li>某一属性组的值能唯一的标识一个元组，而其子集不能，那么就称这个属性组为<code>候选码（candidate key）</code></li><li>如果一个关系中存在多个候选码，那么选定其中一个作为<code>主码</code></li></ul><p>基本关系存在以下6条性质</p><ul><li>一列是同域的</li><li>不同列可以有相同的域</li><li>列的顺序无所谓</li><li>行的顺序无所谓</li><li>任意两个元组的候选码不能取相同值</li><li>每一个分量必须是不可以分割的数据项</li></ul><p>关系模型要求必须是规范化的</p><ul><li><p>最基本的一条就是关系的每一个分量必须是一个不可分的数据项</p></li><li><p><strong>规范化的关系简称为范式</strong></p></li></ul><h4 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h4><p>关系的描述称为关系模式（relation schema）</p><p>可以表示为R（U,D,DOM,F）</p><ul><li>R为关系名</li><li>U为组成该关系的属性名集合</li><li>D为U中属性所来自的域</li><li>DOM为属性向域的映像集合</li><li>F为属性间数据的依赖关系集合</li></ul><p>关系是元组的集合</p><h4 id="关系数据库-1"><a href="#关系数据库-1" class="headerlink" title="关系数据库"></a>关系数据库</h4><p>关系模型中，实体以及实体之间的联系都是用关系标识，关系是元组的集合，而所有关系的集合构成一个关系数据库</p><ul><li>关系数据库也有<code>type</code>和<code>value</code>之分<ul><li>关系数据库的<code>type</code>称为关系数据库模式，是对关系数据库的描述</li><li>关系数据库的<code>value</code>是这些关系模式在某一时刻对应的关系集合</li></ul></li></ul><h3 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h3><h4 id="基本的关系操作"><a href="#基本的关系操作" class="headerlink" title="基本的关系操作"></a>基本的关系操作</h4><h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><p>关系的查询表达能力很强</p><p>查询操作可以分为</p><ul><li>选择（select）</li><li>投影（project）</li><li></li></ul><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h5><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><h5 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h5><h3 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h3><h2 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h2><h3 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h3><h4 id="SQL（Structured-Query-Language-特点"><a href="#SQL（Structured-Query-Language-特点" class="headerlink" title="SQL（Structured Query Language)特点"></a>SQL（Structured Query Language)特点</h4><h5 id="综合统一"><a href="#综合统一" class="headerlink" title="综合统一"></a>综合统一</h5><h5 id="高度非过程化"><a href="#高度非过程化" class="headerlink" title="高度非过程化"></a>高度非过程化</h5><h5 id="面向集合的操作"><a href="#面向集合的操作" class="headerlink" title="面向集合的操作"></a>面向集合的操作</h5><h5 id="同一语法结构提供多种使用方式"><a href="#同一语法结构提供多种使用方式" class="headerlink" title="同一语法结构提供多种使用方式"></a>同一语法结构提供多种使用方式</h5><h5 id="语言简洁，容易学习"><a href="#语言简洁，容易学习" class="headerlink" title="语言简洁，容易学习"></a>语言简洁，容易学习</h5><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h2 id="数据库安全性"><a href="#数据库安全性" class="headerlink" title="数据库安全性"></a>数据库安全性</h2><h3 id="数据库安全性概述"><a href="#数据库安全性概述" class="headerlink" title="数据库安全性概述"></a>数据库安全性概述</h3><h4 id="数据的安全性"><a href="#数据的安全性" class="headerlink" title="数据的安全性"></a>数据的安全性</h4><ul><li><p><strong>数据库的安全性</strong>是指保护数据库以防止不合法使用造成的数据泄漏，更改或破坏</p></li><li><p>系统安全保护措施是否有效是数据库系统的主要技术指标之一</p></li></ul><h4 id="数据库的不安全因素"><a href="#数据库的不安全因素" class="headerlink" title="数据库的不安全因素"></a>数据库的不安全因素</h4><ul><li>非授权用户对数据库的恶意存储和破坏</li><li>数据库中重要或敏感的数据泄漏</li><li>安全环境的脆弱性</li></ul><h4 id="安全标准简介"><a href="#安全标准简介" class="headerlink" title="安全标准简介"></a>安全标准简介</h4><h5 id="安全级性级别划分"><a href="#安全级性级别划分" class="headerlink" title="安全级性级别划分"></a>安全级性级别划分</h5><ul><li>安全策略</li><li>安全责任</li><li>安全保证</li><li>安全文档</li></ul><h5 id="TCSEC-x2F-TDI（Trusted-Computer-System-Evalution-Criteria-x2F-Trusted-Database-Interpretation）安全级别划分"><a href="#TCSEC-x2F-TDI（Trusted-Computer-System-Evalution-Criteria-x2F-Trusted-Database-Interpretation）安全级别划分" class="headerlink" title="TCSEC/TDI（Trusted Computer System Evalution Criteria/Trusted Database Interpretation）安全级别划分"></a>TCSEC/TDI（Trusted Computer System Evalution Criteria/Trusted Database Interpretation）安全级别划分</h5><table><thead><tr><th align="center">安全级别</th><th align="center">定义</th><th align="center"></th></tr></thead><tbody><tr><td align="center">A1</td><td align="center">验证设计（verified design）</td><td align="center"></td></tr><tr><td align="center">B3</td><td align="center">安全域（security domains）</td><td align="center"></td></tr><tr><td align="center">B2</td><td align="center">结构化保护（structural protection）</td><td align="center"></td></tr><tr><td align="center"><strong>B1</strong></td><td align="center"><strong>标记安全保护（labeled security protection）</strong></td><td align="center"></td></tr><tr><td align="center">C2</td><td align="center">受控的存取保护（controlled access protection）</td><td align="center"></td></tr><tr><td align="center"><strong>C1</strong></td><td align="center"><strong>自主安全保护（discretionary security protection）</strong></td><td align="center"></td></tr><tr><td align="center">D</td><td align="center">最小保护（minimal protection）</td><td align="center"></td></tr></tbody></table><h5 id="CC-（Common-Criteria）评估保证级（Evaluation-Assurance-Level）"><a href="#CC-（Common-Criteria）评估保证级（Evaluation-Assurance-Level）" class="headerlink" title="CC （Common Criteria）评估保证级（Evaluation Assurance Level）"></a>CC （Common Criteria）评估保证级（Evaluation Assurance Level）</h5><p>目前CC已经基本取代了TCSEC，CC是在上述各评估准则及具体实践的基础相互总结和发展而来</p><table><thead><tr><th align="center">评估保证级（Evaluation Assurance Level）</th><th>定义</th><th align="center">TCSEC安全级别（近似相当）</th></tr></thead><tbody><tr><td align="center">EAL1</td><td>功能测试（functionally tested）</td><td align="center"></td></tr><tr><td align="center"><strong>EAL2</strong></td><td><strong>结构测试（structurally tested）</strong></td><td align="center">C1</td></tr><tr><td align="center"><strong>EAL3</strong></td><td><strong>系统测试和检查（methodically tested and checked）</strong></td><td align="center">C2</td></tr><tr><td align="center">EAL4</td><td>系统设计，测试和复查（methodically designed，tested ，and reviewed）</td><td align="center">B1</td></tr><tr><td align="center">EAL5</td><td>半形式化设计和测试（semiformally disigned and tested）</td><td align="center">B2</td></tr><tr><td align="center">EAL6</td><td>半形式化验证的设计和测试（semiformally verified designed and tested）</td><td align="center">B3</td></tr><tr><td align="center"><strong>EAL7</strong></td><td><strong>形式化验证的设计和测试（formally verified design and tested）</strong></td><td align="center">A1</td></tr></tbody></table><h3 id="数据库安全性控制"><a href="#数据库安全性控制" class="headerlink" title="数据库安全性控制"></a>数据库安全性控制</h3><h4 id="用户身份鉴别"><a href="#用户身份鉴别" class="headerlink" title="用户身份鉴别"></a>用户身份鉴别</h4><ul><li>用户身份鉴别是数据库管理系统提供的最外层安全保护措施</li><li>常见的例如如下<ul><li>静态口令鉴别</li><li>动态口令鉴别</li><li>生物特征鉴别</li><li>智能卡鉴别</li></ul></li></ul><h4 id="存取控制"><a href="#存取控制" class="headerlink" title="存取控制"></a>存取控制</h4><p>存取控制机制主要包括定义<strong>用户权限</strong>和<strong>合法权限</strong>检查两个部分</p><h5 id="定义用户权限"><a href="#定义用户权限" class="headerlink" title="定义用户权限"></a>定义用户权限</h5><p>数据库管理系统提供适当的语言来定义用户权限，这些定义经过编译后存储在数据字典里面，被称作<em>安全规则</em>或<em>授权规则</em></p><ul><li>权限：用户对某一数据对象的操作权利</li></ul><h5 id="合法权限检查"><a href="#合法权限检查" class="headerlink" title="合法权限检查"></a>合法权限检查</h5><p>用户发出对数据库的操作请求后，数据库管理系统会查找数据字典，根据安全规则进行合法权限检查若用户的操作请求超出了定义的权限</p><p>系统将拒绝执行此操作</p><h4 id="自主存取控制"><a href="#自主存取控制" class="headerlink" title="自主存取控制"></a>自主存取控制</h4><p>SQL标准对自主存取控制提供支持，主要通过SQl的<strong>GRANT</strong>语句和<strong>REVOKE</strong>语句实现</p><p>用户权限由两个要素组成：数据库对象和操作类型</p><ul><li>授权：定义存储权限</li></ul><h4 id="授权：授予与收回"><a href="#授权：授予与收回" class="headerlink" title="授权：授予与收回"></a>授权：授予与收回</h4><h5 id="GRANT语句"><a href="#GRANT语句" class="headerlink" title="GRANT语句"></a>GRANT语句</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Grant &lt;权限&gt;[,&lt;权限&gt;]on &lt;对象类型&gt; &lt;对象名&gt;,[&lt;对象类型&gt; &lt;对象名&gt;]to &lt;用户&gt;,[&lt;用户&gt;][WITH GRANT OPTION]; -- 如果知道你指定 with grant option子句,那么获得权限的用户可以把这个权限赋予给其他用户-- 否则，获得权限的用户只有使用权限而没有传播权限grant select on table `student`to `USER_01`；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="REMOVE"><a href="#REMOVE" class="headerlink" title="REMOVE"></a>REMOVE</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE &lt;权限&gt;,[&lt;权限&gt;]on &lt;对象类型&gt; &lt;对象名&gt;,[&lt;对象类型&gt; &lt;对象名&gt;]from &lt;用户&gt;,[&lt;用户&gt;][cascade][restrict]-- cascade（级联）：收回该用户该权限的时候同时收回该用户传播出去的该权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="创建数据库模式的权限"><a href="#创建数据库模式的权限" class="headerlink" title="创建数据库模式的权限"></a>创建数据库模式的权限</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create user&lt;username&gt; [with][dba][resource][connect];/*新创建的数据库用户有三种权限 1.connect： 需要有权限才能进行操作2.resource ： 能创建基本表和视图，不可以创建新的用户3.dba : 超级用户 注意：create user语句不是sql标准，不同的数据库管理系统具体看*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限与可执行的操作对照表</strong></p><table><thead><tr><th>拥有的权限</th><th>create user</th><th>create schema</th><th>create table</th><th>登陆数据库，执行数据库操作</th></tr></thead><tbody><tr><td>DBA</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>resource</td><td>no</td><td>no</td><td>yes</td><td>yes</td></tr><tr><td>connect</td><td>no</td><td>no</td><td>no</td><td>可以但需要被给予权限</td></tr></tbody></table><h4 id="数据库角色"><a href="#数据库角色" class="headerlink" title="数据库角色"></a>数据库角色</h4><h5 id="数据库角色的定义"><a href="#数据库角色的定义" class="headerlink" title="数据库角色的定义"></a>数据库角色的定义</h5><ul><li>数据库角色是被命名的一组与数据库操作相关的权限，角色是权限的集合</li></ul><h5 id="sql语句上对角色的操作"><a href="#sql语句上对角色的操作" class="headerlink" title="sql语句上对角色的操作"></a>sql语句上对角色的操作</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">```#### 强制存取控制### 视图机制视图机制间接的实现支持存取谓词的用户权限定义```mysql-- 创建视图create view cs_student as select * from student where Sdept='CS';grant select on cs_student to  '老师'; grant select all privileges on cs_student to '主任';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><p><strong>审计功能</strong>是把用户对数据库的所有操作自动记录下来放入审计日志，审计员可以利用审计日志监控数据库中的各种行为，重现导致数据库现有状态的一系列事件，找出非法存取数据的人，时间和内容等</p><h4 id="审计事件"><a href="#审计事件" class="headerlink" title="审计事件"></a>审计事件</h4><ul><li>服务器时间</li><li>系统权限</li><li>语句事件</li><li>模式对象事件</li></ul><h4 id="审计功能"><a href="#审计功能" class="headerlink" title="审计功能"></a>审计功能</h4><ul><li>基本功能</li><li>提供多套审计规则</li><li>提供审计分析和报表功能</li><li>审计日志管理功能，包括纺织审计员误删操作</li><li>系统提供查询审计设置及审计记录信息的专门视图</li></ul><h4 id="audit语句和noaudit语句"><a href="#audit语句和noaudit语句" class="headerlink" title="audit语句和noaudit语句"></a>audit语句和noaudit语句</h4><ul><li>audit语句用来设置审计功能,noaudit语句用来取消审计功能</li><li>审计一般分为用户级审计和系统级审计<ul><li>用户级审计就是任何用户可设置的审计，主要是用户针对自己创建的数据库表或者视图进行审计</li><li>系统级审计只能又数据库管理员设置，用来检测成功或失败的登陆要求，监测授权和收回操作以及其他数据库级权限下的操作</li></ul></li></ul><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><p>加密的基本思想是根据一定的算法将原始数据-明文（plain text）变换为不可直接识别的格式-密文（cipher text）</p><p>数据加密主要包括<strong>存储加密</strong>和<strong>传输加密</strong></p><h4 id="存储加密"><a href="#存储加密" class="headerlink" title="存储加密"></a>存储加密</h4><p> 对于存储加密，一般提供透明和非透明两种存储加密方式</p><ul><li>透明存储加密是内核级别加密保护方式<ul><li>透明存储加密是数据在写到磁盘时对数据进行加密，授权用户读取数据时在对其进行解密</li></ul></li><li>非透明存储加密是通过加密函数实现的</li></ul><h4 id="传输加密"><a href="#传输加密" class="headerlink" title="传输加密"></a>传输加密</h4><p>常用的传输加密方式如<strong>链路加密</strong>和<strong>端到端加密</strong></p><ul><li>链路加密对传输数据在链路层进行加密，他的传输信息由报头和报文两部分组成<ul><li>前者是路由选择信息</li><li>后者是传输的数据信息</li></ul></li><li>端到端加密对传输数据在发送端加密，接收端解密<ul><li>它只加加密报文，不加密报头</li></ul></li></ul><h4 id="SSL（Security-Socket-Layer）基于安全套接层协议"><a href="#SSL（Security-Socket-Layer）基于安全套接层协议" class="headerlink" title="SSL（Security Socket Layer）基于安全套接层协议"></a>SSL（Security Socket Layer）基于安全套接层协议</h4><h3 id="其他安全性保护"><a href="#其他安全性保护" class="headerlink" title="其他安全性保护"></a>其他安全性保护</h3><h4 id="推理控制（inference-control）"><a href="#推理控制（inference-control）" class="headerlink" title="推理控制（inference control）"></a>推理控制（inference control）</h4><ul><li>推理控制处理的是强制存取控制未解决的问题</li><li>数据库推理控制机制用来避免用户利用其能够访问的数据推知更高密级的数据</li></ul><h4 id="隐蔽信道（covert-channal）"><a href="#隐蔽信道（covert-channal）" class="headerlink" title="隐蔽信道（covert channal）"></a>隐蔽信道（covert channal）</h4><ul><li>隐蔽信道处理内容是强制存取控制未解决的问题</li></ul><h4 id="数据隐私（data-privacy）"><a href="#数据隐私（data-privacy）" class="headerlink" title="数据隐私（data privacy）"></a>数据隐私（data privacy）</h4><ul><li>数据隐私是控制不愿被他人知道或他人不便知道的个人数据的能力</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>随着数据库的发展安全越来越重要，数据库管理系统提供的安全措施主要包括</p><ul><li>用户身份鉴别</li><li>自主存取控制</li><li>强制存取控制技术</li><li>视图技术</li><li>审计技术</li><li>数据加密技术</li><li>加密传输</li></ul><h2 id="数据库完整性"><a href="#数据库完整性" class="headerlink" title="数据库完整性"></a>数据库完整性</h2><ul><li><strong>数据的完整性</strong>是指数据的正确性和相容性</li></ul><p>为了维护数据的完整性，数据库管理系统必须能够实现如下功能</p><ol><li><p><strong>提供定义完整性约束条件的约束</strong></p><ul><li><p>完整性约束条件也叫做完整性规则，是数据库中的数据必须满足的语义约束条件</p></li><li><p>sql标准使用了一系列的概念来描述完整性</p><ul><li>关系模型的实体完整性</li><li>参照完整性</li><li>用户定义完整性</li></ul></li></ul></li><li><p><strong>提供完整性检查的方法</strong></p><ul><li>数据库管理系统中检查数据是否满足完整性约束条件的机制称为<strong>完整性检查</strong></li><li>一般也就是在insert,update,delete语句执行后开始检查，检查数据是否违背了完整性约束条件</li></ul></li><li><p><strong>进行违约处理</strong></p></li></ol><p><strong>关系数据库管理系统使得完整性控制成为其核心支持的功能，从而能够为所有用户和应用提供一致的数据库完整性</strong></p><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><h4 id="定义实体完整性"><a href="#定义实体完整性" class="headerlink" title="定义实体完整性"></a>定义实体完整性</h4><ul><li>关系模型的实体完整性在create table 中用<code>primary key</code> 定义</li><li>对单属性的构成的码有两种说明方法<ul><li>一种是定义为列级约束条件</li><li>一种是定义为表级约束条件</li></ul></li><li>但是对于多个属性构成的码只有一种说明方法，即定义为表级约束条件</li></ul><h4 id="实体完整性检查和违约处理"><a href="#实体完整性检查和违约处理" class="headerlink" title="实体完整性检查和违约处理"></a>实体完整性检查和违约处理</h4><ul><li>检查主码值是否唯一，如果不唯一拒绝插入或修改</li><li>检查主码的各个属性是否为空，只要有一个为空拒绝插入或修改</li></ul><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><h4 id="定义参照完整性"><a href="#定义参照完整性" class="headerlink" title="定义参照完整性"></a>定义参照完整性</h4><ul><li>关系模型的参照完整性在<code>create table</code>中用<code>foreion key&lt;属性名&gt;references &lt;表&gt;&lt;属性名&gt;</code>语句定义参照</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(sno varchar(20) not null ,    primary key(sno),    foreign key (sno) references student(sno));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参照完整性检查和违约处理"><a href="#参照完整性检查和违约处理" class="headerlink" title="参照完整性检查和违约处理"></a>参照完整性检查和违约处理</h4><ol><li><p>拒绝执行（no action）</p><ul><li>一般设置这个为默认策略</li></ul></li><li><p>级联操作（cascade）</p></li><li><p>设置为空值</p></li></ol><h4 id="在创建表的时候显式的说明参照策略"><a href="#在创建表的时候显式的说明参照策略" class="headerlink" title="在创建表的时候显式的说明参照策略"></a>在创建表的时候显式的说明参照策略</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc (sno varchar(9) not null,    foreign key(sno) references student(sno)     on delete cascade-- 申明删除为级联操作    onupdate no action -- 申明更新为拒绝执行策略);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h3><h4 id="属性上的约束条件"><a href="#属性上的约束条件" class="headerlink" title="属性上的约束条件"></a>属性上的约束条件</h4><h5 id="属性上约束条件的定义"><a href="#属性上约束条件的定义" class="headerlink" title="属性上约束条件的定义"></a>属性上约束条件的定义</h5><p>在<code>create table </code>中定义属性的同时可以定义属性约束条件</p><p>列值非空（not null）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(sno varchar(9) not null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>列值唯一 （unique）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(sno varchar(9) unique;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>检查列值是否满足一个条件表达式（<strong>check短语</strong>）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table sc(sex char(2) check(sex in ('man','woman'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="属性上约束条件的检查和违约处理"><a href="#属性上约束条件的检查和违约处理" class="headerlink" title="属性上约束条件的检查和违约处理"></a>属性上约束条件的检查和违约处理</h5><p>当往表中插入元组或修改属性的值时，关系数据库管理员系统会检查相属性上的约束条件是否被满足，如果不满足那么条件拒绝执行。</p><h4 id="元组上的约束条件"><a href="#元组上的约束条件" class="headerlink" title="元组上的约束条件"></a>元组上的约束条件</h4><h5 id="元组上约束条件的定义"><a href="#元组上约束条件的定义" class="headerlink" title="元组上约束条件的定义"></a>元组上约束条件的定义</h5><p>在<code>create table </code>语句中用<code>check</code>短语定义元组上的约束条件即元组级的限制。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(sex varchar(3),    sname char(9) not null,    check(sex='女' or name not like 'Ms.%');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="元组上约束条件的检查和违约处理"><a href="#元组上约束条件的检查和违约处理" class="headerlink" title="元组上约束条件的检查和违约处理"></a>元组上约束条件的检查和违约处理</h5><p>当往表中插入元组或修改属性的值时，关系数据库管理系统将检查元组上的约束条件是否被满足</p><h3 id="完整性约束命名子句"><a href="#完整性约束命名子句" class="headerlink" title="完整性约束命名子句"></a>完整性约束命名子句</h3><h4 id="完整性约束命名子句-1"><a href="#完整性约束命名子句-1" class="headerlink" title="完整性约束命名子句"></a>完整性约束命名子句</h4><p><code>constraint &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt;</code></p><p>完整性约束条件 包括<code>not null </code>,<code>unique</code>,<code>primary key</code>,<code>foreign key</code>,<code>check</code>等</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table student(sno int(20)    constraint c1 check(sno between 100 and 200),    sname varchar(20)    constraint c2 not null,    constraint studentKey primary key(sno));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改表中的完整性限制"><a href="#修改表中的完整性限制" class="headerlink" title="修改表中的完整性限制"></a>修改表中的完整性限制</h4><p>可以使用<code>alter table </code>语句修改表中的完整性限制</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除完整性限制alter tabel student drop constraint c1;-- 添加完整性约束alter table student add constraint c1 check(sno between 100 and 200);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="域中的完整性限制"><a href="#域中的完整性限制" class="headerlink" title="域中的完整性限制"></a>域中的完整性限制</h3><p>sql支持域的概念，并可以用<code>create domain</code>语句建立一个域以及该域应该满足的完整性约束条件</p><ul><li>用域来定义属性的优点是<ul><li>数据库中的不同的属性可以来自同一个域，当域上的完整性与约束条件改变时，只要修改域的定义就可以了，而不需要一一修改域的各个属性</li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 建立一个域并且声明一个域的取值范围create domain sex varchar(4) check(value in ('man','women');-- 建立一个域，并且对其中的限制命名create domain sex varchar(4) constraint checkSex check(value in ('man','women');-- 删除域的限制条件alter domain sex drop constraint checkSex;-- 在域上添加限制条件alter domain sex add constraint checkSex check(value in('man','women');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><ul><li>在SQl中，可以使用数据定义语言中的<code>create assertion</code>语句，通过声明性断言，来指定更具一般性的约束，可以定义涉及多个表或聚集操作的比较复杂的完整性约束。</li><li>断言创建以后，任何对断言中所涉及关系的操作会出发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行</li></ul><h4 id="创建断言的语句格式"><a href="#创建断言的语句格式" class="headerlink" title="创建断言的语句格式"></a>创建断言的语句格式</h4><p><code>create assertion &lt;断言名&gt;&lt;check 子句&gt;</code></p><p>每一个断言都会被赋予一个名字，并且check子句中的约束条件与where子句的条件表达式类似</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create assertion asse_sc_db_numbercheck(60 &gt;=(select count(*) from cource where  course.cname ='数据库');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除断言的语句格式"><a href="#删除断言的语句格式" class="headerlink" title="删除断言的语句格式"></a>删除断言的语句格式</h4><p><code>drop assertion &lt;断言名&gt;</code></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><h1 id="设计与应用开发篇"><a href="#设计与应用开发篇" class="headerlink" title="设计与应用开发篇"></a>设计与应用开发篇</h1><h2 id="关系数据理论"><a href="#关系数据理论" class="headerlink" title="关系数据理论"></a>关系数据理论</h2><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><h3 id="数据依赖的公理系统"><a href="#数据依赖的公理系统" class="headerlink" title="数据依赖的公理系统"></a>数据依赖的公理系统</h3><h3 id="模式的分解"><a href="#模式的分解" class="headerlink" title="模式的分解"></a>模式的分解</h3><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="数据库设计概述"><a href="#数据库设计概述" class="headerlink" title="数据库设计概述"></a>数据库设计概述</h3><p>数据库设计：对一个给定的应用环境，构造优化的数据库逻辑模式和物理结构，并据此建立数据库及其应用系统，使之能够有效地存储和管理数据，满足各种用户的应用需求，包括信息管理要求和数据操作</p><h4 id="数据库设计的特点"><a href="#数据库设计的特点" class="headerlink" title="数据库设计的特点"></a>数据库设计的特点</h4><ul><li>数据库建设的基本规律</li><li>结构设计和行为设计结合</li></ul><h4 id="数据库设计方法"><a href="#数据库设计方法" class="headerlink" title="数据库设计方法"></a>数据库设计方法</h4><ul><li>E-R图</li><li>范式（normal format）</li></ul><h4 id="数据库设计步骤"><a href="#数据库设计步骤" class="headerlink" title="数据库设计步骤"></a>数据库设计步骤</h4><ul><li>需求分析</li><li>概念设计</li><li>逻辑设计</li><li>物理设计</li><li>数据库实现</li><li>数据库运行和维护</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><h4 id="需求分析的任务"><a href="#需求分析的任务" class="headerlink" title="需求分析的任务"></a>需求分析的任务</h4><p>调查的重点是数据和处理，通过调查，收集和分析，获得用户对数据库的要求</p><h4 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h4><p>数据字典是进行详细数据收集和数据分析获得的主要成果，是关于数据库中数据的描述，即元数据，而不是数据本身。</p><blockquote><p>组成部分</p></blockquote><p>数据字典通常包括</p><ul><li>数据项</li><li>数据结构</li><li>数据流</li><li>数据结构</li><li>数据存储</li><li>处理过程</li></ul><p>其中数据项是数据的最小组成单位</p><h3 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="概念结构设计"></a>概念结构设计</h3><h4 id="概念模型-1"><a href="#概念模型-1" class="headerlink" title="概念模型"></a>概念模型</h4><blockquote><p>概念模型的主要特点</p></blockquote><ul><li>真实、充分的反映现实世界，事物和事物之间的关系</li><li>易于理解</li><li>易于更改</li><li>易于向关系，网状，层次等各种数据模型转换</li></ul><h4 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h4><p>知道形状对应的含义即可</p><h4 id="UML（Unit-Management-Language）"><a href="#UML（Unit-Management-Language）" class="headerlink" title="UML（Unit Management Language）"></a>UML（Unit Management Language）</h4><p>知道形状对应的含义即可</p><h4 id="概念结构设计-1"><a href="#概念结构设计-1" class="headerlink" title="概念结构设计"></a>概念结构设计</h4><blockquote><p>实体和属性的划分原则</p></blockquote><p>为了简化E-R图，现实世界的事物能作为属性的尽可能的归为属性</p><ul><li>作为属性，不能在具有需要描述的性质</li><li>属性不能于其他实体具有联系</li></ul><blockquote><p>E-R图的集成</p></blockquote><p>各个子系统的E-R图之间的冲突主要有三类：</p><ul><li>属性冲突</li><li>命名冲突</li><li>结构冲突</li></ul><blockquote><p>属性冲突</p></blockquote><ul><li>属性域冲突</li><li>属性取值单位冲突</li></ul><blockquote><p>命名冲突</p></blockquote><ul><li>同名异义</li><li>异名同义</li></ul><blockquote><p>结构冲突</p></blockquote><ul><li>同一个对象在不同应用中具有不同的抽象</li><li>同一实体在不同子系统E-R中包含的属性个数和属性排序次序不完全相同</li><li>实体间的联系不同的E-R图中为不同的类型</li></ul><h3 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h3><h4 id="E-R转换关系模式"><a href="#E-R转换关系模式" class="headerlink" title="E-R转换关系模式"></a>E-R转换关系模式</h4><p>自己看着转换成关系模式</p><h4 id="数据模型的优化"><a href="#数据模型的优化" class="headerlink" title="数据模型的优化"></a>数据模型的优化</h4><p><strong>通过规范化理论为指导优化关系数据模型</strong></p><ul><li>确定数据依赖</li><li>消除冗余联系</li><li>确定范式级别</li></ul><h3 id="物理结构设计"><a href="#物理结构设计" class="headerlink" title="物理结构设计"></a>物理结构设计</h3><p>数据库的设计通常分为两步</p><ul><li>确定数据库的物理结构：存取方法和数据结构</li><li>对物理结构进行评价：时空效率</li></ul><h4 id="关系模式存取方法选择"><a href="#关系模式存取方法选择" class="headerlink" title="关系模式存取方法选择"></a>关系模式存取方法选择</h4><p>常用的存取方法有</p><ul><li>索引方法</li><li>聚蔟方法</li></ul><blockquote><p>索引方法</p></blockquote><ul><li>B+树索引存取方法</li><li>hash索引存取方法的选择</li></ul><blockquote><p>聚蔟方法</p></blockquote><ul><li><em>聚蔟码</em>：属性上有相同值的元组集中存放在连续的物理块中称为聚蔟，该属性称为聚蔟码</li></ul><h3 id="数据库的实施和维护"><a href="#数据库的实施和维护" class="headerlink" title="数据库的实施和维护"></a>数据库的实施和维护</h3><blockquote><p>数据库的运行和维护</p></blockquote><ul><li>数据库的转储和恢复</li><li>数据库的安全性，完整性控制</li><li>数据库性能的监督，分析和改造</li><li>数据库的重组织与重构造<ul><li>重组织：并不修改原设计的逻辑和物理结构</li><li>重构造：部分修改数据库的模式和内模式</li></ul></li></ul><h2 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h2><h3 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h3><h3 id="过程化SQL"><a href="#过程化SQL" class="headerlink" title="过程化SQL"></a>过程化SQL</h3><h3 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h3><h1 id="系统篇"><a href="#系统篇" class="headerlink" title="系统篇"></a>系统篇</h1><h2 id="关系查询处理和查询优化"><a href="#关系查询处理和查询优化" class="headerlink" title="关系查询处理和查询优化"></a>关系查询处理和查询优化</h2><h2 id="数据库恢复技术"><a href="#数据库恢复技术" class="headerlink" title="数据库恢复技术"></a>数据库恢复技术</h2><h3 id="事务的基本概念"><a href="#事务的基本概念" class="headerlink" title="事务的基本概念"></a>事务的基本概念</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>事务指用户定义的一个数据库操作序列，这些操作要么全部执行成功，要么全部不执行。</li><li>事务作为一个最小的工作单位，不可分割</li></ul><p>事务在mysql中可以由用户显式的控制</p><ul><li>COMMIT：提交事务的所有操作</li><li>RELLBACK：回滚，对数据库所有已完成的操作撤销，回滚到事务开始的状态</li></ul><h4 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h4><ul><li>原子性（Atomicity）<ul><li>事务是数据库的逻辑工作单位</li></ul></li><li>一致性（Consistency）<ul><li>事务执行的记过必须使数据库从一个一致性状态变到另一个一致性状态</li></ul></li><li>隔离性（Isolation）<ul><li>一个事务的执行不能被其他事务干扰</li></ul></li><li>持续性（Durability）<ul><li>一个事务一旦提交，对数据库中数据的改变就是持续不变的。</li></ul></li></ul><p>可能导致的失败因素有</p><ul><li>多个事务并行操作，不同事务的操作交叉运行</li><li>事务操作在运行过程中被强制关闭</li></ul><h3 id="故障的分类"><a href="#故障的分类" class="headerlink" title="故障的分类"></a>故障的分类</h3><h4 id="事务内部的故障"><a href="#事务内部的故障" class="headerlink" title="事务内部的故障"></a>事务内部的故障</h4><p>事务内部的故障是非预期的，不能由应用程序处理的、例如运算溢出，死锁</p><h4 id="系统故障"><a href="#系统故障" class="headerlink" title="系统故障"></a>系统故障</h4><ul><li>系统故障：造成系统停止运转的任何事件，使得系统要重新启动</li></ul><h4 id="介质故障"><a href="#介质故障" class="headerlink" title="介质故障"></a>介质故障</h4><ul><li>系统故障：软故障</li><li>介质故障：硬故障</li></ul><h4 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h4><ul><li>计算机病毒：是一个人为的故障或破坏，是人为研制的计算机程序</li></ul><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>各类故障对数据库的影响有两种可能性</p><ul><li>数据库本身被破坏</li><li>数据不正确</li></ul><p>数据恢复的原理就是：冗余数据</p><h3 id="恢复的实现技术"><a href="#恢复的实现技术" class="headerlink" title="恢复的实现技术"></a>恢复的实现技术</h3><p>建立冗余数据的最常用的技术就是：</p><ul><li>数据转储</li><li>登记日志文件</li></ul><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><h2 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h2>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac</title>
      <link href="/2022/02/18/za-pian/mac/"/>
      <url>/2022/02/18/za-pian/mac/</url>
      
        <content type="html"><![CDATA[<h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><h3 id="下载brew"><a href="#下载brew" class="headerlink" title="下载brew"></a>下载brew</h3><p>链接:<a href="https://brew.sh/">https://brew.sh/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新</span>brew updatebrew outdated  <span class="token comment">#查看那些包可以更新</span>brew upgrade             <span class="token comment"># 更新所有的包</span>brew upgrade <span class="token variable">$FORMULA</span>    <span class="token comment"># 更新指定的包</span>brew cleanup             <span class="token comment"># 清理所有包的旧版本</span>brew cleanup <span class="token variable">$FORMULA</span>    <span class="token comment"># 清理指定包的旧版本</span>brew cleanup -n          <span class="token comment"># 查看可清理的旧版本包，不执行实际操作</span><span class="token comment">#实现某个软件的版本控制</span>brew pin <span class="token variable">$FORMULA</span>      <span class="token comment"># 锁定某个包</span>brew unpin <span class="token variable">$FORMULA</span>    <span class="token comment"># 取消锁定</span><span class="token comment"># 显示已经安装的软件</span>brew list <span class="token comment"># 显示某个包的信息</span>brew info <span class="token variable">$FORMULA</span>    <span class="token comment"># 显示安装了包数量，文件数量，和总占用空间</span>brew info              <span class="token comment"># 查看已安装的包的依赖，树形显示</span>brew deps --installed --tree   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nvim"><a href="#Nvim" class="headerlink" title="Nvim"></a>Nvim</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-shelll" data-language="shelll"><code class="language-shelll">brew install neovim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件一般设置在<code>~/.config/nvim</code></p><h4 id="剪贴板配置"><a href="#剪贴板配置" class="headerlink" title="剪贴板配置"></a>剪贴板配置</h4><p>配置在init.vim里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">配置位置在~/.config/nvim初始文件为 init.vim<span class="token comment">#添加剪贴板插件 xclip</span>在init.vim 里面添加 <span class="token builtin class-name">set</span> <span class="token assign-left variable">clipboard</span><span class="token operator">=</span>unnamed  <span class="token comment"># 本质好像是跟系统的剪贴板取值一样，就跟实现跟系统共用一个剪贴板</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="init-vim文件"><a href="#init-vim文件" class="headerlink" title="init.vim文件"></a>init.vim文件</h4><p>该文件主要实现设置nvim的状态栏，行号，以及加载配置文件的功能</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">clipboard</span><span class="token operator">=</span>unnamed<span class="token string">""</span>Fundamentals <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token string">" init autocmdautocmd!"</span> <span class="token builtin class-name">set</span> script encodingscriptencoding utf-8<span class="token string">" stop loading config if it's on tiny or smallif !1 | finish | endifset nocompatibleset numbersyntax enableset fileencodings=utf-8,sjis,euc-jp,latinset encoding=utf-8set titleset autoindentset background=darkset nobackupset hlsearchset showcmdset cmdheight=2set laststatus=2set scrolloff=10set expandtab"</span><span class="token builtin class-name">let</span> loaded_matchparen <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">shell</span><span class="token operator">=</span>zsh<span class="token builtin class-name">set</span> <span class="token assign-left variable">backupskip</span><span class="token operator">=</span>/tmp/*,/private/tmp/*<span class="token string">" incremental substitution (neovim)if has('nvim')  set inccommand=splitendif"</span> Suppress appending <span class="token operator">&lt;</span>PasteStart<span class="token operator">&gt;</span> and <span class="token operator">&lt;</span>PasteEnd<span class="token operator">&gt;</span> when pasting<span class="token builtin class-name">set</span> <span class="token assign-left variable">t_BE</span><span class="token operator">=</span><span class="token builtin class-name">set</span> nosc noru nosm<span class="token string">" Don't redraw while executing macros (good performance config)set lazyredraw"</span><span class="token builtin class-name">set</span> showmatch<span class="token string">" How many tenths of a second to blink when matching brackets"</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">mat</span><span class="token operator">=</span><span class="token number">2</span><span class="token string">" Ignore case when searchingset ignorecase"</span> Be smart when using tabs <span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token builtin class-name">set</span> smarttab<span class="token string">" indentsfiletype plugin indent onset shiftwidth=2set tabstop=2set ai "</span>Auto indent<span class="token builtin class-name">set</span> si <span class="token string">"Smart indentset nowrap "</span>No Wrap lines<span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span>start,eol,indent<span class="token string">" Finding files - Search down into subfoldersset path+=**set wildignore+=*/node_modules/*"</span> Turn off <span class="token function">paste</span> mode when leaving insertautocmd InsertLeave * <span class="token builtin class-name">set</span> nopaste<span class="token string">" Add asterisks in block commentsset formatoptions+=r"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">""</span>Highlights <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token builtin class-name">set</span> cursorline<span class="token string">"set cursorcolumn"</span> Set cursor line color on visual modehighlight Visual <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token number">236</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span>NONE <span class="token assign-left variable">guibg</span><span class="token operator">=</span>Grey40highlight LineNr <span class="token assign-left variable">cterm</span><span class="token operator">=</span>none <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token number">240</span> <span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token comment">#2b506e guibg=#000000</span>augroup BgHighlight  autocmd<span class="token operator">!</span>  autocmd WinEnter * <span class="token builtin class-name">set</span> cul  autocmd WinLeave * <span class="token builtin class-name">set</span> noculaugroup END<span class="token keyword">if</span> <span class="token operator">&amp;</span>term <span class="token operator">=~</span> <span class="token string">"screen"</span>  autocmd BufEnter * <span class="token keyword">if</span> bufname<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">!</span>~ <span class="token string">"^?[A-Za-z0-9?]*://"</span> <span class="token operator">|</span> silent<span class="token operator">!</span> exe <span class="token string">'!echo -n "\ek[`hostname`:`basename $PWD`/`basename %`]\e\\"'</span> <span class="token operator">|</span> endif  autocmd VimLeave * silent<span class="token operator">!</span>  exe <span class="token string">'!echo -n "\ek[`hostname`:`basename $PWD`]\e\\"'</span>endif<span class="token string">"}}}"</span> File types <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token string">" JavaScriptau BufNewFile,BufRead *.es6 setf javascript"</span> TypeScriptau BufNewFile,BufRead *.tsx setf typescriptreact<span class="token string">" Markdownau BufNewFile,BufRead *.md set filetype=markdownau BufNewFile,BufRead *.mdx set filetype=markdown"</span> Flowau BufNewFile,BufRead *.flow <span class="token builtin class-name">set</span> <span class="token assign-left variable">filetype</span><span class="token operator">=</span>javascript<span class="token string">" Fishau BufNewFile,BufRead *.fish set filetype=fishset suffixesadd=.js,.es,.jsx,.json,.css,.less,.sass,.styl,.php,.py,.mdautocmd FileType coffee setlocal shiftwidth=2 tabstop=2autocmd FileType ruby setlocal shiftwidth=2 tabstop=2autocmd FileType yaml setlocal shiftwidth=2 tabstop=2"</span><span class="token string">"}}}"</span><span class="token string">"Imports "</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">" ---------------------------------------------------------------------runtime ./plug.vimif has("</span>unix<span class="token string">")  let s:uname = system("</span><span class="token function">uname</span> -s<span class="token string">")  "</span> Do Mac stuff  <span class="token keyword">if</span> s:uname <span class="token operator">==</span> <span class="token string">"Darwin<span class="token entity" title="\n">\n</span>"</span>    runtime ./macos.vim  endifendif<span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'win32'</span><span class="token punctuation">)</span>  runtime ./windows.vimendifruntime ./maps.vim<span class="token string">"}}}"</span> Syntax theme <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token string">" true colorif exists("</span><span class="token operator">&amp;</span>termguicolors<span class="token string">") &amp;&amp; exists("</span><span class="token operator">&amp;</span>winblend<span class="token string">")  syntax enable  set termguicolors  set winblend=0  set wildoptions=pum  set pumblend=5  set background=dark  "</span> Use NeoSolarized  <span class="token builtin class-name">let</span> g:neosolarized_termtrans<span class="token operator">=</span><span class="token number">1</span>  runtime ./colors/NeoSolarized.vim  colorscheme NeoSolarizedendif<span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">""</span>Extras <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token builtin class-name">set</span> exrc<span class="token string">"}}}"</span> vim: <span class="token builtin class-name">set</span> <span class="token assign-left variable">foldmethod</span><span class="token operator">=</span>marker <span class="token assign-left variable">foldlevel</span><span class="token operator">=</span><span class="token number">0</span>:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Plug-vim文件"><a href="#Plug-vim文件" class="headerlink" title="Plug.vim文件"></a>Plug.vim文件</h4><ul><li><p>放在<strong>nvim</strong>目录下</p></li><li><p>管理nvim插件的，需要去github上找plug文件下载到</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">"nvim"</span><span class="token punctuation">)</span>  <span class="token builtin class-name">let</span> g:plug_home <span class="token operator">=</span> stdpath<span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span> <span class="token builtin class-name">.</span> <span class="token string">'/plugged'</span>endifcall plug<span class="token comment">#begin()</span>Plug <span class="token string">'tpope/vim-fugitive'</span>Plug <span class="token string">'tpope/vim-rhubarb'</span><span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">"nvim"</span><span class="token punctuation">)</span>  Plug <span class="token string">'hoob3rt/lualine.nvim'</span>  Plug <span class="token string">'kristijanhusak/defx-git'</span>  Plug <span class="token string">'kristijanhusak/defx-icons'</span>  Plug <span class="token string">'Shougo/defx.nvim'</span>, <span class="token punctuation">{</span> <span class="token string">'do'</span><span class="token builtin class-name">:</span> <span class="token string">':UpdateRemotePlugins'</span> <span class="token punctuation">}</span>  Plug <span class="token string">'neovim/nvim-lspconfig'</span>  Plug <span class="token string">'tami5/lspsaga.nvim'</span>, <span class="token punctuation">{</span> <span class="token string">'branch'</span><span class="token builtin class-name">:</span> <span class="token string">'nvim6.0'</span> <span class="token punctuation">}</span>  Plug <span class="token string">'folke/lsp-colors.nvim'</span>  Plug <span class="token string">'L3MON4D3/LuaSnip'</span>  Plug <span class="token string">'hrsh7th/cmp-nvim-lsp'</span>  Plug <span class="token string">'hrsh7th/cmp-buffer'</span>  Plug <span class="token string">'hrsh7th/nvim-cmp'</span>  Plug <span class="token string">'nvim-treesitter/nvim-treesitter'</span>, <span class="token punctuation">{</span> <span class="token string">'do'</span><span class="token builtin class-name">:</span> <span class="token string">':TSUpdate'</span> <span class="token punctuation">}</span>  Plug <span class="token string">'kyazdani42/nvim-web-devicons'</span>  Plug <span class="token string">'onsails/lspkind-nvim'</span>  Plug <span class="token string">'nvim-lua/popup.nvim'</span>  Plug <span class="token string">'nvim-lua/plenary.nvim'</span>  Plug <span class="token string">'nvim-telescope/telescpe.nvim'</span>  Plug <span class="token string">'windwp/nvim-autopairs'</span>  Plug <span class="token string">'windwp/nvim-ts-autotag'</span>endifPlug <span class="token string">'groenewege/vim-less'</span>, <span class="token punctuation">{</span> <span class="token string">'for'</span><span class="token builtin class-name">:</span> <span class="token string">'less'</span> <span class="token punctuation">}</span>Plug <span class="token string">'kchmck/vim-coffee-script'</span>, <span class="token punctuation">{</span> <span class="token string">'for'</span><span class="token builtin class-name">:</span> <span class="token string">'coffee'</span> <span class="token punctuation">}</span>call plug<span class="token comment">#end()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="color-vim文件"><a href="#color-vim文件" class="headerlink" title="color.vim文件"></a>color.vim文件</h4><p>设置neovim的配色</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">" Name:     NeoSolarized: Colorscheme for truecolor vim"</span> Author:   iCyMind <span class="token operator">&lt;</span>icyminnd@gmail.com<span class="token operator">&gt;</span><span class="token string">" URL:      https://github.com/iCyMind/NeoSolarized"</span> License:  MIT<span class="token string">" Modified: Wed Jun 12 18:41:42 PDT 2016"</span> Usage <span class="token string">"{{{"</span><span class="token string">" ---------------------------------------------------------------------"</span> ABOUT:<span class="token string">" ---------------------------------------------------------------------"</span> Solarized is a carefully designed selective contrast colorscheme with dual<span class="token string">" light and dark modes that runs in both GUI, 256 and 16 color modes."</span><span class="token string">" But the origin solarized does not support truecolor terminal. NeoSolarized"</span> is a fixed colorscheme <span class="token keyword">for</span> neovim/vim <span class="token function">which</span> running <span class="token keyword">in</span> truecolor supported<span class="token string">" terminal."</span><span class="token string">" ---------------------------------------------------------------------"</span> OPTIONS:<span class="token string">" ---------------------------------------------------------------------"</span> Font styles:<span class="token string">" g:neosolarized_bold"</span> g:neosolarized_italic<span class="token string">" g:neosolarized_underline"</span><span class="token string">" Appearance:"</span> g:neosolarized_contrast<span class="token string">" g:neosolarized_diffmode"</span> g:neosolarized_termBoldAsBright<span class="token string">" g:neosolarized_termtrans"</span> g:neosolarized_vertSplitBgTrans<span class="token string">" g:neosolarized_visibility"</span><span class="token string">" ---------------------------------------------------------------------"</span> INSTALLATION:<span class="token string">" ---------------------------------------------------------------------"</span> move the NeoSolarized.vim to your VIMRUNTIME by manual or plugin manager<span class="token string">""</span> MODIFY VIMRC:<span class="token string">""</span> After either Option <span class="token number">1</span> or Option <span class="token number">2</span> above, put the following two lines <span class="token keyword">in</span> your<span class="token string">" .vimrc:"</span><span class="token string">"     syntax enable"</span>     <span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>dark<span class="token string">"     colorscheme NeoSolarized"</span><span class="token string">" or, for the light background mode of Solarized:"</span><span class="token string">"     syntax enable"</span>     <span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>light<span class="token string">"     colorscheme NeoSolarized"</span><span class="token string">" I like to have a different background in GUI and terminal modes, so I can use"</span> the following if-then. However, I <span class="token function">find</span> <span class="token function">vim</span><span class="token string">'s background autodetection to be" pretty good and, at least with MacVim, I can leave this background value" assignment out entirely and get the same results.""     if has('</span>gui_running<span class="token string">')"       set background=light"     else"       set background=dark"     endif"" See the Solarized homepage at http://ethanschoonover.com/solarized for" screenshots which will help you select either the light or dark background."" ---------------------------------------------------------------------" COLOR VALUES" ---------------------------------------------------------------------" Download palettes and files from: http://ethanschoonover.com/solarized"" L\*a\*b values are canonical (White D65, Reference D50), other values are" matched in sRGB space."" SOLARIZED HEX     16/8 TERMCOL  XTERM/HEX   L*A*B      sRGB        HSB" --------- ------- ---- -------  ----------- ---------- ----------- -----------" base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21" base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26" base01    #586e75 10/7 brgreen  240 #4e4e4e 45 -07 -07  88 110 117 194  25  46" base00    #657b83 11/7 bryellow 241 #585858 50 -07 -07 101 123 131 195  23  51" base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59" base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63" base2     #eee8d5  7/7 white    254 #d7d7af 92 -00  10 238 232 213  44  11  93" base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99" yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71" orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80" red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86" magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83" violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77" blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82" cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63" green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60"" ---------------------------------------------------------------------" COLORSCHEME HACKING" ---------------------------------------------------------------------"" Useful commands for testing colorschemes:" :source $VIMRUNTIME/syntax/hitest.vim" :help highlight-groups" :help cterm-colors" :help group-name"" Useful links for developing colorschemes:" http://www.vim.org/scripts/script.php?script_id=2937" http://vimcasts.org/episodes/creating-colorschemes-for-vim/" http://www.frexx.de/xterm-256-notes/""" }}}" Default option values"{{{" ---------------------------------------------------------------------" Font styles:let g:neosolarized_bold = get(g:, "neosolarized_bold", 1)let g:neosolarized_italic = get(g:, "neosolarized_italic", 0)let g:neosolarized_underline = get(g:, "neosolarized_underline", 1)" Appearance:let g:neosolarized_contrast = get(g:, "neosolarized_contrast", "normal")let g:neosolarized_diffmode = get(g:, "neosolarized_diffmode", "normal")let g:neosolarized_termBoldAsBright = get(g:, "neosolarized_termBoldAsBright", 1)let g:neosolarized_termtrans = get(g:, "neosolarized_termtrans", 0)let g:neosolarized_visibility = get(g:, "neosolarized_visibility", "normal")let g:neosolarized_vertSplitBgTrans = get(g:, "neosolarized_vertSplitBgTrans", 1)"}}}" Colorscheme initialization "{{{" ---------------------------------------------------------------------hi clearif exists("syntax_on")  syntax resetendiflet colors_name = "NeoSolarized""}}}" GUI &amp; CSApprox hexadecimal palettes"{{{" ---------------------------------------------------------------------"" Set gui and terminal at the same time.    let s:gui_mode       = "gui"    let s:gui_base03      = "#002b36"    let s:gui_base02      = "#073642"    let s:gui_base01      = "#586e75"    let s:gui_base00      = "#657b83"    let s:gui_base0       = "#839496"    let s:gui_base1       = "#93a1a1"    let s:gui_base2       = "#eee8d5"    let s:gui_base3       = "#fdf6e3"    let s:gui_yellow      = "#b58900"    let s:gui_orange      = "#cb4b16"    let s:gui_red         = "#dc322f"    let s:gui_magenta     = "#d33682"    let s:gui_violet      = "#6c71c4"    let s:gui_blue        = "#268bd2"    let s:gui_cyan        = "#2aa198"    let s:gui_green       = "#719e07" "experimental    "let s:green       = "#859900" "original    let s:term_mode       = "cterm"    let s:term_base03      = "8"    let s:term_base02      = "0"    let s:term_base01      = "10"    let s:term_base00      = "11"    let s:term_base0       = "12"    let s:term_base1       = "14"    let s:term_base2       = "7"    let s:term_base3       = "15"    let s:term_yellow      = "3"    let s:term_orange      = "9"    let s:term_red         = "1"    let s:term_magenta     = "5"    let s:term_violet      = "13"    let s:term_blue        = "4"    let s:term_cyan        = "6"    let s:term_green       = "2""}}}" Formatting options and null values for passthrough effect "{{{" ---------------------------------------------------------------------    let s:gui_none        = "NONE"    let s:term_none       = "NONE"    let s:n               = "NONE"    let s:c               = ",undercurl"    let s:r               = ",reverse"    let s:s               = ",standout"    let s:ou              = ""    let s:ob              = """}}}" Background value based on termtrans setting "{{{" ---------------------------------------------------------------------if (has("gui_running") || g:neosolarized_termtrans == 0)    let s:gui_back        = s:gui_base03    let s:term_back        = s:term_base03else    let s:gui_back        = "NONE"    let s:term_back        = "NONE"endif"}}}" Alternate light scheme "{{{" ---------------------------------------------------------------------if &amp;background == "light"    " GUI    let s:gui_temp03    =   s:gui_base03    let s:gui_temp02    =   s:gui_base02    let s:gui_temp01    =   s:gui_base01    let s:gui_temp00    =   s:gui_base00    let s:gui_base03    =   s:gui_base3    let s:gui_base02    =   s:gui_base2    let s:gui_base01    =   s:gui_base1    let s:gui_base00    =   s:gui_base0    let s:gui_base0     =   s:gui_temp00    let s:gui_base1     =   s:gui_temp01    let s:gui_base2     =   s:gui_temp02    let s:gui_base3     =   s:gui_temp03    if (s:gui_back != "NONE")        let s:gui_back  =   s:gui_base03    endif    " terminal    let s:term_temp03   =   s:term_base03    let s:term_temp02   =   s:term_base02    let s:term_temp01   =   s:term_base01    let s:term_temp00   =   s:term_base00    let s:term_base03   =   s:term_base3    let s:term_base02   =   s:term_base2    let s:term_base01   =   s:term_base1    let s:term_base00   =   s:term_base0    let s:term_base0    =   s:term_temp00    let s:term_base1    =   s:term_temp01    let s:term_base2    =   s:term_temp02    let s:term_base3    =   s:term_temp03    if (s:term_back != "NONE")        let s:term_back =   s:term_base03    endifendif"}}}" Optional contrast schemes "{{{" ---------------------------------------------------------------------if g:neosolarized_contrast == "high"    let s:gui_base01      = s:gui_base00    let s:gui_base00      = s:gui_base0    let s:gui_base0       = s:gui_base1    let s:gui_base1       = s:gui_base2    let s:gui_base2       = s:gui_base3    let s:gui_back        = s:gui_back    let s:term_base01      = s:term_base00    let s:term_base00      = s:term_base0    let s:term_base0       = s:term_base1    let s:term_base1       = s:term_base2    let s:term_base2       = s:term_base3    let s:term_back        = s:term_backendifif g:neosolarized_contrast == "low"    let s:gui_back        = s:gui_base02    let s:term_back        = s:term_base02    let s:ou          = ",underline"endif"}}}" Overrides dependent on user specified values and environment "{{{" ---------------------------------------------------------------------if (g:neosolarized_bold == 0 || &amp;t_Co == 8 )    let s:b           = ""    let s:bb          = ",bold"else    let s:b           = ",bold"    let s:bb          = ""endifif g:neosolarized_underline == 0    let s:u           = ""else    let s:u           = ",underline"endifif g:neosolarized_italic == 0    let s:i           = ""else    let s:i           = ",italic"endif"}}}" Highlighting primitives"{{{" ---------------------------------------------------------------------exe "let s:bg_none      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_none     .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_none      .   "</span><span class="token string">'"exe "let s:bg_back      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_back     .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_back      .   "</span><span class="token string">'"exe "let s:bg_base03    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base03   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base03    .   "</span><span class="token string">'"exe "let s:bg_base02    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base02   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base02    .   "</span><span class="token string">'"exe "let s:bg_base01    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base01   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base01    .   "</span><span class="token string">'"exe "let s:bg_base00    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base00   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base00    .   "</span><span class="token string">'"exe "let s:bg_base0     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base0    .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base0     .   "</span><span class="token string">'"exe "let s:bg_base1     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base1    .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base1     .   "</span><span class="token string">'"exe "let s:bg_base2     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base2    .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base2     .   "</span><span class="token string">'"exe "let s:bg_base3     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_base3    .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_base3     .   "</span><span class="token string">'"exe "let s:bg_green     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_green    .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_green     .   "</span><span class="token string">'"exe "let s:bg_yellow    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_yellow   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_yellow    .   "</span><span class="token string">'"exe "let s:bg_orange    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_orange   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_orange    .   "</span><span class="token string">'"exe "let s:bg_red       = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_red      .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_red       .   "</span><span class="token string">'"exe "let s:bg_magenta   = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_magenta  .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_magenta   .   "</span><span class="token string">'"exe "let s:bg_violet    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_violet   .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_violet    .   "</span><span class="token string">'"exe "let s:bg_blue      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_blue     .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_blue      .   "</span><span class="token string">'"exe "let s:bg_cyan      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guibg</span><span class="token operator">=</span><span class="token string">".s:gui_cyan     .   "</span> <span class="token assign-left variable">ctermbg</span><span class="token operator">=</span><span class="token string">".s:term_cyan      .   "</span><span class="token string">'"exe "let s:fg_none      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_none     .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_none      .   "</span><span class="token string">'"exe "let s:fg_back      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_back     .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_back      .   "</span><span class="token string">'"exe "let s:fg_base03    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base03   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base03    .   "</span><span class="token string">'"exe "let s:fg_base02    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base02   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base02    .   "</span><span class="token string">'"exe "let s:fg_base01    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base01   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base01    .   "</span><span class="token string">'"exe "let s:fg_base00    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base00   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base00    .   "</span><span class="token string">'"exe "let s:fg_base0     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base0    .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base0     .   "</span><span class="token string">'"exe "let s:fg_base1     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base1    .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base1     .   "</span><span class="token string">'"exe "let s:fg_base2     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base2    .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base2     .   "</span><span class="token string">'"exe "let s:fg_base3     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_base3    .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_base3     .   "</span><span class="token string">'"exe "let s:fg_green     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_green    .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_green     .   "</span><span class="token string">'"exe "let s:fg_yellow    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_yellow   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_yellow    .   "</span><span class="token string">'"exe "let s:fg_orange    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_orange   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_orange    .   "</span><span class="token string">'"exe "let s:fg_red       = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_red      .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_red       .   "</span><span class="token string">'"exe "let s:fg_magenta   = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_magenta  .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_magenta   .   "</span><span class="token string">'"exe "let s:fg_violet    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_violet   .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_violet    .   "</span><span class="token string">'"exe "let s:fg_blue      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_blue     .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_blue      .   "</span><span class="token string">'"exe "let s:fg_cyan      = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">guifg</span><span class="token operator">=</span><span class="token string">".s:gui_cyan     .   "</span> <span class="token assign-left variable">ctermfg</span><span class="token operator">=</span><span class="token string">".s:term_cyan      .   "</span><span class="token string">'"exe "let s:fmt_none     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">"          .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">"           .   "</span><span class="token string">'"exe "let s:fmt_bold     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:b      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:b       .   "</span><span class="token string">'"exe "let s:fmt_bldi     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:b      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:b       .   "</span><span class="token string">'"exe "let s:fmt_undr     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:u      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:u       .   "</span><span class="token string">'"exe "let s:fmt_undb     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:u.s:b  .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:u.s:b   .   "</span><span class="token string">'"exe "let s:fmt_undi     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:u      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:u       .   "</span><span class="token string">'"exe "let s:fmt_uopt     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:ou     .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:ou      .   "</span><span class="token string">'"exe "let s:fmt_curl     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:c      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:c       .   "</span><span class="token string">'"exe "let s:fmt_ital     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:i      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:i       .   "</span><span class="token string">'"exe "let s:fmt_stnd     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:s      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:s       .   "</span><span class="token string">'"exe "let s:fmt_revr     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:r      .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:r       .   "</span><span class="token string">'"exe "let s:fmt_revb     = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:b  .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:b   .   "</span><span class="token string">'"" revbb (reverse bold for bright colors) is only set to actual bold in low" color terminals (t_co=8, such as OS X Terminal.app) and should only be used" with colors 8-15.exe "let s:fmt_revbb    = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:bb     .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:bb      .   "</span><span class="token string">'"exe "let s:fmt_revbbu   = '</span> <span class="token string">"   .   "</span><span class="token assign-left variable">gui</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:bb.s:u .   "</span> <span class="token assign-left variable">cterm</span><span class="token operator">=</span>NONE<span class="token string">".s:r.s:bb.s:u  .   "</span><span class="token string">'"if has("gui_running") || has("termguicolors") &amp;&amp; &amp;termguicolors    exe "let s:sp_none      = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_none      .   "</span><span class="token string">'"    exe "let s:sp_back      = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_back      .   "</span><span class="token string">'"    exe "let s:sp_base03    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base03    .   "</span><span class="token string">'"    exe "let s:sp_base02    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base02    .   "</span><span class="token string">'"    exe "let s:sp_base01    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base01    .   "</span><span class="token string">'"    exe "let s:sp_base00    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base00    .   "</span><span class="token string">'"    exe "let s:sp_base0     = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base0     .   "</span><span class="token string">'"    exe "let s:sp_base1     = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base1     .   "</span><span class="token string">'"    exe "let s:sp_base2     = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base2     .   "</span><span class="token string">'"    exe "let s:sp_base3     = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_base3     .   "</span><span class="token string">'"    exe "let s:sp_green     = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_green     .   "</span><span class="token string">'"    exe "let s:sp_yellow    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_yellow    .   "</span><span class="token string">'"    exe "let s:sp_orange    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_orange    .   "</span><span class="token string">'"    exe "let s:sp_red       = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_red       .   "</span><span class="token string">'"    exe "let s:sp_magenta   = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_magenta   .   "</span><span class="token string">'"    exe "let s:sp_violet    = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_violet    .   "</span><span class="token string">'"    exe "let s:sp_blue      = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_blue      .   "</span><span class="token string">'"    exe "let s:sp_cyan      = '</span> <span class="token assign-left variable">guisp</span><span class="token operator">=</span><span class="token string">"     .       s:gui_cyan      .   "</span><span class="token string">'"else    let s:sp_none           =   ""    let s:sp_back           =   ""    let s:sp_base03         =   ""    let s:sp_base02         =   ""    let s:sp_base01         =   ""    let s:sp_base00         =   ""    let s:sp_base0          =   ""    let s:sp_base1          =   ""    let s:sp_base2          =   ""    let s:sp_base3          =   ""    let s:sp_green          =   ""    let s:sp_yellow         =   ""    let s:sp_orange         =   ""    let s:sp_red            =   ""    let s:sp_magenta        =   ""    let s:sp_violet         =   ""    let s:sp_blue           =   ""    let s:sp_cyan           =   ""endif"}}}" Basic highlighting"{{{" ---------------------------------------------------------------------" note that link syntax to avoid duplicate configuration doesn'</span>t work with the<span class="token string">" exe compiled formatsexe "</span>hi<span class="token operator">!</span> Normal<span class="token string">"         .s:fmt_none   .s:fg_base0  .s:bg_backexe "</span>hi<span class="token operator">!</span> Comment<span class="token string">"        .s:fmt_ital   .s:fg_base01 .s:bg_none"</span>       *Comment         any commentexe <span class="token string">"hi! Constant"</span>       .s:fmt_none   .s:fg_cyan   .s:bg_none<span class="token string">"       *Constant        any constant"</span>        String          a string constant: <span class="token string">"this is a string"</span><span class="token string">"        Character       a character constant: 'c', '<span class="token entity" title="\n">\n</span>'"</span>        Number          a number constant: <span class="token number">234</span>, 0xff<span class="token string">"        Boolean         a boolean constant: TRUE, false"</span>        Float           a floating point constant: <span class="token number">2</span>.3e10exe <span class="token string">"hi! Identifier"</span>     .s:fmt_none   .s:fg_blue   .s:bg_none<span class="token string">"       *Identifier      any variable name"</span>        Function        <span class="token keyword">function</span> name <span class="token punctuation">(</span>also: methods <span class="token keyword">for</span> classes<span class="token punctuation">)</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> Statement<span class="token string">"      .s:fmt_none   .s:fg_green  .s:bg_none"</span>       *Statement       any statement<span class="token string">"        Conditional     if, then, else, endif, switch, etc."</span>        Repeat          for, do, while, etc.<span class="token string">"        Label           case, default, etc."</span>        Operator        <span class="token string">"sizeof"</span>, <span class="token string">"+"</span>, <span class="token string">"*"</span>, etc.<span class="token string">"        Keyword         any other keyword"</span>        Exception       try, catch, throwexe <span class="token string">"hi! PreProc"</span>        .s:fmt_none   .s:fg_orange .s:bg_none<span class="token string">"       *PreProc         generic Preprocessor"</span>        Include         preprocessor <span class="token comment">#include</span><span class="token string">"        Define          preprocessor #define"</span>        Macro           same as Define<span class="token string">"        PreCondit       preprocessor #if, #else, #endif, etc.exe "</span>hi<span class="token operator">!</span> Type<span class="token string">"           .s:fmt_none   .s:fg_yellow .s:bg_none"</span>       *Type            int, long, char, etc.<span class="token string">"        StorageClass    static, register, volatile, etc."</span>        Structure       struct, union, enum, etc.<span class="token string">"        Typedef         A typedefexe "</span>hi<span class="token operator">!</span> Special<span class="token string">"        .s:fmt_none   .s:fg_red    .s:bg_none"</span>       *Special         any special symbol<span class="token string">"        SpecialChar     special character in a constant"</span>        Tag             you can use CTRL-<span class="token punctuation">]</span> on this<span class="token string">"        Delimiter       character that needs attention"</span>        SpecialComment  special things inside a comment<span class="token string">"        Debug           debugging statementsexe "</span>hi<span class="token operator">!</span> Underlined<span class="token string">"     .s:fmt_none   .s:fg_violet .s:bg_none"</span>       *Underlined      text that stands out, HTML linksexe <span class="token string">"hi! Ignore"</span>         .s:fmt_none   .s:fg_none   .s:bg_none<span class="token string">"       *Ignore          left blank, hidden  |hl-Ignore|exe "</span>hi<span class="token operator">!</span> Error<span class="token string">"          .s:fmt_bold   .s:fg_red    .s:bg_none"</span>       *Error           any erroneous constructexe <span class="token string">"hi! Todo"</span>           .s:fmt_bold   .s:fg_magenta.s:bg_none<span class="token string">"       *Todo            anything that needs extra attention; mostly the"</span>                        keywords TODO FIXME and XXX<span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">" Extended highlighting "</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">" ---------------------------------------------------------------------if  (g:neosolarized_visibility=="</span>high<span class="token string">")    exe "</span>hi<span class="token operator">!</span> SpecialKey<span class="token string">" .s:fmt_revr   .s:fg_red    .s:bg_none    exe "</span>hi<span class="token operator">!</span> NonText<span class="token string">"    .s:fmt_bold   .s:fg_red    .s:bg_noneelseif  (g:neosolarized_visibility=="</span>low<span class="token string">")    exe "</span>hi<span class="token operator">!</span> SpecialKey<span class="token string">" .s:fmt_bold   .s:fg_base02 .s:bg_none    exe "</span>hi<span class="token operator">!</span> NonText<span class="token string">"    .s:fmt_bold   .s:fg_base02 .s:bg_noneelse    exe "</span>hi<span class="token operator">!</span> SpecialKey<span class="token string">" .s:fmt_bold   .s:fg_base00 .s:bg_base02    exe "</span>hi<span class="token operator">!</span> NonText<span class="token string">"    .s:fmt_bold   .s:fg_base00 .s:bg_noneendifexe "</span>hi<span class="token operator">!</span> StatusLine<span class="token string">"     .s:fmt_none   .s:fg_base1  .s:bg_base02 .s:fmt_revbbexe "</span>hi<span class="token operator">!</span> StatusLineNC<span class="token string">"   .s:fmt_none   .s:fg_base00 .s:bg_base02 .s:fmt_revbbexe "</span>hi<span class="token operator">!</span> Visual<span class="token string">"         .s:fmt_none   .s:fg_base01 .s:bg_base03 .s:fmt_revbbexe "</span>hi<span class="token operator">!</span> Directory<span class="token string">"      .s:fmt_none   .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> ErrorMsg<span class="token string">"       .s:fmt_revr   .s:fg_red    .s:bg_noneexe "</span>hi<span class="token operator">!</span> IncSearch<span class="token string">"      .s:fmt_stnd   .s:fg_orange .s:bg_noneexe "</span>hi<span class="token operator">!</span> Search<span class="token string">"         .s:fmt_revr   .s:fg_yellow .s:bg_noneexe "</span>hi<span class="token operator">!</span> MoreMsg<span class="token string">"        .s:fmt_none   .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> ModeMsg<span class="token string">"        .s:fmt_none   .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> LineNr<span class="token string">"         .s:fmt_none   .s:fg_base01 .s:bg_base02exe "</span>hi<span class="token operator">!</span> Question<span class="token string">"       .s:fmt_bold   .s:fg_cyan   .s:bg_noneif (g:neosolarized_vertSplitBgTrans == 1)    exe "</span>hi<span class="token operator">!</span> VertSplit<span class="token string">"  .s:fmt_none   .s:fg_base00 .s:bg_noneelse    exe "</span>hi<span class="token operator">!</span> VertSplit<span class="token string">"  .s:fmt_none   .s:fg_base00 .s:bg_base00endifexe "</span>hi<span class="token operator">!</span> Title<span class="token string">"          .s:fmt_bold   .s:fg_orange .s:bg_noneexe "</span>hi<span class="token operator">!</span> VisualNOS<span class="token string">"      .s:fmt_stnd   .s:fg_none   .s:bg_base02 .s:fmt_revbbexe "</span>hi<span class="token operator">!</span> WarningMsg<span class="token string">"     .s:fmt_bold   .s:fg_red    .s:bg_noneexe "</span>hi<span class="token operator">!</span> WildMenu<span class="token string">"       .s:fmt_none   .s:fg_base2  .s:bg_base02 .s:fmt_revbbexe "</span>hi<span class="token operator">!</span> Folded<span class="token string">"         .s:fmt_bold   .s:fg_base0  .s:bg_base02  .s:sp_base03exe "</span>hi<span class="token operator">!</span> FoldColumn<span class="token string">"     .s:fmt_none   .s:fg_base0  .s:bg_base02if (g:neosolarized_diffmode=="</span>high<span class="token string">")    exe "</span>hi<span class="token operator">!</span> DiffAdd<span class="token string">"        .s:fmt_revr   .s:fg_green  .s:bg_none    exe "</span>hi<span class="token operator">!</span> DiffChange<span class="token string">"     .s:fmt_revr   .s:fg_yellow .s:bg_none    exe "</span>hi<span class="token operator">!</span> DiffDelete<span class="token string">"     .s:fmt_revr   .s:fg_red    .s:bg_none    exe "</span>hi<span class="token operator">!</span> DiffText<span class="token string">"       .s:fmt_revr   .s:fg_blue   .s:bg_noneelseif  (g:neosolarized_diffmode=="</span>low<span class="token string">")    exe "</span>hi<span class="token operator">!</span> DiffAdd<span class="token string">"        .s:fmt_undr   .s:fg_green  .s:bg_none   .s:sp_green    exe "</span>hi<span class="token operator">!</span> DiffChange<span class="token string">"     .s:fmt_undr   .s:fg_yellow .s:bg_none   .s:sp_yellow    exe "</span>hi<span class="token operator">!</span> DiffDelete<span class="token string">"     .s:fmt_bold   .s:fg_red    .s:bg_none    exe "</span>hi<span class="token operator">!</span> DiffText<span class="token string">"       .s:fmt_undr   .s:fg_blue   .s:bg_none   .s:sp_blueelse "</span> normal    exe <span class="token string">"hi! DiffAdd"</span>        .s:fmt_bold   .s:fg_green  .s:bg_base02 .s:sp_green    exe <span class="token string">"hi! DiffChange"</span>     .s:fmt_bold   .s:fg_yellow .s:bg_base02 .s:sp_yellow    exe <span class="token string">"hi! DiffDelete"</span>     .s:fmt_bold   .s:fg_red    .s:bg_base02    exe <span class="token string">"hi! DiffText"</span>       .s:fmt_bold   .s:fg_blue   .s:bg_base02 .s:sp_blueendifexe <span class="token string">"hi! SignColumn"</span>     .s:fmt_none   .s:fg_base0  .s:bg_noneexe <span class="token string">"hi! Conceal"</span>        .s:fmt_none   .s:fg_blue   .s:bg_noneexe <span class="token string">"hi! SpellBad"</span>       .s:fmt_curl   .s:fg_none   .s:bg_none    .s:sp_redexe <span class="token string">"hi! SpellCap"</span>       .s:fmt_curl   .s:fg_none   .s:bg_none    .s:sp_violetexe <span class="token string">"hi! SpellRare"</span>      .s:fmt_curl   .s:fg_none   .s:bg_none    .s:sp_cyanexe <span class="token string">"hi! SpellLocal"</span>     .s:fmt_curl   .s:fg_none   .s:bg_none    .s:sp_yellowexe <span class="token string">"hi! Pmenu"</span>          .s:fmt_none   .s:fg_base0  .s:bg_base02  .s:fmt_revbbexe <span class="token string">"hi! PmenuSel"</span>       .s:fmt_none   .s:fg_base01 .s:bg_base2   .s:fmt_revbbexe <span class="token string">"hi! PmenuSbar"</span>      .s:fmt_none   .s:fg_base2  .s:bg_base0   .s:fmt_revbbexe <span class="token string">"hi! PmenuThumb"</span>     .s:fmt_none   .s:fg_base0  .s:bg_base03  .s:fmt_revbbexe <span class="token string">"hi! TabLine"</span>        .s:fmt_none   .s:fg_base0  .s:bg_base02  .s:sp_base0exe <span class="token string">"hi! TabLineFill"</span>    .s:fmt_none   .s:fg_base0  .s:bg_base02  .s:sp_base0exe <span class="token string">"hi! TabLineSel"</span>     .s:fmt_none   .s:fg_base01 .s:bg_base2   .s:sp_base0  .s:fmt_revrexe <span class="token string">"hi! TabLineSep"</span>     .s:fmt_none   .s:fg_base02 .s:bg_base01  .s:sp_base0  .s:fmt_revrexe <span class="token string">"hi! TabLineSep2"</span>    .s:fmt_none   .s:fg_base02 .s:bg_base01  .s:sp_base0exe <span class="token string">"hi! CursorColumn"</span>   .s:fmt_none   .s:fg_none   .s:bg_base02exe <span class="token string">"hi! CursorLine"</span>     .s:fmt_uopt   .s:fg_none   .s:bg_base02  .s:sp_base1exe <span class="token string">"hi! CursorLineNr"</span>   .s:fmt_uopt   .s:fg_none   .s:bg_base02  .s:sp_base1exe <span class="token string">"hi! ColorColumn"</span>    .s:fmt_none   .s:fg_none   .s:bg_base02exe <span class="token string">"hi! Cursor"</span>         .s:fmt_none   .s:fg_base03 .s:bg_base0hi<span class="token operator">!</span> <span class="token function">link</span> lCursor Cursorexe <span class="token string">"hi! MatchParen"</span>     .s:fmt_bold   .s:fg_red    .s:bg_base01<span class="token string">"}}}"</span> <span class="token function">vim</span> syntax highlighting <span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token string">"exe "</span>hi<span class="token operator">!</span> vimLineComment<span class="token string">" . s:fg_base01 .s:bg_none   .s:fmt_ital"</span>hi<span class="token operator">!</span> <span class="token function">link</span> vimComment Comment<span class="token string">"hi! link vimLineComment Commenthi! link vimVar Identifierhi! link vimFunc Functionhi! link vimUserFunc Functionhi! link helpSpecial Specialhi! link vimSet Normalhi! link vimSetEqual Normalexe "</span>hi<span class="token operator">!</span> vimCommentString<span class="token string">"  .s:fmt_none    .s:fg_violet .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimCommand<span class="token string">"        .s:fmt_none    .s:fg_yellow .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimCmdSep<span class="token string">"         .s:fmt_bold    .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> helpExample<span class="token string">"       .s:fmt_none    .s:fg_base1  .s:bg_noneexe "</span>hi<span class="token operator">!</span> helpOption<span class="token string">"        .s:fmt_none    .s:fg_cyan   .s:bg_noneexe "</span>hi<span class="token operator">!</span> helpNote<span class="token string">"          .s:fmt_none    .s:fg_magenta.s:bg_noneexe "</span>hi<span class="token operator">!</span> helpVim<span class="token string">"           .s:fmt_none    .s:fg_magenta.s:bg_noneexe "</span>hi<span class="token operator">!</span> helpHyperTextJump<span class="token string">" .s:fmt_undr    .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> helpHyperTextEntry<span class="token string">".s:fmt_none    .s:fg_green  .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimIsCommand<span class="token string">"      .s:fmt_none    .s:fg_base00 .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimSynMtchOpt<span class="token string">"     .s:fmt_none    .s:fg_yellow .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimSynType<span class="token string">"        .s:fmt_none    .s:fg_cyan   .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimHiLink<span class="token string">"         .s:fmt_none    .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimHiGroup<span class="token string">"        .s:fmt_none    .s:fg_blue   .s:bg_noneexe "</span>hi<span class="token operator">!</span> vimGroup<span class="token string">"          .s:fmt_undb    .s:fg_blue   .s:bg_none"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">" diff highlighting "</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">" ---------------------------------------------------------------------hi! link diffAdded Statementhi! link diffLine Identifier"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">" git &amp; gitcommit highlighting "</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"git"</span>exe <span class="token string">"hi! gitDateHeader"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitIdentityHeader<span class="token string">""</span>exe <span class="token string">"hi! gitIdentityKeyword"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitNotesHeader<span class="token string">""</span>exe <span class="token string">"hi! gitReflogHeader"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitKeyword<span class="token string">""</span>exe <span class="token string">"hi! gitIdentity"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitEmailDelimiter<span class="token string">""</span>exe <span class="token string">"hi! gitEmail"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitDate<span class="token string">""</span>exe <span class="token string">"hi! gitMode"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitHashAbbrev<span class="token string">""</span>exe <span class="token string">"hi! gitHash"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitReflogMiddle<span class="token string">""</span>exe <span class="token string">"hi! gitReference"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitStage<span class="token string">""</span>exe <span class="token string">"hi! gitType"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitDiffAdded<span class="token string">""</span>exe <span class="token string">"hi! gitDiffRemoved"</span><span class="token string">"gitcommit"</span>exe <span class="token string">"hi! gitcommitSummary"</span>exe <span class="token string">"hi! gitcommitComment"</span>      .s:fmt_ital     .s:fg_base01    .s:bg_nonehi<span class="token operator">!</span> <span class="token function">link</span> gitcommitUntracked gitcommitCommenthi<span class="token operator">!</span> <span class="token function">link</span> gitcommitDiscarded gitcommitCommenthi<span class="token operator">!</span> <span class="token function">link</span> gitcommitSelected  gitcommitCommentexe <span class="token string">"hi! gitcommitUnmerged"</span>     .s:fmt_bold     .s:fg_green     .s:bg_noneexe <span class="token string">"hi! gitcommitOnBranch"</span>     .s:fmt_bold     .s:fg_base01    .s:bg_noneexe <span class="token string">"hi! gitcommitBranch"</span>       .s:fmt_bold     .s:fg_magenta   .s:bg_nonehi<span class="token operator">!</span> <span class="token function">link</span> gitcommitNoBranch gitcommitBranchexe <span class="token string">"hi! gitcommitDiscardedType"</span>.s:fmt_none     .s:fg_red       .s:bg_noneexe <span class="token string">"hi! gitcommitSelectedType"</span> .s:fmt_none     .s:fg_green     .s:bg_none<span class="token string">"exe "</span>hi<span class="token operator">!</span> gitcommitUnmergedType<span class="token string">""</span>exe <span class="token string">"hi! gitcommitType"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitcommitNoChanges<span class="token string">""</span>exe <span class="token string">"hi! gitcommitHeader"</span>exe <span class="token string">"hi! gitcommitHeader"</span>       .s:fmt_none     .s:fg_base01    .s:bg_noneexe <span class="token string">"hi! gitcommitUntrackedFile"</span>.s:fmt_bold     .s:fg_cyan      .s:bg_noneexe <span class="token string">"hi! gitcommitDiscardedFile"</span>.s:fmt_bold     .s:fg_red       .s:bg_noneexe <span class="token string">"hi! gitcommitSelectedFile"</span> .s:fmt_bold     .s:fg_green     .s:bg_noneexe <span class="token string">"hi! gitcommitUnmergedFile"</span> .s:fmt_bold     .s:fg_yellow    .s:bg_noneexe <span class="token string">"hi! gitcommitFile"</span>         .s:fmt_bold     .s:fg_base0     .s:bg_nonehi<span class="token operator">!</span> <span class="token function">link</span> gitcommitDiscardedArrow gitcommitDiscardedFilehi<span class="token operator">!</span> <span class="token function">link</span> gitcommitSelectedArrow  gitcommitSelectedFilehi<span class="token operator">!</span> <span class="token function">link</span> gitcommitUnmergedArrow  gitcommitUnmergedFile<span class="token string">"exe "</span>hi<span class="token operator">!</span> gitcommitArrow<span class="token string">""</span>exe <span class="token string">"hi! gitcommitOverflow"</span><span class="token string">"exe "</span>hi<span class="token operator">!</span> gitcommitBlank<span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">""</span> html highlighting <span class="token string">"{{{"</span> ---------------------------------------------------------------------exe <span class="token string">"hi! htmlTag"</span>           .s:fmt_none .s:fg_base01 .s:bg_noneexe <span class="token string">"hi! htmlEndTag"</span>        .s:fmt_none .s:fg_base01 .s:bg_noneexe <span class="token string">"hi! htmlTagN"</span>          .s:fmt_bold .s:fg_base1  .s:bg_noneexe <span class="token string">"hi! htmlTagName"</span>       .s:fmt_bold .s:fg_blue   .s:bg_noneexe <span class="token string">"hi! htmlSpecialTagName"</span>.s:fmt_ital .s:fg_blue   .s:bg_noneexe <span class="token string">"hi! htmlArg"</span>           .s:fmt_none .s:fg_base00 .s:bg_noneexe <span class="token string">"hi! javaScript"</span>        .s:fmt_none .s:fg_yellow .s:bg_none<span class="token string">"}}}"</span> perl highlighting <span class="token string">"{{{"</span> ---------------------------------------------------------------------exe <span class="token string">"hi! perlHereDoc"</span>    <span class="token builtin class-name">.</span> s:fg_base1  .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! perlVarPlain"</span>   <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! perlStatementFileDesc"</span><span class="token builtin class-name">.</span> s:fg_cyan.s:bg_back.s:fmt_none<span class="token string">"}}}"</span> tex highlighting <span class="token string">"{{{"</span> ---------------------------------------------------------------------exe <span class="token string">"hi! texStatement"</span>   <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! texMathZoneX"</span>   <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! texMathMatcher"</span> <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! texMathMatcher"</span> <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_back   .s:fmt_noneexe <span class="token string">"hi! texRefLabel"</span>    <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_back   .s:fmt_none<span class="token string">"}}}"</span> ruby highlighting <span class="token string">"{{{"</span> ---------------------------------------------------------------------exe <span class="token string">"hi! rubyDefine"</span>     <span class="token builtin class-name">.</span> s:fg_base1  .s:bg_back   .s:fmt_bold<span class="token string">"rubyInclude"</span>rubySharpBang<span class="token string">"rubyAccess"</span>rubyPredefinedVariable<span class="token string">"rubyBoolean"</span>rubyClassVariable<span class="token string">"rubyBeginEnd"</span>rubyRepeatModifier<span class="token string">"hi! link rubyArrayDelimiter    Special  "</span> <span class="token punctuation">[</span> , , <span class="token punctuation">]</span><span class="token string">"rubyCurlyBlock  { , , }"</span>hi<span class="token operator">!</span> <span class="token function">link</span> rubyClass             Keyword<span class="token string">"hi! link rubyModule            Keyword"</span>hi<span class="token operator">!</span> <span class="token function">link</span> rubyKeyword           Keyword<span class="token string">"hi! link rubyOperator          Operator"</span>hi<span class="token operator">!</span> <span class="token function">link</span> rubyIdentifier        Identifier<span class="token string">"hi! link rubyInstanceVariable  Identifier"</span>hi<span class="token operator">!</span> <span class="token function">link</span> rubyGlobalVariable    Identifier<span class="token string">"hi! link rubyClassVariable     Identifier"</span>hi<span class="token operator">!</span> <span class="token function">link</span> rubyConstant          Type<span class="token string">"}}}"</span> haskell syntax highlighting<span class="token string">"{{{"</span> ---------------------------------------------------------------------<span class="token string">" For use with syntax/haskell.vim : Haskell Syntax File"</span> http://www.vim.org/scripts/script.php?script_id<span class="token operator">=</span><span class="token number">3034</span><span class="token string">" See also Steffen Siering's github repository:"</span> http://github.com/urso/dotrc/blob/master/vim/syntax/haskell.vim<span class="token string">" ---------------------------------------------------------------------"</span><span class="token string">" Treat True and False specially, see the plugin referenced abovelet hs_highlight_boolean=1"</span> highlight delims, see the plugin referenced above<span class="token builtin class-name">let</span> <span class="token assign-left variable">hs_highlight_delimiters</span><span class="token operator">=</span><span class="token number">1</span>exe <span class="token string">"hi! cPreCondit"</span><span class="token builtin class-name">.</span> s:fg_orange.s:bg_none   .s:fmt_noneexe <span class="token string">"hi! VarId"</span>    <span class="token builtin class-name">.</span> s:fg_blue   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! ConId"</span>    <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsImport"</span> <span class="token builtin class-name">.</span> s:fg_magenta.s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsString"</span> <span class="token builtin class-name">.</span> s:fg_base00 .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsStructure"</span>        <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hs_hlFunctionName"</span>  <span class="token builtin class-name">.</span> s:fg_blue   .s:bg_noneexe <span class="token string">"hi! hsStatement"</span>        <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsImportLabel"</span>      <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hs_OpFunctionName"</span>  <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hs_DeclareFunction"</span> <span class="token builtin class-name">.</span> s:fg_orange .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsVarSym"</span>           <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsType"</span>             <span class="token builtin class-name">.</span> s:fg_yellow .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsTypedef"</span>          <span class="token builtin class-name">.</span> s:fg_cyan   .s:bg_none   .s:fmt_noneexe <span class="token string">"hi! hsModuleName"</span>       <span class="token builtin class-name">.</span> s:fg_green  .s:bg_none   .s:fmt_undrexe <span class="token string">"hi! hsModuleStartLabel"</span> <span class="token builtin class-name">.</span> s:fg_magenta.s:bg_none   .s:fmt_nonehi<span class="token operator">!</span> <span class="token function">link</span> hsImportParams      Delimiterhi<span class="token operator">!</span> <span class="token function">link</span> hsDelimTypeExport   Delimiterhi<span class="token operator">!</span> <span class="token function">link</span> hsModuleStartLabel  hsStructurehi<span class="token operator">!</span> <span class="token function">link</span> hsModuleWhereLabel  hsModuleStartLabel<span class="token string">" following is for the haskell-conceal plugin"</span> the first two items don<span class="token string">'t have an impact, but better safeexe "hi! hsNiceOperator"     . s:fg_cyan   .s:bg_none   .s:fmt_noneexe "hi! hsniceoperator"     . s:fg_cyan   .s:bg_none   .s:fmt_none"}}}" pandoc markdown syntax highlighting "{{{" ---------------------------------------------------------------------"PandocHiLink pandocNormalBlockexe "hi! pandocTitleBlock"               .s:fg_blue   .s:bg_none   .s:fmt_noneexe "hi! pandocTitleBlockTitle"          .s:fg_blue   .s:bg_none   .s:fmt_boldexe "hi! pandocTitleComment"             .s:fg_blue   .s:bg_none   .s:fmt_boldexe "hi! pandocComment"                  .s:fg_base01 .s:bg_none   .s:fmt_italexe "hi! pandocVerbatimBlock"            .s:fg_yellow .s:bg_none   .s:fmt_nonehi! link pandocVerbatimBlockDeep         pandocVerbatimBlockhi! link pandocCodeBlock                 pandocVerbatimBlockhi! link pandocCodeBlockDelim            pandocVerbatimBlockexe "hi! pandocBlockQuote"               .s:fg_blue   .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader1"        .s:fg_blue   .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader2"        .s:fg_cyan   .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader3"        .s:fg_yellow .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader4"        .s:fg_red    .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader5"        .s:fg_base0  .s:bg_none   .s:fmt_noneexe "hi! pandocBlockQuoteLeader6"        .s:fg_base01 .s:bg_none   .s:fmt_noneexe "hi! pandocListMarker"               .s:fg_magenta.s:bg_none   .s:fmt_noneexe "hi! pandocListReference"            .s:fg_magenta.s:bg_none   .s:fmt_undr" Definitions" ---------------------------------------------------------------------let s:fg_pdef = s:fg_violetexe "hi! pandocDefinitionBlock"              .s:fg_pdef  .s:bg_none  .s:fmt_noneexe "hi! pandocDefinitionTerm"               .s:fg_pdef  .s:bg_none  .s:fmt_stndexe "hi! pandocDefinitionIndctr"             .s:fg_pdef  .s:bg_none  .s:fmt_boldexe "hi! pandocEmphasisDefinition"           .s:fg_pdef  .s:bg_none  .s:fmt_italexe "hi! pandocEmphasisNestedDefinition"     .s:fg_pdef  .s:bg_none  .s:fmt_bldiexe "hi! pandocStrongEmphasisDefinition"     .s:fg_pdef  .s:bg_none  .s:fmt_boldexe "hi! pandocStrongEmphasisNestedDefinition"   .s:fg_pdef.s:bg_none.s:fmt_bldiexe "hi! pandocStrongEmphasisEmphasisDefinition" .s:fg_pdef.s:bg_none.s:fmt_bldiexe "hi! pandocStrikeoutDefinition"          .s:fg_pdef  .s:bg_none  .s:fmt_revrexe "hi! pandocVerbatimInlineDefinition"     .s:fg_pdef  .s:bg_none  .s:fmt_noneexe "hi! pandocSuperscriptDefinition"        .s:fg_pdef  .s:bg_none  .s:fmt_noneexe "hi! pandocSubscriptDefinition"          .s:fg_pdef  .s:bg_none  .s:fmt_none" Tables" ---------------------------------------------------------------------let s:fg_ptable = s:fg_blueexe "hi! pandocTable"                        .s:fg_ptable.s:bg_none  .s:fmt_noneexe "hi! pandocTableStructure"               .s:fg_ptable.s:bg_none  .s:fmt_nonehi! link pandocTableStructureTop             pandocTableStructrehi! link pandocTableStructureEnd             pandocTableStructreexe "hi! pandocTableZebraLight"              .s:fg_ptable.s:bg_base03.s:fmt_noneexe "hi! pandocTableZebraDark"               .s:fg_ptable.s:bg_base02.s:fmt_noneexe "hi! pandocEmphasisTable"                .s:fg_ptable.s:bg_none  .s:fmt_italexe "hi! pandocEmphasisNestedTable"          .s:fg_ptable.s:bg_none  .s:fmt_bldiexe "hi! pandocStrongEmphasisTable"          .s:fg_ptable.s:bg_none  .s:fmt_boldexe "hi! pandocStrongEmphasisNestedTable"    .s:fg_ptable.s:bg_none  .s:fmt_bldiexe "hi! pandocStrongEmphasisEmphasisTable"  .s:fg_ptable.s:bg_none  .s:fmt_bldiexe "hi! pandocStrikeoutTable"               .s:fg_ptable.s:bg_none  .s:fmt_revrexe "hi! pandocVerbatimInlineTable"          .s:fg_ptable.s:bg_none  .s:fmt_noneexe "hi! pandocSuperscriptTable"             .s:fg_ptable.s:bg_none  .s:fmt_noneexe "hi! pandocSubscriptTable"               .s:fg_ptable.s:bg_none  .s:fmt_none" Headings" ---------------------------------------------------------------------let s:fg_phead = s:fg_orangeexe "hi! pandocHeading"                      .s:fg_phead .s:bg_none.s:fmt_boldexe "hi! pandocHeadingMarker"                .s:fg_yellow.s:bg_none.s:fmt_boldexe "hi! pandocEmphasisHeading"              .s:fg_phead .s:bg_none.s:fmt_bldiexe "hi! pandocEmphasisNestedHeading"        .s:fg_phead .s:bg_none.s:fmt_bldiexe "hi! pandocStrongEmphasisHeading"        .s:fg_phead .s:bg_none.s:fmt_boldexe "hi! pandocStrongEmphasisNestedHeading"  .s:fg_phead .s:bg_none.s:fmt_bldiexe "hi! pandocStrongEmphasisEmphasisHeading".s:fg_phead .s:bg_none.s:fmt_bldiexe "hi! pandocStrikeoutHeading"             .s:fg_phead .s:bg_none.s:fmt_revrexe "hi! pandocVerbatimInlineHeading"        .s:fg_phead .s:bg_none.s:fmt_boldexe "hi! pandocSuperscriptHeading"           .s:fg_phead .s:bg_none.s:fmt_boldexe "hi! pandocSubscriptHeading"             .s:fg_phead .s:bg_none.s:fmt_bold" Links" ---------------------------------------------------------------------exe "hi! pandocLinkDelim"                .s:fg_base01 .s:bg_none   .s:fmt_noneexe "hi! pandocLinkLabel"                .s:fg_blue   .s:bg_none   .s:fmt_undrexe "hi! pandocLinkText"                 .s:fg_blue   .s:bg_none   .s:fmt_undbexe "hi! pandocLinkURL"                  .s:fg_base00 .s:bg_none   .s:fmt_undrexe "hi! pandocLinkTitle"                .s:fg_base00 .s:bg_none   .s:fmt_undiexe "hi! pandocLinkTitleDelim"           .s:fg_base01 .s:bg_none   .s:fmt_undi   .s:sp_base00exe "hi! pandocLinkDefinition"           .s:fg_cyan   .s:bg_none   .s:fmt_undr   .s:sp_base00exe "hi! pandocLinkDefinitionID"         .s:fg_blue   .s:bg_none   .s:fmt_boldexe "hi! pandocImageCaption"             .s:fg_violet .s:bg_none   .s:fmt_undbexe "hi! pandocFootnoteLink"             .s:fg_green  .s:bg_none   .s:fmt_undrexe "hi! pandocFootnoteDefLink"          .s:fg_green  .s:bg_none   .s:fmt_boldexe "hi! pandocFootnoteInline"           .s:fg_green  .s:bg_none   .s:fmt_undbexe "hi! pandocFootnote"                 .s:fg_green  .s:bg_none   .s:fmt_noneexe "hi! pandocCitationDelim"            .s:fg_magenta.s:bg_none   .s:fmt_noneexe "hi! pandocCitation"                 .s:fg_magenta.s:bg_none   .s:fmt_noneexe "hi! pandocCitationID"               .s:fg_magenta.s:bg_none   .s:fmt_undrexe "hi! pandocCitationRef"              .s:fg_magenta.s:bg_none   .s:fmt_none" Main Styles" ---------------------------------------------------------------------exe "hi! pandocStyleDelim"               .s:fg_base01 .s:bg_none  .s:fmt_noneexe "hi! pandocEmphasis"                 .s:fg_base0  .s:bg_none  .s:fmt_italexe "hi! pandocEmphasisNested"           .s:fg_base0  .s:bg_none  .s:fmt_bldiexe "hi! pandocStrongEmphasis"           .s:fg_base0  .s:bg_none  .s:fmt_boldexe "hi! pandocStrongEmphasisNested"     .s:fg_base0  .s:bg_none  .s:fmt_bldiexe "hi! pandocStrongEmphasisEmphasis"   .s:fg_base0  .s:bg_none  .s:fmt_bldiexe "hi! pandocStrikeout"                .s:fg_base01 .s:bg_none  .s:fmt_revrexe "hi! pandocVerbatimInline"           .s:fg_yellow .s:bg_none  .s:fmt_noneexe "hi! pandocSuperscript"              .s:fg_violet .s:bg_none  .s:fmt_noneexe "hi! pandocSubscript"                .s:fg_violet .s:bg_none  .s:fmt_noneexe "hi! pandocRule"                     .s:fg_blue   .s:bg_none  .s:fmt_boldexe "hi! pandocRuleLine"                 .s:fg_blue   .s:bg_none  .s:fmt_boldexe "hi! pandocEscapePair"               .s:fg_red    .s:bg_none  .s:fmt_boldexe "hi! pandocCitationRef"              .s:fg_magenta.s:bg_none   .s:fmt_noneexe "hi! pandocNonBreakingSpace"         . s:fg_red   .s:bg_none  .s:fmt_revrhi! link pandocEscapedCharacter          pandocEscapePairhi! link pandocLineBreak                 pandocEscapePair" Embedded Code" ---------------------------------------------------------------------exe "hi! pandocMetadataDelim"            .s:fg_base01 .s:bg_none   .s:fmt_noneexe "hi! pandocMetadata"                 .s:fg_blue   .s:bg_none   .s:fmt_noneexe "hi! pandocMetadataKey"              .s:fg_blue   .s:bg_none   .s:fmt_noneexe "hi! pandocMetadata"                 .s:fg_blue   .s:bg_none   .s:fmt_boldhi! link pandocMetadataTitle             pandocMetadata"}}}" neomake highlighting "{{{" ---------------------------------------------------------------------exe "hi! NeomakeErrorSign"          . s:fg_orange   .s:bg_none   .s:fmt_noneexe "hi! NeomakeWarningSign"        . s:fg_yellow   .s:bg_none   .s:fmt_noneexe "hi! NeomakeMessageSign"        . s:fg_cyan     .s:bg_none   .s:fmt_noneexe "hi! NeomakeNeomakeInfoSign"    . s:fg_green    .s:bg_none   .s:fmt_none"}}}" gitgutter highlighting "{{{" ---------------------------------------------------------------------exe "hi! GitGutterAdd"              . s:fg_green    .s:bg_none  .s:fmt_noneexe "hi! GitGutterChange"           . s:fg_yellow   .s:bg_none  .s:fmt_noneexe "hi! GitGutterDelete"           . s:fg_red      .s:bg_none  .s:fmt_noneexe "hi! GitGutterChangeDelete"     . s:fg_red      .s:bg_none  .s:fmt_none" }}}"" signify highlighting "{{{" ---------------------------------------------------------------------exe "hi! SignifySignAdd"            . s:fg_green    .s:bg_none  .s:fmt_noneexe "hi! SignifySignChange"         . s:fg_yellow   .s:bg_none  .s:fmt_noneexe "hi! SignifySignDelete"         . s:fg_red      .s:bg_none  .s:fmt_noneexe "hi! SignifySignChangeDelete"   . s:fg_red      .s:bg_none  .s:fmt_none" }}}"" ALE highlighting "{{{" ---------------------------------------------------------------------exe "hi! ALEErrorSign"          . s:fg_orange   .s:bg_none   .s:fmt_noneexe "hi! ALEWarningSign"        . s:fg_yellow   .s:bg_none   .s:fmt_none" }}}"" NeoVim terminal buffer colours "{{{" ---------------------------------------------------------------------let g:terminal_color_0 = s:gui_base03let g:terminal_color_1 = s:gui_redlet g:terminal_color_2 = s:gui_greenlet g:terminal_color_3 = s:gui_yellowlet g:terminal_color_4 = s:gui_bluelet g:terminal_color_5 = s:gui_magentalet g:terminal_color_6 = s:gui_cyanlet g:terminal_color_7 = s:gui_base2if g:neosolarized_termBoldAsBright == 1  let g:terminal_color_8 = s:gui_base02  let g:terminal_color_9 = s:gui_orange  let g:terminal_color_10 = s:gui_base01  let g:terminal_color_11 = s:gui_base00  let g:terminal_color_12 = s:gui_base0  let g:terminal_color_13 = s:gui_violet  let g:terminal_color_14 = s:gui_base1  let g:terminal_color_15 = s:gui_base3else  let g:terminal_color_8 = g:terminal_color_0  let g:terminal_color_9 = g:terminal_color_1  let g:terminal_color_10 = g:terminal_color_2  let g:terminal_color_11 = g:terminal_color_3  let g:terminal_color_12 = g:terminal_color_4  let g:terminal_color_13 = g:terminal_color_5  let g:terminal_color_14 = g:terminal_color_6  let g:terminal_color_15 = g:terminal_color_7endif"}}}" Utility autocommand "{{{" ---------------------------------------------------------------------" In cases where Solarized is initialized inside a terminal vim session and" then transferred to a gui session via the command `:gui`, the gui vim process" does not re-read the colorscheme (or .vimrc for that matter) so any `has_gui`" related code that sets gui specific values isn'</span>t executed.<span class="token string">""</span> Currently, Solarized sets only the cterm or gui values <span class="token keyword">for</span> the colorscheme<span class="token string">" depending on gui or terminal mode. It's possible that, if the following"</span> autocommand method is deemed excessively poor form, that approach will be<span class="token string">" used again and the autocommand below will be dropped."</span><span class="token string">" However it seems relatively benign in this case to include the autocommand"</span> here. It fires only <span class="token keyword">in</span> cases where <span class="token function">vim</span> is transferring from terminal to gui<span class="token string">" mode (detected with the script scope s:vmode variable). It also allows for"</span> other potential terminal customizations that might <span class="token function">make</span> gui mode suboptimal.<span class="token string">"autocmd GUIEnter * if (has('gui_running')) | exe "</span>colorscheme <span class="token string">" . g:colors_name | endif"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token string">" License "</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">" ---------------------------------------------------------------------"</span><span class="token string">" Copyright (c) 2011 Ethan Schoonover"</span> Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2016</span> iCyMind<span class="token string">""</span> Permission is hereby granted, <span class="token function">free</span> of charge, to any person obtaining a copy<span class="token string">" of this software and associated documentation files (the "</span>Software<span class="token string">"), to deal"</span> <span class="token keyword">in</span> the Software without restriction, including without limitation the rights<span class="token string">" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"</span> copies of the Software, and to permit persons to whom the Software is<span class="token string">" furnished to do so, subject to the following conditions:"</span><span class="token string">" The above copyright notice and this permission notice shall be included in"</span> all copies or substantial portions of the Software.<span class="token string">""</span> THE SOFTWARE IS PROVIDED <span class="token string">"AS IS"</span>, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<span class="token string">" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"</span> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<span class="token string">" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"</span> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<span class="token string">" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN"</span> THE SOFTWARE.<span class="token string">""</span> vim: <span class="token builtin class-name">set</span> <span class="token assign-left variable">foldmethod</span><span class="token operator">=</span>marker <span class="token assign-left variable">foldlevel</span><span class="token operator">=</span><span class="token number">0</span>:"<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="plugin文件夹"><a href="#plugin文件夹" class="headerlink" title="plugin文件夹"></a>plugin文件夹</h5><p>放在<strong>nvim/after/</strong></p><p>从github上下载的nvim插件管理文件，在plug.vim里面可以通过这个plugin来直接下载nvim插件</p><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>终端分窗口</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="tmux-conf文件"><a href="#tmux-conf文件" class="headerlink" title=".tmux.conf文件"></a>.tmux.conf文件</h5><p>实现对tmux的键位设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> -g default-terminal <span class="token string">"xterm-256color"</span><span class="token comment">#set -ga terminal-overrides ",*256col*:Tc"</span><span class="token builtin class-name">set</span> -ga terminal-overrides <span class="token string">",xterm-256color:Tc"</span><span class="token comment"># action key</span>unbind C-bset-option -g prefix C-aset-option -g repeat-time <span class="token number">0</span><span class="token comment">#### Key bindings</span>set-window-option -g mode-keys <span class="token function">vi</span><span class="token comment">#bind t send-key C-t</span><span class="token comment"># Reload settings</span><span class="token builtin class-name">bind</span> r source-file ~/.tmux.conf <span class="token punctuation">\</span><span class="token punctuation">;</span> display <span class="token string">"Reloaded!"</span><span class="token comment"># Open current directory</span><span class="token builtin class-name">bind</span> o run-shell <span class="token string">"open #{pane_current_path}"</span><span class="token builtin class-name">bind</span> -r e kill-pane -a<span class="token comment"># vim-like pane switching</span><span class="token builtin class-name">bind</span> -r k select-pane -U <span class="token builtin class-name">bind</span> -r j select-pane -D <span class="token builtin class-name">bind</span> -r h select-pane -L <span class="token builtin class-name">bind</span> -r l select-pane -R <span class="token comment"># Moving window</span>bind-key -n C-S-Left swap-window -t -1 <span class="token punctuation">\</span><span class="token punctuation">;</span> previous-windowbind-key -n C-S-Right swap-window -t +1 <span class="token punctuation">\</span><span class="token punctuation">;</span> next-window<span class="token comment"># Resizing pane</span><span class="token builtin class-name">bind</span> -r C-k resize-pane -U <span class="token number">5</span><span class="token builtin class-name">bind</span> -r C-j resize-pane -D <span class="token number">5</span><span class="token builtin class-name">bind</span> -r C-h resize-pane -L <span class="token number">5</span><span class="token builtin class-name">bind</span> -r C-l resize-pane -R <span class="token number">5</span><span class="token comment">#### basic settings</span>set-option -g status-justify <span class="token string">"left"</span><span class="token comment">#set-option utf8-default on</span><span class="token comment">#set-option -g mouse-select-pane</span>set-window-option -g mode-keys <span class="token function">vi</span><span class="token comment">#set-window-option -g utf8 on</span><span class="token comment"># look'n feel</span>set-option -g status-fg cyanset-option -g status-bg black<span class="token builtin class-name">set</span> -g pane-active-border-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour166,bg<span class="token operator">=</span>default<span class="token builtin class-name">set</span> -g window-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour10,bg<span class="token operator">=</span>default<span class="token builtin class-name">set</span> -g window-active-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour12,bg<span class="token operator">=</span>defaultset-option -g history-limit <span class="token number">64096</span><span class="token builtin class-name">set</span> -sg escape-time <span class="token number">10</span><span class="token comment">#### COLOUR</span><span class="token comment"># default statusbar colors</span>set-option -g status-style <span class="token assign-left variable">bg</span><span class="token operator">=</span>colour235,fg<span class="token operator">=</span>colour136,default<span class="token comment"># default window title colors</span>set-window-option -g window-status-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour244,bg<span class="token operator">=</span>colour234,dim<span class="token comment"># active window title colors</span>set-window-option -g window-status-current-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour166,bg<span class="token operator">=</span>default,bright<span class="token comment"># pane border</span>set-option -g pane-border-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour235 <span class="token comment">#base02</span>set-option -g pane-active-border-style <span class="token assign-left variable">fg</span><span class="token operator">=</span>colour136,bg<span class="token operator">=</span>colour235<span class="token comment"># message text</span>set-option -g message-style <span class="token assign-left variable">bg</span><span class="token operator">=</span>colour235,fg<span class="token operator">=</span>colour166<span class="token comment"># pane number display</span>set-option -g display-panes-active-colour colour33 <span class="token comment">#blue</span>set-option -g display-panes-colour colour166 <span class="token comment">#orange</span><span class="token comment"># clock</span>set-window-option -g clock-mode-colour colour64 <span class="token comment">#green</span><span class="token comment"># allow the title bar to adapt to whatever host you connect to</span><span class="token builtin class-name">set</span> -g set-titles on<span class="token builtin class-name">set</span> -g set-titles-string <span class="token string">"#T"</span><span class="token comment"># import</span><span class="token comment"># Powerline</span><span class="token builtin class-name">source</span> ~/.tmux.powerline.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tmux-powerline-conf文件"><a href="#tmux-powerline-conf文件" class="headerlink" title=".tmux.powerline.conf文件"></a>.tmux.powerline.conf文件</h5><p>设置tmux窗口的美化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># vim: ft=tmux</span>if-shell <span class="token string">'test -z "$POWERLINE_CONFIG_COMMAND"'</span> <span class="token string">'set-environment -g POWERLINE_CONFIG_COMMAND powerline-config'</span><span class="token comment"># Don't version-check for this core functionality -- anything too old to</span><span class="token comment"># support these options likely won't work well with powerline</span><span class="token builtin class-name">set</span> -g status on<span class="token builtin class-name">set</span> -g status-interval <span class="token number">2</span><span class="token builtin class-name">set</span> -g status-left-length <span class="token number">60</span><span class="token builtin class-name">set</span> -g status-left <span class="token string">'#[fg=colour235,bg=colour252,bold] #S #[fg=colour252,bg=colour238,nobold]#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]'</span><span class="token builtin class-name">set</span> -g status-right-length <span class="token number">150</span><span class="token builtin class-name">set</span> -g status-right <span class="token string">'#[fg=colour59]#[fg=colour255,bg=colour59] #[fg=colour254,bold]#[fg=colour16,bg=colour254,bold] #h '</span><span class="token builtin class-name">set</span> -g window-status-separator <span class="token string">'#[fg=colour244,bg=colour234] '</span><span class="token builtin class-name">set</span> -g window-status-format <span class="token string">"#[fg=colour244,bg=colour234] #I #[fg=colour240] #[default,bg=colour234]#W "</span><span class="token builtin class-name">set</span> -g window-status-current-format <span class="token string">"#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"</span><span class="token comment"># load powerline</span>if-shell <span class="token string">'env "$POWERLINE_CONFIG_COMMAND" tmux setup'</span> <span class="token string">''</span> <span class="token string">'run-shell "powerline-config tmux setup"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="Downie"><a href="#Downie" class="headerlink" title="Downie"></a>Downie</h3><p>下载视频</p><h3 id="Permute"><a href="#Permute" class="headerlink" title="Permute"></a>Permute</h3><p>格式转换</p><p>转换视频格式可播放的mp4，配合上一个软件Downie一起使用</p><h3 id="Scudo"><a href="#Scudo" class="headerlink" title="Scudo"></a>Scudo</h3><p>防火墙，可以监控自己应用程序申请的网络权限</p><h3 id="ClearViewX"><a href="#ClearViewX" class="headerlink" title="ClearViewX"></a>ClearViewX</h3><p>电子书阅读器，支持一般大多数的电子书格式</p><h3 id="iStat-Menus"><a href="#iStat-Menus" class="headerlink" title="iStat Menus"></a>iStat Menus</h3><p>监控mac硬件参数</p><h3 id="Bartender"><a href="#Bartender" class="headerlink" title="Bartender"></a>Bartender</h3><p>菜单栏管理</p><h3 id="Mindnode"><a href="#Mindnode" class="headerlink" title="Mindnode"></a>Mindnode</h3><p>思维导图软件</p><h3 id="ClashX"><a href="#ClashX" class="headerlink" title="ClashX"></a>ClashX</h3><p>部署节点软件</p><h3 id="Tayasui-Sketches-Pro"><a href="#Tayasui-Sketches-Pro" class="headerlink" title="Tayasui Sketches Pro"></a>Tayasui Sketches Pro</h3><p>画图软件</p><h3 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h3><p>虚拟机软件</p><h3 id="One-Switch"><a href="#One-Switch" class="headerlink" title="One Switch"></a>One Switch</h3><p>带一些快捷按钮</p><h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h3><p>截图软件</p><h3 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a>Magnet</h3><p>快速窗口分屏</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Best_Pair</title>
      <link href="/2022/02/16/summary/codeforces/20220212-gl19/e-best-pair/"/>
      <url>/2022/02/16/summary/codeforces/20220212-gl19/e-best-pair/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">_IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">_DEBUG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"debug.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">_TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">__F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">300010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>N<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>MOD<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span>  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> s1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> s2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s1<span class="token operator">=</span>s2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">get</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span>MOD<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">_IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 枚举题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>178. 第K短路</title>
      <link href="/2022/02/14/summary/acwing/suan-fa-ti-gao/sou-suo/di-k-duan-lu/"/>
      <url>/2022/02/14/summary/acwing/suan-fa-ti-gao/sou-suo/di-k-duan-lu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-14 22:36:16 * @LastEditTime: 2022-02-14 23:56:07 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/180/    178. 第K短路    题目描述        给定一张 N 个点（编号 1,2…N），M 条边的有向图，求从起点 S 到终点 T 的第 K 短路的长度，路径允许重复经过点或边。不存在输出1    Tag:        1.最短路        2.A*    思路:        启发函数就是每个点到终点的最短距离，这个距离可以通过dijk算出        用cnt记录每个点的经过次数，当终点经过有k次当前的长度就是答案    */</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span>PII <span class="token operator">&gt;</span>PIII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">10010</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//  正反共用一个e,ne,w 需要开两倍空间</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>K<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token keyword">int</span> rh<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">,</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//启发函数:  每个点到终点的最短距离  (通过djik求出)</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">;</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> t<span class="token operator">=</span>heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver<span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>rh<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">~</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//启发函数:dist[] 表示每个点到终点的最短距离</span><span class="token keyword">int</span> <span class="token function">astart</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>PIII<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PIII<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PIII<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> heap<span class="token punctuation">;</span>    <span class="token comment">// {终点-&gt;tar的距离，{起点-&gt;tar的距离，tar}}</span>    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> t<span class="token operator">=</span>heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ver<span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">int</span> remove<span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">==</span>K<span class="token punctuation">)</span> <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>ver<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">~</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> K <span class="token punctuation">)</span><span class="token punctuation">{</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>remove<span class="token punctuation">,</span><span class="token punctuation">{</span>remove<span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>rh<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>rh<span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">&gt;&gt;</span>S<span class="token operator">&gt;&gt;</span>T<span class="token operator">&gt;&gt;</span>K<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">==</span>T<span class="token punctuation">)</span> K<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">dijk</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span> <span class="token function">astart</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> BFS </tag>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>179.八数码</title>
      <link href="/2022/02/14/summary/acwing/suan-fa-ti-gao/sou-suo/179.ba-shu-ma/"/>
      <url>/2022/02/14/summary/acwing/suan-fa-ti-gao/sou-suo/179.ba-shu-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FOR</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/activity/content/problem/content/1479/    179. 八数码      题目描述        给定你一个目标状态，要你还原会初始状态"12345678x        给出操作的序列，任意答案满足即可    Tag:        1.A*    思路:        使用A*就是有一个启发函数，减少尽可能少的状态来接近答案        如果在搜索的空间很大，并且有解，A*对于时间效率提升很大        如果存在无解情况，那么同样会搜索完全部空间        又因为A*是用优先队列来进行操作，每次操作的复杂度为o(logn)，可能还不如普通的bfs        用A*的场景        1.搜索空间很大，        2.必然有解        启发函数用来估计当前点和目标点的距离，来决定是否从当前点开始遍历的优先级        保证优先队列的点必然是距离终点距离最小的点*/</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span>string <span class="token operator">&gt;</span>PIS<span class="token punctuation">;</span><span class="token comment">//启发函数 ： 这里是当前状态和目标状态的曼哈顿距离</span><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'1'</span><span class="token punctuation">;</span>            res<span class="token operator">+=</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span>t<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">-</span> t<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string start<span class="token punctuation">)</span><span class="token punctuation">{</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>dist<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string <span class="token punctuation">,</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span> prev<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>PIS<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>PIS<span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>PIS<span class="token operator">&gt;&gt;</span> heap<span class="token punctuation">;</span>       heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token function">cal</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span>start<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右左下上</span>    <span class="token keyword">char</span> opt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"rldu"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    string end <span class="token operator">=</span><span class="token string">"12345678x"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span>heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        string tar<span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> dist<span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tar<span class="token operator">==</span>end<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tar<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                x<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        string source <span class="token operator">=</span>tar<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token operator">&gt;=</span><span class="token number">3</span><span class="token operator">||</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>b<span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>tar<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>tar<span class="token punctuation">[</span>a<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dist<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> dist<span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distance<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span>distance<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                prev<span class="token punctuation">[</span>tar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>source <span class="token punctuation">,</span>opt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">// 估计值 =  起点-&gt;tar  + tar -&gt; 目标点</span>                heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>tar<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">cal</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">,</span>tar<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>tar<span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> tar<span class="token punctuation">[</span>a <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    string res<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token operator">+=</span>prev<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        end<span class="token operator">=</span> prev<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">,</span>sp<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token operator">+=</span>ch<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">!=</span><span class="token char">'x'</span><span class="token punctuation">)</span> sp<span class="token operator">+=</span>ch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>sp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>sp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"unsolvable"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make Them Equal</title>
      <link href="/2022/02/14/summary/codeforces/20220131-122d2/d-make-them-equal/"/>
      <url>/2022/02/14/summary/codeforces/20220131-122d2/d-make-them-equal/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-14 02:03:43 * @LastEditTime: 2022-02-14 19:45:26 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1633/problem/D    D. Make Them Equal      题目描述        初始数组a里面的值全部为1        给你一个数组b和数组c，如果a[i]==b[i]，那么就会获得c[i]的价值        对于a数组你可以有k次操作对 a[i]= a[i] + a[i]/x        求在k次操作里面获得的最大价值是多少    Tag:        1.dp    思路：        1.首先对于每个b[i]预处理算出 1 通过操作到达b[i]的最小步数        2.题目就转换成01背包问题：            给你n个物品，第i个物品的操作成本为d[i],价值为c[i]            找出总操作成本不超过k的最大价值        3.观察知道对于每一个数通过操作得到b[i]的操作成本，必然小于b[i]这个数本身            所以在dp 操作成本的时候可以通过 k = min(k,sum) 来优化时间复杂度*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">d</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> i <span class="token operator">/</span> x<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">)</span>                d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> b<span class="token punctuation">)</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> c<span class="token punctuation">)</span>            cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> b<span class="token punctuation">)</span>            sum <span class="token operator">+=</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        k <span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">dp</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> k<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> d<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>d<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>dp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yet Another Minimization Problem</title>
      <link href="/2022/02/13/summary/codeforces/20220212-gl19/d-yet-another-minimization-problem/"/>
      <url>/2022/02/13/summary/codeforces/20220212-gl19/d-yet-another-minimization-problem/</url>
      
        <content type="html"><![CDATA[<h3 id="推导公式"><a href="#推导公式" class="headerlink" title="推导公式"></a>推导公式</h3><p><img src="/2022/02/13/summary/codeforces/20220212-gl19/d-yet-another-minimization-problem/image-20220213183329545.png" alt="image-20220213183329545"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1637/problem/D    D. Yet Another Minimization Problem    题目描述        有a,b两个数组，通过一个规则可以计算他们的价值，你可以任意交换i位置的a[i]和b[i]        使得两个数组的价值相加最小    Tag:        1.dp        2.数学知识    思路:        对价值计算的规则通过等式替换，可以得到他们的价值与他们的前缀和的平方有关        通过 dp 对a,b任意交换后，可以得到的所有前缀和进行判断        取最小值*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">inline</span> ll <span class="token function">po</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  x<span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>ll <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ll tot_sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        ll cost <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cost <span class="token operator">+=</span> <span class="token function">po</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">po</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tot_sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cost<span class="token operator">*=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;&gt;</span> <span class="token function">dp</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>tot_sum<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll w<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>w<span class="token operator">&lt;=</span>tot_sum<span class="token punctuation">;</span>w<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">|</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ll ans<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll w<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>w<span class="token operator">&lt;=</span>tot_sum<span class="token punctuation">;</span>w<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//可以得到的前缀和</span>                ll at<span class="token operator">=</span> w<span class="token punctuation">;</span>                ll bt<span class="token operator">=</span>tot_sum<span class="token operator">-</span>w<span class="token punctuation">;</span>                ans <span class="token operator">=</span><span class="token function">min</span> <span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">po</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">po</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// cout&lt;&lt;ans&lt;&lt;endl;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">+</span>cost<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1789. 牛为什么过马路 II</title>
      <link href="/2022/02/12/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1789.niu-wei-shi-me-guo-ma-lu-ii/"/>
      <url>/2022/02/12/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1789.niu-wei-shi-me-guo-ma-lu-ii/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1791/    1789. 牛为什么过马路 II    题目描述        52个字符串变成一个环形，有多少个字母的入口到出口的路径与其他有交叉的        求出多少对交叉    Tag:        1.枚举    思路:        显然对于封闭的两个字母之间只出现过一次的字母必然有交叉        ABCDEEFFA BCD必然和A有交叉        test:             暴力枚举两个相同字母之间有哪些字母字出现过一次        test2:            对于每个字母，枚举s中这两个字母中间只出现过一次的字母个数    */</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">st</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">;</span>            st<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// st</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span>j <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                st<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ed</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    st<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>173. 矩阵距离</title>
      <link href="/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/173.ju-zhen-ju-chi/"/>
      <url>/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/173.ju-zhen-ju-chi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-11 15:45:38 * @LastEditTime: 2022-02-11 23:30:15 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/175/    173. 矩阵距离    题目描述        求每个点和距离最近的1 的曼哈顿距离    Tag:        1.BFS        2.多源BFS    思路：        1.将所有的1入队，bfs具有最短路的性质，每个1第一个进入的点必然是距离1最近的点，所以每个点          只会被更新一次*/</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>PII q<span class="token punctuation">[</span>N <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> i<span class="token punctuation">,</span> j <span class="token punctuation">}</span><span class="token punctuation">;</span>                dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> t<span class="token punctuation">.</span>first <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> t<span class="token punctuation">.</span>second <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">&gt;=</span> n <span class="token operator">||</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&gt;=</span> m<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            q<span class="token punctuation">[</span><span class="token operator">++</span>tt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 多源BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>175.电路维修</title>
      <link href="/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/175.dian-lu-wei-xiu/"/>
      <url>/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/175.dian-lu-wei-xiu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/177/    175. 电路维修    题目描述        每一个都是可以旋转为 '\'或‘/’ ,只能走对角线        从左上角要到有下角最少需要旋转多少个才是连同的    Tag:        1.双端队列BFS        2. BFS    思路:        1.因为只能走对角线，并且起点又是(0,0)为偶数，每次走对角线必然是行列都+1,所以奇偶性不变，          所以如果 n+m 不是偶数那么就说明无解        2.对于一个点它对应到字符数组为 ix[4] = {-1,-1,0,0},iy[4]={-1,0,-1,0}        3.并且对于一个点而言左上为'\' ，右上为'/' ,左下为'/' ,右下为'\' 才可以同左上，右上，          左下，右下的点相连        4.char cs[5] ="\\//\\"; 对应dx和dy偏移量        5.难就难在建图*/</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span><span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> t<span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token operator">=</span>t<span class="token punctuation">.</span>first <span class="token punctuation">,</span>y<span class="token operator">=</span>t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>n<span class="token operator">&amp;&amp;</span> y<span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>            st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cs<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"\\//\\"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 左上，右上，左下，右下</span>        <span class="token keyword">int</span> ix<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>iy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 对应s数组里面的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> a <span class="token operator">&gt;</span> n <span class="token operator">||</span> b<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> b<span class="token operator">&gt;</span>m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sx<span class="token operator">=</span>x<span class="token operator">+</span>ix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>sy<span class="token operator">=</span>y<span class="token operator">+</span>iy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">==</span> cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0为匹配</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> q<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO SOLUTION"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> 双端队列BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1107. 魔板</title>
      <link href="/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/1107.mo-ban/"/>
      <url>/2022/02/11/summary/acwing/suan-fa-ti-gao/sou-suo/1107.mo-ban/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-11 21:04:36 * @LastEditTime: 2022-02-11 21:39:21 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1109/    1107. 魔板    题目描述        可以经过A,B,C三次改变，问由基本状态"12345678"，且到达目标状态的步数及其操作的序列，要求操作        序列是字典序最小，    Tag:        1.BFS    思路:        1.用map将一段字符串变成一个确实的整数，每次bfs枚举三个变化          按照ABC的顺序来进行变化，最后得到的操作序列必然是字典序最小的          第一个得到序列的必然是最短的，所以不需要重复更新，          即每一个序列只会被更新一次*/</span>string ed<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>dis<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">&gt;</span>sub<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span>sub<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        string  t<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>ed<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span>sub<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//A</span>            string temp <span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;temp&lt;&lt;endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                sub<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> sub<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'A'</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//B</span>            temp <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span>temp <span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;temp&lt;&lt;endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                sub<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> sub<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token char">'B'</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//c</span>            temp <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span>temp<span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// cout&lt;&lt;temp&lt;&lt;endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>temp <span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                sub<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span>sub<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token char">'C'</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// return ;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>ch<span class="token punctuation">;</span>        ed<span class="token operator">+=</span>ch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// cout&lt;&lt;ed&lt;&lt;endl;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ed<span class="token operator">==</span><span class="token string">"12345678"</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token string">"12345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1277.维护序列</title>
      <link href="/2022/02/11/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/1277.wei-hu-xu-lie/"/>
      <url>/2022/02/11/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/1277.wei-hu-xu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1279/    1277. 维护序列     题目描述        把数列中的一段数全部乘一个值；        把数列中的一段数全部加一个值；        询问数列中的一段数的和，由于答案可能很大，你只需输出这个数模 P 的值    Tag:        1.线段树    思路：        线段树懒标记        x * mul + add 如果是加 mul=1  x*mul+add=x+add                      如果是乘 add=0  x*mul+add=x*mul*/</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    ll sum<span class="token punctuation">;</span>    ll add<span class="token punctuation">,</span> mul<span class="token punctuation">;</span><span class="token punctuation">}</span> tr<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>root <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>sum <span class="token operator">+</span> right<span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//优化代码，避免多处重复</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token operator">&amp;</span>u<span class="token punctuation">,</span>ll  add<span class="token punctuation">,</span> ll  mul<span class="token punctuation">)</span><span class="token punctuation">{</span>    u<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>u<span class="token punctuation">.</span>sum <span class="token operator">*</span> mul <span class="token operator">+</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>r <span class="token operator">-</span> u<span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> add<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token comment">// 取余优先级高于加法</span>    u<span class="token punctuation">.</span>mul<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>u<span class="token punctuation">.</span>mul <span class="token operator">*</span> mul<span class="token punctuation">)</span> <span class="token operator">%</span>p<span class="token punctuation">;</span>    u<span class="token punctuation">.</span>add<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>u<span class="token punctuation">.</span>add <span class="token operator">*</span> mul <span class="token operator">+</span> add<span class="token punctuation">)</span> <span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> <span class="token operator">&amp;</span>root <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>add<span class="token punctuation">,</span>root<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// left.sum = ((ll)left.sum * root.mul + (ll)len * root.add) % p;</span>    <span class="token comment">// left.mul = (ll)left.mul * root.mul % p;</span>    <span class="token comment">// left.add = ((ll)left.add * root.mul + root.add) % p;</span>    <span class="token function">update</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>add<span class="token punctuation">,</span>root<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// len = right.r - right.l + 1;</span>    <span class="token comment">// right.sum = ((ll)right.sum * root.mul + (ll)len * root.add) % p;</span>    <span class="token comment">// right.mul = (ll)right.mul * root.mul % p;</span>    <span class="token comment">// right.add = ((ll)right.add * root.mul + root.add) % p;</span>    root<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">mof</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> add<span class="token punctuation">,</span> <span class="token keyword">int</span> mul<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>add<span class="token punctuation">,</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// int len = tr[u].r - tr[u].l + 1;</span>        <span class="token comment">// tr[u].sum = ((ll)tr[u].sum * mul + (ll)len * add )% p;</span>        <span class="token comment">// tr[u].add = ((ll)tr[u].add * mul + add) % p;</span>        <span class="token comment">// tr[u].mul = (ll)tr[u].mul * mul % p;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            <span class="token function">mof</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> add<span class="token punctuation">,</span> mul<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>            <span class="token function">mof</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> add<span class="token punctuation">,</span> mul<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll <span class="token function">qry</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            sum <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>            sum <span class="token operator">+=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token punctuation">;</span>        <span class="token keyword">return</span> sum <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>            <span class="token function">mof</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>            <span class="token function">mof</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">qry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2022/02/10/za-pian/hexo/"/>
      <url>/2022/02/10/za-pian/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="参考别人的hexo"><a href="#参考别人的hexo" class="headerlink" title="参考别人的hexo"></a>参考别人的hexo</h2><ul><li><a href="https://notes.zhangxiaocai.cn/posts/a53a9069.html#toc-heading-6">hexo01</a></li><li></li></ul><h2 id="部署hexo"><a href="#部署hexo" class="headerlink" title="部署hexo"></a>部署hexo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-marked<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>hexo根目录下配置<code>_config.yml</code>的deploy</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span>   <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过程错误"><a href="#过程错误" class="headerlink" title="过程错误"></a>过程错误</h2><h3 id="end-of-the-stream-or-a-document-separator-Is-expected"><a href="#end-of-the-stream-or-a-document-separator-Is-expected" class="headerlink" title="end of the stream or a document separator Is expected"></a>end of the stream or a document separator Is expected</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>就是二级标题有下划线，会导致解析和文档的分界线没被识别出来~~大概</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>md文件的最上面加上网页头信息外，再加一个横线来隔断</p><h3 id="hexo-d-无法部署"><a href="#hexo-d-无法部署" class="headerlink" title="hexo -d 无法部署"></a>hexo -d 无法部署</h3><p><img src="/2022/02/10/za-pian/hexo/image-20220319155000374.png" alt="image-20220319155000374"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf .deploy_git<span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>hexo clean hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片不显示"><a href="#图片不显示" class="headerlink" title="图片不显示"></a>图片不显示</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">npm install hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>243. 一个简单的整数问题2</title>
      <link href="/2022/02/10/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti-2/"/>
      <url>/2022/02/10/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti-2/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-10 18:12:40 * @LastEditTime: 2022-02-10 18:54:08 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token comment">/*    https://www.acwing.com/problem/content/244/    243. 一个简单的整数问题2    题目描述        给定一个长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：        C l r d，表示把 A[l],A[l+1],…,A[r] 都加上 d。        Q l r，表示询问数列中第 l∼r 个数的和。        对于每个询问，输出一个整数表示答案。    Tag:        1.线段树    思路:        线段树用懒标记做pushdown操作        每次在位置分裂之前就当前节点的add信息传到给他所有的子节点        时间复杂度O(logn)*/</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    ll sum<span class="token punctuation">,</span> add<span class="token punctuation">;</span><span class="token punctuation">}</span> tr<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//pushdown将当前节点的信息从上往下传到他所有的子节点上</span><span class="token comment">//位置应该是在分裂（递归）之前pushdown</span><span class="token keyword">void</span> <span class="token function">pushdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    node <span class="token operator">&amp;</span>root <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>add<span class="token punctuation">)</span> <span class="token punctuation">{</span>        left<span class="token punctuation">.</span>add <span class="token operator">+=</span> root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        left<span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>r <span class="token operator">-</span> left<span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        right<span class="token punctuation">.</span>add <span class="token operator">+=</span> root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        right<span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>r <span class="token operator">-</span> right<span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>root<span class="token punctuation">.</span>add<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//pushup是递归的到底层从底层向上更新数据</span><span class="token comment">//位置应该是在递归后在pushup</span><span class="token keyword">void</span> <span class="token function">pushup</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    node <span class="token operator">&amp;</span>root <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>right <span class="token operator">=</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>sum <span class="token operator">=</span> left<span class="token punctuation">.</span>sum <span class="token operator">+</span> right<span class="token punctuation">.</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">mof</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">-</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>v<span class="token punctuation">;</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>add <span class="token operator">+=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            <span class="token function">mof</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>            <span class="token function">mof</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pushup</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll <span class="token function">qry</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">pushdown</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            sum <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>            sum <span class="token operator">+=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//+=</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>            <span class="token function">mof</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">qry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1813. 方块游戏</title>
      <link href="/2022/02/10/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1813.fang-kuai-you-xi/"/>
      <url>/2022/02/10/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1813.fang-kuai-you-xi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1815/    1813. 方块游戏    题目描述        一个板子正反两面的单词个数，使得无论哪一组板子朝上的单词都能够        拼出来，所需要的最少的单词个数    Tag:        1.枚举    思路:        1.取一个板子正反两面的每个单词个数的最大值，累加即可          时间复杂度O（ns)*/</span><span class="token keyword">int</span> cot<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string a<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    string b<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bt<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>bt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             st<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bt<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cot<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">max</span><span class="token punctuation">(</span>bt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>cot<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1826. 农田缩减</title>
      <link href="/2022/02/10/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1826.nong-tian-suo-jian/"/>
      <url>/2022/02/10/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1826.nong-tian-suo-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1828/    1826. 农田缩减    题目描述        围一个围栏把所有的牛包围起来，现在要求去掉一个牛使得围栏的面积最小    Tag:        1.思维题        2.枚举    思路：        枚举最上，最右，最左，最下的四个点分别取掉之后的面积取个最小值*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>PII<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token function">y</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll count <span class="token operator">=</span><span class="token number">40000</span> <span class="token operator">*</span> <span class="token number">40000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> ix<span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>       <span class="token keyword">int</span> iy<span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>       ll  w<span class="token operator">=</span> <span class="token number">40000</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">40000</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>ix <span class="token operator">==</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> w <span class="token operator">=</span> x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ix <span class="token operator">==</span> x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> w<span class="token operator">=</span> x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> w<span class="token operator">=</span>x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>iy <span class="token operator">==</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> h <span class="token operator">=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span>  y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>iy <span class="token operator">==</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> h<span class="token operator">=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> h<span class="token operator">=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       count <span class="token operator">=</span> <span class="token function">min</span> <span class="token punctuation">(</span>count <span class="token punctuation">,</span>h<span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2022/02/09/web/python-splide/"/>
      <url>/2022/02/09/web/python-splide/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Python网站"><a href="#Python网站" class="headerlink" title="Python网站"></a>Python网站</h2><p><a href="https://docs.python.org/zh-cn/3/tutorial/">官方python教程</a></p><p><a href="https://www.runoob.com/python3/python3-tutorial.html">python菜鸟教程</a></p><h2 id="PIP管理工具"><a href="#PIP管理工具" class="headerlink" title="PIP管理工具"></a>PIP管理工具</h2><p>pip介绍</p><p>pip 是一个安装和管理 Python 包的工具，python安装包的工具有easy_install, setuptools, pip，distribute。使用这些工具都能下载并安装django。而pip是easy_install的替代品。在CPython解释器，pypy解释器，可以很好地工作。</p><h2 id="Xpath解析工具"><a href="#Xpath解析工具" class="headerlink" title="Xpath解析工具"></a>Xpath解析工具</h2><h3 id="浏览器下载插件Xpath-Helper"><a href="#浏览器下载插件Xpath-Helper" class="headerlink" title="浏览器下载插件Xpath Helper"></a>浏览器下载插件Xpath Helper</h3><p>浏览器安装Xpath_Helper帮助确定Xpath的作用域</p><p><img src="/2022/02/09/web/python-splide/image-20220209225943789.png" alt="image-20220209225943789"></p><h3 id="下载lxml库"><a href="#下载lxml库" class="headerlink" title="下载lxml库"></a>下载lxml库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#MAC下</span><span class="token comment">#没有安装pip</span><span class="token function">sudo</span> easy_install pip<span class="token comment">#安装lxml库</span>pip <span class="token function">install</span> lxml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Xpath语法"><a href="#Xpath语法" class="headerlink" title="Xpath语法"></a>Xpath语法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">xpath基本语法<span class="token number">1.</span>路径查询<span class="token operator">//</span>：查找所有子孙节点，不考虑层级关系    <span class="token operator">/</span>：找直接子节点        <span class="token comment"># 查找所有含id的li标签的内容</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token builtin">list</span><span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/li[@id]/text()'</span><span class="token punctuation">)</span>   <span class="token number">2.</span>谓词查询<span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token punctuation">]</span><span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"maincontent"</span><span class="token punctuation">]</span><span class="token number">3.</span>属性查询<span class="token operator">//</span>@<span class="token keyword">class</span>    <span class="token comment">#查找id为table的li标签的class的属性值</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token builtin">list</span> <span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul/li[@id="table"]/@class'</span><span class="token punctuation">)</span>    <span class="token number">4.</span>模糊查询<span class="token comment">#查找所有id中含t的标签</span><span class="token operator">//</span>div<span class="token punctuation">[</span>contains<span class="token punctuation">(</span>@<span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token operator">//</span>div<span class="token punctuation">[</span>starts<span class="token operator">-</span><span class="token keyword">with</span><span class="token punctuation">(</span>@<span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"he"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">5.</span>内容查询<span class="token operator">//</span>div<span class="token operator">/</span>h1<span class="token operator">/</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6</span>，逻辑运算<span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"head"</span> <span class="token keyword">and</span> @<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"s down"</span><span class="token punctuation">]</span>    <span class="token operator">//</span>title <span class="token operator">|</span>  <span class="token operator">//</span>price逻辑运算只能用在标签        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> calendar <span class="token keyword">import</span> SATURDAY<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> sslssl<span class="token punctuation">.</span>_create_default_https_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>_create_unverified_context<span class="token comment"># 获取连接</span><span class="token keyword">def</span> <span class="token function">create_request</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#1.找出网站名称的变换地方</span>    url <span class="token operator">=</span> <span class="token string">"http://acm.hi-54.com/ranklist.php?p="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>    <span class="token comment">#请求头文件</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36'</span>    <span class="token punctuation">}</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">return</span> request<span class="token comment"># 获取响应</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    content <span class="token operator">=</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token comment"># 下载资源    </span><span class="token keyword">def</span> <span class="token function">down_load</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#urllib.request,urlretrieve('图片地址，'文件名字')</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token comment">#通过xpath解析你要的资源所处的标签位置</span>    ps_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>        <span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr//td[1]'</span><span class="token punctuation">)</span>    id_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr/td[2]'</span><span class="token punctuation">)</span>    name_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>        <span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr/td[3]/a'</span><span class="token punctuation">)</span>    submit1_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>        <span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr/td[4]/a[1]'</span><span class="token punctuation">)</span>    submit2_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>        <span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr/td[4]/a[3]'</span><span class="token punctuation">)</span>    pass_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col-md-12"]//table[@id="tableID"]//tr//td[5]'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ps_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t1<span class="token operator">=</span>ps_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        t2<span class="token operator">=</span>id_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        t3<span class="token operator">=</span>name_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        t4<span class="token operator">=</span>submit1_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        t5<span class="token operator">=</span>submit2_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        t6<span class="token operator">=</span>pass_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"21"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span>t2<span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span>t3<span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span>t4<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>t5<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>t6<span class="token punctuation">)</span>                                    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start_page <span class="token operator">=</span> <span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'开始'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end_page<span class="token operator">=</span><span class="token builtin">int</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_page<span class="token punctuation">,</span>end_page<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        request <span class="token operator">=</span> create_request<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        content <span class="token operator">=</span> get_content<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        down_load<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jsonpath解析工具"><a href="#Jsonpath解析工具" class="headerlink" title="Jsonpath解析工具"></a>Jsonpath解析工具</h2><h3 id="下载Jsonpath"><a href="#下载Jsonpath" class="headerlink" title="下载Jsonpath"></a>下载Jsonpath</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> jsonpath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Jsonpath和Xpath的语法对比"><a href="#Jsonpath和Xpath的语法对比" class="headerlink" title="Jsonpath和Xpath的语法对比"></a>Jsonpath和Xpath的语法对比</h3><p><img src="/2022/02/09/web/python-splide/image-20220210143859650.png" alt="image-20220210143859650"></p><hr><p><img src="/2022/02/09/web/python-splide/image-20220210144149909.png" alt="image-20220210144149909"></p><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><h3 id="BeautifulSoup概述"><a href="#BeautifulSoup概述" class="headerlink" title="BeautifulSoup概述"></a>BeautifulSoup概述</h3><ul><li>Beautifulsoupi简称<ul><li>bs4</li></ul></li><li>什么是 Beatifulsoup？<ul><li>Beautifulsoup，和1xml一样，是一个html的解析器，主要功能也是解析和提取数据</li></ul></li><li>3.优缺点？<ul><li>缺点：效率没有lxml的效率高</li><li>优点：接口设计人性化，使用方便</li></ul></li></ul><h3 id="BeautifulSoup安装及创建"><a href="#BeautifulSoup安装及创建" class="headerlink" title="BeautifulSoup安装及创建"></a>BeautifulSoup安装及创建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.安装pip <span class="token function">install</span> bs64<span class="token number">2</span>.导入from bs64 <span class="token function">import</span> BeautifulSoup<span class="token number">3</span>.创建对象服务器响应的文件生成对象<span class="token assign-left variable">soup</span><span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response. read<span class="token punctuation">(</span><span class="token punctuation">)</span>.decode<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">'lxml'</span><span class="token punctuation">)</span>本地文件生成对象soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span>, <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment">#注意：默认打开文件的编码格式gbk所以需要指定打开编码格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BeautifulSoup语法"><a href="#BeautifulSoup语法" class="headerlink" title="BeautifulSoup语法"></a>BeautifulSoup语法</h3><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span>根据节点名定位标签：标签选择器soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'***(title,a,p等)'</span><span class="token punctuation">)</span><span class="token number">2.</span>根据节点的<span class="token keyword">class</span>属性定位：css选择器soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.***'</span><span class="token punctuation">)</span><span class="token number">3.</span>根据<span class="token builtin">id</span>定位soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#***'</span><span class="token punctuation">)</span><span class="token number">4.</span>嵌套选择：ss <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token comment">#得到的是一个列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ss<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">5.</span>层级选择器soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div &gt; ul &gt; li'</span><span class="token punctuation">)</span> <span class="token comment">#单层级选择器，按照顺序找到li</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div li'</span><span class="token punctuation">)</span> <span class="token comment">#多层级选择器，包含了div下的所有li</span><span class="token comment">#获取节点的文本或属性</span>tag<span class="token punctuation">.</span>string<span class="token punctuation">:</span>获取直接子文本，如果节点内有平行的节点，则结果是<span class="token boolean">None</span>tag<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取子孙节点的所有文本tag<span class="token punctuation">[</span><span class="token string">'***(属性)'</span><span class="token punctuation">]</span>：获取节点属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过程问题"><a href="#过程问题" class="headerlink" title="过程问题"></a>过程问题</h2><h3 id="1-SSL证书问题"><a href="#1-SSL证书问题" class="headerlink" title="1.SSL证书问题"></a>1.SSL证书问题</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment"># 翻阅资料后发现，报这个错是因为SSL 证书的验证问题。</span><span class="token keyword">import</span> sslssl<span class="token punctuation">.</span>_create_default_https_context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>_create_unverified_contexturl <span class="token operator">=</span> <span class="token string">'https://translate.google.cn/'</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"test.html"</span><span class="token punctuation">)</span><span class="token comment"># "wb" : write  byte  </span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OKEA</title>
      <link href="/2022/02/07/summary/codeforces/20220206-770d2/c.okea/"/>
      <url>/2022/02/07/summary/codeforces/20220206-770d2/c.okea/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-06 23:48:38 * @LastEditTime: 2022-02-07 18:48:49 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1634/problem/C    1634.OKEA    题目描述        给你一个n和m，要求你对1到n*m的数进行重排序        保证每个数唯一，只出现过一次        使得一行里面的任意[l,r]的平均数为整数    Tag:        1.构造题        2.数学知识    思路：        显然一行要么全是偶数，要么全是奇数才能满足题目的要求        先提前判断能否符合要求        就是要算出1到n*m的奇数个数和偶数个数是否是列数的整数倍        如果是那么就可以通过全是偶数，全是奇数一行来构造*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>        <span class="token keyword">int</span> os<span class="token operator">=</span>t<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> js <span class="token operator">=</span> t <span class="token operator">-</span> os<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>js<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> js<span class="token operator">/</span>b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                    v <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            v <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> os <span class="token operator">/</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                    v <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 构造题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fortune Telling</title>
      <link href="/2022/02/07/summary/codeforces/20220206-770d2/b.fortune-telling/"/>
      <url>/2022/02/07/summary/codeforces/20220206-770d2/b.fortune-telling/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-06 22:55:27 * @LastEditTime: 2022-02-07 18:41:07 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1634/problem/B    1634.Fortune Telling    题目描述        给你一个长度为n的数组，x,y        Alice 为 x        Bob 为 x+3        每次可以支持的操作为         n+a[i]        n^a[i]        问谁最后可以得到y值，保证数据必然有解    Tag:        1.思维题        2.数学知识    思路：        判断奇偶性        因为x无论是x+g[i]还是x^g[i]对于x的奇偶性改变是一样的        所以最后只需要判断 x 和 y 是不是同一奇偶性。        那么x的取值就没什么意义，只需要知道它的奇偶性可以。        */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>ll n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>ll g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> os<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Alice"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Alice"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bob"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">sol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kill the Monster</title>
      <link href="/2022/02/06/summary/codeforces/20220131-122d2/c.kill-the-monster/"/>
      <url>/2022/02/06/summary/codeforces/20220131-122d2/c.kill-the-monster/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-02-03 16:40:11 * @LastEditTime: 2022-02-06 19:07:26 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://codeforces.com/contest/1633/problem/C    C. Kill the Monster    题目描述        玩家有攻击力dc和生命hc        怪物有攻击力dm和生命hm        玩家可以用过硬币升级a攻击力或b生命        玩家能否打过怪物    Tag:        1.枚举        2.math    思路        1.判断 hc/dm 和 hm/dc 向上取整的值        如果后者小说明玩家胜利        这里有一个向上取整除的方法        hm/dc向上取整= (hm+dc-1)/dc        2.因为这里的数据小所以可以通过枚举硬币的操作来判断 上述 的结果*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> hc<span class="token punctuation">,</span> dc<span class="token punctuation">,</span> hm<span class="token punctuation">,</span> dm<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> hc <span class="token operator">&gt;&gt;</span> dc <span class="token operator">&gt;&gt;</span> hm <span class="token operator">&gt;&gt;</span> dm<span class="token punctuation">;</span>        <span class="token comment">// hm*dm &lt; hc*dc</span>        <span class="token keyword">int</span> k<span class="token punctuation">,</span> w<span class="token punctuation">,</span> a<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> w <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nhc <span class="token operator">=</span> hc <span class="token operator">+</span> i <span class="token operator">*</span> a<span class="token punctuation">;</span>            <span class="token keyword">int</span> ndc <span class="token operator">=</span> dc <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> w<span class="token punctuation">;</span>            <span class="token comment">// hm/dc &lt; hc/dm</span>            <span class="token comment">//向上取整</span>            <span class="token keyword">int</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span>            c1 <span class="token operator">=</span> <span class="token punctuation">(</span>hm <span class="token operator">+</span> ndc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> ndc<span class="token punctuation">;</span>            c2 <span class="token operator">=</span> <span class="token punctuation">(</span>nhc <span class="token operator">+</span> dm <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> dm<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">&lt;=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>246.区间最大公约数</title>
      <link href="/2022/02/06/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/246.qu-jian-zui-da-gong-yue-shu/"/>
      <url>/2022/02/06/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/246.qu-jian-zui-da-gong-yue-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-27 04:46:50 * @LastEditTime: 2022-02-06 18:46:33 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/247/    246.区间最大公约数    题目描述        C l r d，表示把 A[l],A[l+1],…,A[r] 都加上 d。        Q l r，表示询问 A[l],A[l+1],…,A[r] 的最大公约数(GCD)        对于每个询问，输出一个整数表示答案。    Tag:        1.线段树        2.差分        3.数学知识    思路：        题意一看貌似是区间修改，这样就会需要用到懒标记，但是通过分析可以        简化成单点修改                结论：        d1=gcd(a1,a2,a3，···an)=gcd(a1,a2-a1,a3-a2,···an-an-1)=d2        证明：            设d1为左边的最大公约数，d2为的最大公约数            左边 -&gt; 右边            a1%d1==0 -&gt; a1%d1==0            a2%d1==0 -&gt; (a2-a1)%d1==0            ···            所以d1是右边的一个公约数            由此得到d2&gt;=d1            同理可得            右边 -&gt;左边            a1%d2==0 -&gt; a1%d2==0            (a2-a1)%d2==0 -&gt; a2%d2==0            ···            所以d2是左边的一个公约数            由此得到d1&gt;=d2            综上所述 d1&gt;=d2,d2&gt;=d1            所以 d2==d1，等式成立        通过上述结论，可以将修改操作用单点修改差分        然后递归求区间的前缀和来实现        那么[l,r]的 gcd 也是差分数组的[l,r]的gcd        所以只需要线段树来维护一个差分数组的gcd和前缀和        对于查询操作[l,r]的最大公约数        gcd(a[l],gcd(b[l+1],···，b[r]))        其中a[l]等于b的前缀和[1,l]*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500010</span><span class="token punctuation">;</span>ll w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    ll sum<span class="token punctuation">;</span>    ll gcd<span class="token punctuation">;</span><span class="token punctuation">}</span> tr<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token operator">&amp;</span> u<span class="token punctuation">,</span> node<span class="token operator">&amp;</span> l<span class="token punctuation">,</span> node<span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    u<span class="token punctuation">.</span>sum <span class="token operator">=</span> l<span class="token punctuation">.</span>sum <span class="token operator">+</span> r<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    u<span class="token punctuation">.</span>gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>gcd<span class="token punctuation">,</span> r<span class="token punctuation">.</span>gcd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//gcd </span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">update</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll b <span class="token operator">=</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> w<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> l<span class="token punctuation">,</span> b<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>node <span class="token function">qry</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token comment">// 查询右边不等于mid 因为build的时候</span>            <span class="token keyword">return</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token comment">//查询左边等于mid</span>            <span class="token keyword">return</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            node a <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            node b <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            node fa<span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> fa<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ll b <span class="token operator">=</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">+</span> v<span class="token punctuation">;</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> b<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token comment">//查询左边等于mid</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>            node a <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,l]的前缀和</span>            node b <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>                b <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [l+1,r]的最大gcd</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>sum<span class="token punctuation">,</span> b<span class="token punctuation">.</span>gcd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ll v<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>            <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>                <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>245. 你能回答这些问题吗</title>
      <link href="/2022/02/06/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/245.ni-neng-hui-da-zhe-xie-wen-ti-ma/"/>
      <url>/2022/02/06/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/245.ni-neng-hui-da-zhe-xie-wen-ti-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/246/    245. 你能回答这些问题吗    题目描述        1 x y，查询区间【x，y】中的最大连续子段和        2 x y，把A【x】改成y。    Tag:        1.线段树    思路：        u,l,r        一个区间 u 的最大连续子段和tmax有如下情况        1.l.tmax  ：要么就是完全在左边 ，值就是左区间的最大连续子段和        2.r.tmax  ：要么就是完全在右边，值就是右区间的最大连续子段和        3.l.rsum + r.lsum ：要么就是两边都有，值等于左区间的最大后缀和+右区间的最大前缀和        综上所述，所以一个区间要维护如下信息        1.区间最大前缀和 lsum        2.区间最大后缀和 rsum        3.区间最大连续子段和 tmax        又对于一个区间u的最大前缀和有如下情况        1.l.lsum : 完全在左边，值就是左区间的最大连续子段和        2.l.sum + r.sum     ：两边都有，值等于左区间的和+右区间的最大前缀和        同理区间 u 的最大后缀和有如下情况        1.r.rsum        2.r.sum+l.rsum        综上所述，我们又需要维护一个区间和 sum        结果就是        通过区间和 sum 来获得我们的最大前缀和，最大后缀和的信息        通过最大前缀和，最大后缀和来获得最大连续子段和信息    */</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">500010</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> lsum<span class="token punctuation">;</span> <span class="token comment">//最大前缀和</span>    <span class="token keyword">int</span> rsum<span class="token punctuation">;</span> <span class="token comment">//最大后缀和</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span> <span class="token comment">//总和</span>    <span class="token keyword">int</span> tmax<span class="token punctuation">;</span> <span class="token comment">//最大子段和</span><span class="token punctuation">}</span> tr<span class="token punctuation">[</span>N <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Node<span class="token operator">&amp;</span> u<span class="token punctuation">,</span> Node<span class="token operator">&amp;</span> l<span class="token punctuation">,</span> Node<span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    u<span class="token punctuation">.</span>sum <span class="token operator">=</span> l<span class="token punctuation">.</span>sum <span class="token operator">+</span> r<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    u<span class="token punctuation">.</span>lsum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>lsum<span class="token punctuation">,</span> l<span class="token punctuation">.</span>sum <span class="token operator">+</span> r<span class="token punctuation">.</span>lsum<span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token punctuation">.</span>rsum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>rsum<span class="token punctuation">,</span> r<span class="token punctuation">.</span>sum <span class="token operator">+</span> l<span class="token punctuation">.</span>rsum<span class="token punctuation">)</span><span class="token punctuation">;</span>    u<span class="token punctuation">.</span>tmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>tmax<span class="token punctuation">,</span> r<span class="token punctuation">.</span>tmax<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>rsum <span class="token operator">+</span> r<span class="token punctuation">.</span>lsum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">update</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Node <span class="token function">qry</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&gt;=</span> l <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            <span class="token comment">//完全在左边</span>            <span class="token keyword">return</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// return </span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span>            <span class="token comment">//完全在右边</span>            <span class="token keyword">return</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//两边都有</span>            Node left <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node right <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node fa<span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span>fa<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> fa<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">==</span> p <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">==</span> p<span class="token punctuation">)</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span> p<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> opt<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> r<span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            Node ans <span class="token operator">=</span> <span class="token function">qry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span>tmax <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> p<span class="token punctuation">,</span> v<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> p <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>            <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4298.搭档</title>
      <link href="/2022/02/06/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/4298.da-dang/"/>
      <url>/2022/02/06/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/4298.da-dang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/4301/    4298. 搭档    题目描述        男女之间的魅力差值少于1可以匹配，最多可以匹配多少对    Tag:        1.二分图    思路:        首先对于每个 g 找到它可以匹配的所有的 m         用一个数组记录每个 g 已经匹配的 m        如果当前遍历到的这个 m1 可以匹配的 g1 已经有了匹配的 mx        那么就让 mx 去找其他他可以匹配的 gx ，使得当前遍历到的 m1 匹配 g1 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token comment">//100 * 100</span><span class="token comment">//每个人连100个人，最多有100个人，所以最多有10000个结点</span><span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> gr<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>gr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                gr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">man</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> man<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">g</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>man<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/02/05/ji-suan-ji-ji-chu-lei/linux/"/>
      <url>/2022/02/05/ji-suan-ji-ji-chu-lei/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="LINUX虚拟机"><a href="#LINUX虚拟机" class="headerlink" title="LINUX虚拟机"></a>LINUX虚拟机</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl set-default multi-user.target  <span class="token string">"默认进入字符界面"</span>systemctl set-default graphical.target   <span class="token string">"默认进入图形界面"</span>init <span class="token number">5</span>CTRL+ALT+F1-F6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TMUX"><a href="#TMUX" class="headerlink" title="TMUX"></a>TMUX</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">功能：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 分屏。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 允许断开Terminal连接后，继续运行进程。结构：    一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。    实例：        tmux:            session <span class="token number">0</span>:                window <span class="token number">0</span>:                    pane <span class="token number">0</span>                    pane <span class="token number">1</span>                    pane <span class="token number">2</span>                    <span class="token punctuation">..</span>.                window <span class="token number">1</span>                window <span class="token number">2</span>                <span class="token punctuation">..</span>.            session <span class="token number">1</span>            session <span class="token number">2</span>            <span class="token punctuation">..</span>.操作：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。   新建窗口Ctrl + a后手指松开，然后按c:创建一个新的窗口    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按%：将当前pane左右平分成两个pane。    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按<span class="token string">"（注意是双引号"</span>）：将当前pane上下平分成两个pane。    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 鼠标点击可以选pane。    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按方向键：选择相邻的pane。    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> 鼠标拖动pane之间的分割线，可以调整分割线的位置。    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> 按住ctrl + a的同时按方向键，可以调整pane之间分割线的位置。    <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按z：将当前pane全屏/取消全屏。<span class="token comment">#    (10) 按下ctrl + a后手指松开，然后按d：挂起当前session。</span>    <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> tmux a：打开之前挂起的session。    <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> 按下ctrl + a后手指松开，然后按s：选择其它session。        方向键 —— 上：选择上一项 session/window/pane        方向键 —— 下：选择下一项 session/window/pane        方向键 —— 右：展开当前项 session/window        方向键 —— 左：闭合当前项 session/window    <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。    <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>完全相同。    <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> 按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。    <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> 鼠标滚轮：翻阅当前pane内的内容。    <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）    <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> tmux中复制/粘贴文本的通用方式：        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 按下Ctrl + a后松开手指，然后按<span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 按下Ctrl + a后松开手指，然后按<span class="token punctuation">]</span>，会将剪贴板中的内容粘贴到光标处命令:tmux new　　创建默认名称的会话（在tmux命令模式使用new命令可实现同样的功能，其他命令同理，后文不再列出tmux终端命令）tmux new -s mysession　　创建名为mysession的会话tmux <span class="token function">ls</span>　　显示会话列表tmux a　　连接上一个会话tmux a -t mysession　　连接指定会话tmux <span class="token function">rename</span> -t s1 s2　　重命名会话s1为s2tmux kill-session　　关闭上次打开的会话tmux kill-session -t s1　　关闭会话s1tmux kill-session -a -t s1　　关闭除s1外的所有会话tmux kill-server　　关闭所有会话tmux kill-window -t s1 ： 关闭会话s1的一个窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">转载至</a></p><h2 id="Netrw"><a href="#Netrw" class="headerlink" title="Netrw"></a>Netrw</h2><blockquote><p>资料链接</p></blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/1891433">F1常用命令的中文版</a></li></ul><h2 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">功能：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 命令行模式下的文本编辑器。    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 使用方式：vim filename        如果已有该文件，则打开它。        如果没有该文件，则打开个一个新的文件，并命名为filename    操作：    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> i：进入编辑模式    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> ESC：进入一般命令模式    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> h 或 左箭头键：光标向左移动一个字符    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> j 或 向下箭头：光标向下移动一个字符    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> k 或 向上箭头：光标向上移动一个字符    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> l 或 向右箭头：光标向右移动一个字符    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> n<span class="token operator">&lt;</span>Space<span class="token operator">&gt;</span>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token number">0</span> 或 功能键<span class="token punctuation">[</span>Home<span class="token punctuation">]</span>：光标移动到本行开头    <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> $ 或 功能键<span class="token punctuation">[</span>End<span class="token punctuation">]</span>：光标移动到本行末尾    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> G：光标移动到最后一行    <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> :n 或 nG：n为数字，光标移动到第n行    <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> gg：光标移动到第一行，相当于1G    <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> n<span class="token operator">&lt;</span>Enter<span class="token operator">&gt;</span>：n为数字，光标向下移动n行    <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> /word：向光标之下寻找第一个值为word的字符串。    <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> ?word：向光标之上寻找第一个值为word的字符串。    <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> n：重复前一个查找操作    <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span> N：反向重复前一个查找操作    <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2    <span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span> :1,<span class="token variable">$s</span>/word1/word2/g：将全文的word1替换为word2    <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> :1,<span class="token variable">$s</span>/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。    <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span> v：选中文本    <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> d：删除选中的文本    <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span> dd: 删除当前行    <span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> y：复制选中的文本    <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> yy: 复制当前行    <span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> p: 将复制的数据在光标的下一行/下一个位置粘贴    <span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span> u：撤销    <span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span> Ctrl + r：取消撤销    <span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span> 大于号 <span class="token operator">&gt;</span>：将选中的文本整体向右缩进一次    <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> 小于号 <span class="token operator">&lt;</span>：将选中的文本整体向左缩进一次    <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span> :w 保存    <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> :w<span class="token operator">!</span> 强制保存    <span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> :q 退出    <span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span> :q<span class="token operator">!</span> 强制退出    <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> :wq 保存并退出    <span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> :set <span class="token function">paste</span> 设置成粘贴模式，取消代码自动缩进    <span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span> :set nopaste 取消粘贴模式，开启代码自动缩进    <span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span> :set nu 显示行号    <span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> :set nonu 隐藏行号    <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token assign-left variable">gg</span><span class="token operator">=</span>G：将全文代码格式化<span class="token comment">#    (41) :noh 关闭查找关键词高亮</span>    <span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span> Ctrl + q：当vim卡死时，可以取消当前正在执行的命令异常处理：    每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。    如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：        <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 找到正在打开该文件的程序，并退出        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 直接删掉该swp文件即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">转载</a></p><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>使用变量，需要加上$符号，或者${}符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意等号两边不要有空格</span><span class="token assign-left variable">name</span><span class="token operator">=</span>hello<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'hello'</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token comment">#删除变量 unset</span><span class="token builtin class-name">unset</span> name<span class="token comment"># 使用变量的值</span><span class="token builtin class-name">echo</span> <span class="token variable">${hello}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单引号和双引号的区别"><a href="#单引号和双引号的区别" class="headerlink" title="单引号和双引号的区别"></a>单引号和双引号的区别</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><ul><li><p>单引号中的内容会原样输出，不会执行、不会取变量；</p></li><li><p>双引号中的内容可以执行、可以取变量；</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span>xxx  <span class="token comment"># 不用引号</span><span class="token builtin class-name">echo</span> <span class="token string">'hi, $name \"hh\"'</span>  <span class="token comment"># 单引号字符串，输出 hi, $name \"hh\"</span><span class="token builtin class-name">echo</span> <span class="token string">"hi, <span class="token variable">$name</span> <span class="token entity" title="\&quot;">\"</span>hh<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token comment"># 双引号字符串，输出 hi, xxx "hh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><ul><li>表达式的exit code为0，表示真；为非零，表示假</li><li><strong>test  或 [ ]</strong> </li><li>条件表达式要放在方括号之间，并且两边要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 **[ $a == $b ]**。</li></ul><h4 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h4><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">-e</td><td align="center">文件是否存在</td></tr><tr><td align="center">-f</td><td align="center">是否为文件</td></tr><tr><td align="center">-d</td><td align="center">是否为目录</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#  判断文件夹是否存在</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"/data/"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"文件夹不存在"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"文件夹已经存在"</span><span class="token keyword">fi</span><span class="token comment"># 判断文件是否存在</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/data/filename"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"文件不存在"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"文件存在"</span><span class="token keyword">fi</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断文件权限"><a href="#判断文件权限" class="headerlink" title="判断文件权限"></a>判断文件权限</h4><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">-r</td><td align="center">可读权限</td></tr><tr><td align="center">-w</td><td align="center">可写权限</td></tr><tr><td align="center">-x</td><td align="center">执行权限</td></tr><tr><td align="center">-s</td><td align="center">文件是否为空</td></tr></tbody></table><h4 id="判断数字"><a href="#判断数字" class="headerlink" title="判断数字"></a>判断数字</h4><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">a==b</td></tr><tr><td align="center">-ne</td><td align="center">a!=b</td></tr><tr><td align="center">-gt</td><td align="center">a&gt;b</td></tr><tr><td align="center">-lt</td><td align="center">a&lt;b</td></tr><tr><td align="center">-ge</td><td align="center">a&gt;=b</td></tr><tr><td align="center">-le</td><td align="center">a&lt;=b</td></tr></tbody></table><h4 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h4><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">-z</td><td align="center">判断为空，如果为空返回True:q</td></tr><tr><td align="center">-n</td><td align="center">判断非空，如果非空返回True</td></tr></tbody></table><h4 id="判断内部的逻辑符"><a href="#判断内部的逻辑符" class="headerlink" title="判断内部的逻辑符"></a>判断内部的逻辑符</h4><table><thead><tr><th align="center">参数</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">-a</td><td align="center">and == $$</td></tr><tr><td align="center">-o</td><td align="center">or == ||</td></tr><tr><td align="center">!</td><td align="center">！</td></tr></tbody></table><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><ul><li><p>在命令行中输入<code>man test</code>，可以查看test命令的用法。</p></li><li><p><code>test</code>命令用于判断文件类型，以及对变量做比较。</p></li><li><p><code>test</code>命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假。</p></li></ul><p>例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span> <span class="token number">2</span> -lt <span class="token number">3</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="判断符"><a href="#判断符" class="headerlink" title="[] 判断符"></a>[] 判断符</h4><p>例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span> <span class="token number">2</span> -lt <span class="token number">3</span> <span class="token punctuation">]</span>  <span class="token comment"># 为真，返回值为0</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出上个命令的返回值，输出0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><h4 id="移动图片"><a href="#移动图片" class="headerlink" title="移动图片"></a>移动图片</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">FROM_PATH</span><span class="token operator">=</span>/Users/mrl/Downloads/<span class="token assign-left variable">TO_PATH</span><span class="token operator">=</span>/Users/mrl/Pictures<span class="token comment"># 获取文件后缀 ${1##*.} // ## 任意多个左边，  *.：删除.左边的字符</span><span class="token comment"># 获取文件前缀 ${1%%.*} // %% 任意多个右边，  *.：删除.右边的字符</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $FROM_PATH<span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${file<span class="token operator">##</span>.}</span>"</span> <span class="token comment"># 获取文件的后缀</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${file<span class="token operator">##</span>*.}</span>"</span> <span class="token operator">==</span> <span class="token string">"png"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${file<span class="token operator">##</span>*.}</span>"</span> <span class="token operator">==</span> <span class="token string">"jpg"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${file<span class="token operator">##</span>*.}</span>"</span> <span class="token operator">==</span> <span class="token string">"jpeg"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">mv</span> <span class="token variable">${FROM_PATH}</span><span class="token variable">${file}</span> <span class="token variable">${TO_PATH}</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件名字后缀前缀提取"><a href="#文件名字后缀前缀提取" class="headerlink" title="文件名字后缀前缀提取"></a>文件名字后缀前缀提取</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#文件名字</span><span class="token assign-left variable">file</span><span class="token operator">=</span>/dir1/dir2/dir3/my.file.txt<span class="token variable">${file<span class="token operator">#</span>*<span class="token operator">/</span>}</span>：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt<span class="token variable">${file<span class="token operator">##</span>*<span class="token operator">/</span>}</span>：删掉最后一个 /  及其左边的字符串：my.file.txt<span class="token variable">${file<span class="token operator">#</span>*.}</span>：删掉第一个 <span class="token builtin class-name">.</span>  及其左边的字符串：file.txt<span class="token variable">${file<span class="token operator">##</span>*.}</span>：删掉最后一个 <span class="token builtin class-name">.</span>  及其左边的字符串：txt<span class="token variable">${file<span class="token operator">%</span><span class="token operator">/</span>*}</span>：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3<span class="token variable">${file<span class="token operator">%%</span><span class="token operator">/</span>*}</span>：删掉第一个 /  及其右边的字符串：<span class="token punctuation">(</span>空值<span class="token punctuation">)</span><span class="token variable">${file<span class="token operator">%</span>.*}</span>：删掉最后一个  <span class="token builtin class-name">.</span>  及其右边的字符串：/dir1/dir2/dir3/my.file<span class="token variable">${file<span class="token operator">%%</span>.*}</span>：删掉第一个  <span class="token builtin class-name">.</span>   及其右边的字符串：/dir1/dir2/dir3/my<span class="token string">'#'</span>   是去掉左边（键盘上<span class="token comment">#在 $ 的左边）</span><span class="token string">'%'</span>   是去掉右边（键盘上% 在$ 的右边）单一符号是最小匹配；两个符号是最大匹配       :index:len<span class="token variable">${file<span class="token operator">:</span>0<span class="token operator">:</span>5}</span>：提取位置0开始的5 个字节：/dir1<span class="token variable">${file<span class="token operator">:</span>5<span class="token operator">:</span>5}</span>：提取位置5开始的5个字节：/dir2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="监听内存定时任务"><a href="#监听内存定时任务" class="headerlink" title="监听内存定时任务"></a>监听内存定时任务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#/bin/bash</span><span class="token comment">#free 查询内存</span><span class="token comment">#-m 按MB显示</span><span class="token comment">#|awk管道</span><span class="token comment">#NR=2第二行</span><span class="token comment">#NF最后一列</span><span class="token comment"># 信息保存到FREEMEN</span><span class="token assign-left variable">FREEMEM</span><span class="token operator">=</span>free -m <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'NR==2 {print $NF}'</span><span class="token assign-left variable">CHARS</span><span class="token operator">=</span><span class="token string">"Current memory is <span class="token variable">$FREEMEN</span>"</span><span class="token keyword">if</span> <span class="token variable">$FREEMEN</span> -lt <span class="token string">"100"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token comment">#打印日志到对应的文件</span><span class="token builtin class-name">echo</span> <span class="token variable">$CHARS</span> <span class="token function">tee</span> /home/lgx/script/messages.txt <span class="token comment">#mail发送邮箱 标题               邮箱                   内容</span>mail -s <span class="token string">"data +%F-%T <span class="token variable">$CHARS</span>  144@gq.com &lt; /home/lgx/scrpt/massages.txtecho "</span>内存不足"<span class="token keyword">fi</span><span class="token comment">#之后使用crontab-l添加定时任务</span><span class="token comment">#对应的时间的文件夹下添加对应的sh文件</span><span class="token comment">#例如 使用crontab -e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p><a href="https://www.runoob.com/linux/linux-shell-echo.html">连接</a></p><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -e <span class="token string">"OK! <span class="token entity" title="\c">\c</span>"</span> <span class="token comment"># -e 开启转义 \c 不换行</span><span class="token builtin class-name">echo</span> <span class="token string">"It is a test"</span><span class="token builtin class-name">echo</span> -e <span class="token string">"OK! <span class="token entity" title="\n">\n</span>"</span> <span class="token comment"># -e 开启转义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结果重定向"><a href="#结果重定向" class="headerlink" title="结果重定向"></a>结果重定向</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"It is a test"</span> <span class="token operator">&gt;</span> myfile <span class="token comment"># 覆写</span><span class="token builtin class-name">echo</span> <span class="token string">"I know "</span> <span class="token operator">&gt;&gt;</span> myfile <span class="token comment">#追加内容到文件后面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="shell-输入-x2F-输出重定向"><a href="#shell-输入-x2F-输出重定向" class="headerlink" title="shell 输入/输出重定向"></a>shell 输入/输出重定向</h3><p><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html">Shell 输入/输出重定向</a></p><table><thead><tr><th>command &gt; file</th><th>输出重定向到file</th></tr></thead><tbody><tr><td>command &lt; file</td><td>输入重定向到file</td></tr><tr><td>command &gt;&gt; file</td><td>输出追加到file</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h2><h3 id="apt常用命令"><a href="#apt常用命令" class="headerlink" title="apt常用命令"></a>apt常用命令</h3><p><a href="https://www.runoob.com/linux/linux-comm-apt.html">教程链接</a></p><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><p>查看文件类型和内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 判断文件类型</span><span class="token function">file</span> a.txt<span class="token comment"># 查看整个文件</span><span class="token function">cat</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> a.txt参数-n:给所有行加行号 <span class="token punctuation">(</span>no<span class="token punctuation">)</span>-b:只给有内容的行加行号-T:用^T替换制表符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看文件的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span> -c <span class="token comment"># 统计字节数，或--bytes或——chars：只显示Bytes数；。</span>-l <span class="token comment"># 统计行数，或——lines：只显示列数；。</span>-m <span class="token comment"># 统计字符数。这个标志不能与 -c 标志一起使用。</span>-w <span class="token comment"># 统计字数，或——words：只显示字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。</span>-L <span class="token comment"># 打印最长行的长度。</span><span class="token function">wc</span> test.txt <span class="token comment">#行数字数字节数 文件名</span>只显示文件的行数<span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">wc</span> -l  <span class="token comment"># 不显示文件名</span><span class="token function">wc</span> -l  <span class="token comment"># 显示文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘读取，数组与声明"><a href="#键盘读取，数组与声明" class="headerlink" title="键盘读取，数组与声明"></a>键盘读取，数组与声明</h3><h4 id="读取命令输入（read"><a href="#读取命令输入（read" class="headerlink" title="读取命令输入（read)"></a>读取命令输入（read)</h4><p>zsh和bash的区别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 参数</span><span class="token comment"># -p 提示信息</span><span class="token comment"># -t 倒计时</span><span class="token comment"># zsh和bash的区别</span><span class="token comment">#bash</span><span class="token builtin class-name">read</span> -p <span class="token string">"please input : "</span> -t <span class="token number">30</span> name<span class="token comment">#zsh</span><span class="token builtin class-name">read</span> -t <span class="token number">30</span> <span class="token string">"name?please input : "</span> <span class="token comment">#提示信息在？后面 -t 在前面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="declare命令"><a href="#declare命令" class="headerlink" title="declare命令"></a>declare命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#申明变量类型</span><span class="token comment">#参数</span><span class="token comment"># -a ：array类型</span><span class="token comment"># -i : int类型</span><span class="token comment"># -x : 同expor，环境变量</span><span class="token comment"># -r : readonly类型</span><span class="token comment">#</span>mrl@MrdeMacBook-Pro ~ % <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">199</span>+29mrl@MrdeMacBook-Pro ~ % <span class="token builtin class-name">echo</span> <span class="token variable">${sum}</span><span class="token number">199</span>+29mrl@MrdeMacBook-Pro ~ % <span class="token builtin class-name">declare</span> -i <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">199</span>+20mrl@MrdeMacBook-Pro ~ % <span class="token builtin class-name">echo</span> <span class="token variable">${sum}</span><span class="token number">219</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="复制-cp"><a href="#复制-cp" class="headerlink" title="复制(cp)"></a>复制(cp)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> from to<span class="token comment"># 参数</span>-a：通常在复制目录时候使用，保留文件属性，链接，复制目录下所有内容-d：保留链接，链接指windows的快捷方式-f：强制覆盖-i：询问覆盖-p：复制文件的修改时间和访问权限-r：如果是一个目录，递归复制目录下所有文件-l：不复制文件，只是生成链接文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动（mv"><a href="#移动（mv" class="headerlink" title="移动（mv)"></a>移动（mv)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>from to<span class="token comment">#mv参数</span>-f <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>force<span class="token punctuation">)</span>强制覆盖目标路径，没有询问-i <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>inquire<span class="token punctuation">)</span>询问是否操作-n <span class="token builtin class-name">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>不会覆盖目标路径-v <span class="token builtin class-name">:</span> <span class="token punctuation">(</span>view<span class="token punctuation">)</span>转移后显示文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找-grep"><a href="#查找-grep" class="headerlink" title="查找(grep)"></a>查找(grep)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">``<span class="token variable"><span class="token variable">`</span><span class="token comment">### 监测程序</span><span class="token comment">#### 查看进程（ps）</span><span class="token variable">`</span></span>`<span class="token variable"><span class="token variable">`</span><span class="token function">bash</span>-a <span class="token builtin class-name">:</span> 显示全部进程-f <span class="token builtin class-name">:</span> 显示的信息就是下述的<span class="token variable">`</span></span>信息的查看`里面的信息-u <span class="token builtin class-name">:</span> 显示指定用户进程，如果没指定当前用户的进程-e <span class="token builtin class-name">:</span> 显示全部进程一般用的就是 <span class="token function">ps</span> -ef 来得到全部的进程<span class="token comment"># 可以配合 grep 和 管道 抓取自己想要的进程</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="信息的查看"><a href="#信息的查看" class="headerlink" title="信息的查看"></a>信息的查看</h4><ul><li><p>UID（user id）</p></li><li><p>PID（process id)</p></li><li><p>PPI（parent process id）</p></li><li><p>C（CPU）：CPU利用率</p></li><li><p>STIME（Start time）：进程启动时的系统时间</p></li><li><p>TTY（Teletype）：终端设备</p></li><li><p>TIME（time）：运行进程累计CPU时间</p></li><li><p>CMD（command）：程序名称</p></li><li><p>VIRT（virtual memory usage）:虚拟内存</p></li><li><p>RES（resident memory usage）：常驻内存</p></li><li><p>SHR（shared memory）：共享黑村</p></li></ul><h4 id="实时监测进程（top命令）"><a href="#实时监测进程（top命令）" class="headerlink" title="实时监测进程（top命令）"></a>实时监测进程（top命令）</h4><p><strong>参数</strong></p><ul><li>-d 秒数：指定 top 命令每隔几秒更新。默认是 3 秒；</li><li>-b：使用批处理模式输出。一般和”-n”选项合用，用于把 top 命令重定向到文件中；</li><li>-n 次数：指定 top 命令执行的次数。一般和”-“选项合用；</li><li>-pid: 进程PID：仅查看指定 ID 的进程；</li><li>-s：使 top 命令在安全模式中运行，避免在交互模式中出现错误；</li><li>-u 用户名：只监听某个用户的进程；</li></ul><p><strong>在 top 命令的显示窗口中，还可以使用如下按键，进行一下交互操作：</strong></p><ul><li>? 或 h：显示交互模式的帮助；</li><li>P：按照 CPU 的使用率排序，默认就是此选项；</li><li>M：按照内存的使用率排序；</li><li>N：按照 PID 排序；</li><li>T：按照 CPU 的累积运算时间排序，也就是按照 TIME+ 项排序；</li><li>k：按照 PID 给予某个进程一个信号。一般用于中止某个进程，信号 9 是强制中止的信号；</li><li>r：按照 PID 给某个进程重设优先级（Nice）值；</li><li>q：退出 top 命令；</li></ul><h4 id="结束进程-kill"><a href="#结束进程-kill" class="headerlink" title="结束进程(kill)"></a>结束进程(kill)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关掉 PID 进程</span><span class="token function">kill</span> -9 <span class="token punctuation">[</span>PID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="监测磁盘空间"><a href="#监测磁盘空间" class="headerlink" title="监测磁盘空间"></a>监测磁盘空间</h3><p>挂载存储媒体</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mount 命令 mounting(挂载）</span><span class="token comment"># unmount 命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示挂载设备剩余磁盘空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># df 命令 （disk free）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示文件，目录的磁盘使用情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># du 命令 (disk usage)</span><span class="token function">du</span> -chs ~/blog-c：显示所有列出文件总的大小（count）-h：按照人类易读格式输出，K代替千字节，M代替兆字节，G代替吉字节，<span class="token punctuation">(</span>human<span class="token punctuation">)</span>-s: 显示每个输出参数的总计（sum）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换到root用户</span><span class="token function">sudo</span> -i<span class="token comment">#设置root密码</span><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># useradd [option] username</span>参数 -c <span class="token builtin class-name">:</span> 注释描述-d <span class="token builtin class-name">:</span> 指定用户主目录，如果不存在可以用-m来创建主目录-g <span class="token builtin class-name">:</span> 指定用户所属主用户组-G <span class="token builtin class-name">:</span> 指定用户附属的附加组-s <span class="token builtin class-name">:</span> 指定用户的登录shell<span class="token comment"># 创建一个用户 sam 并且分配 /home/sam 给这个用户</span><span class="token function">useradd</span> -d /home/sam -m /home/sam<span class="token comment"># 创建一个用户 uuuuuu 属于group用户组，同时又属于adm和root组</span><span class="token function">useradd</span> -g group -G adm,root uuuuuu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">userdel</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> username<span class="token comment"># 删除用户账户会将/etc/passwd等系统文件中该用户删除</span><span class="token comment"># 如何需要删除用户的主目录 -r 参数</span><span class="token function">userdel</span> -r username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改用户信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">usermod</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> username参数-c <span class="token builtin class-name">:</span> 注释描述-d <span class="token builtin class-name">:</span> 指定用户主目录，如果不存在可以用-m来创建主目录-g <span class="token builtin class-name">:</span> 指定用户所属主用户组-G <span class="token builtin class-name">:</span> 指定用户附属的附加组-s <span class="token builtin class-name">:</span> 指定用户的登录shell-l <span class="token builtin class-name">:</span> 新用户名添加用户进docker组<span class="token function">usermod</span> -g <span class="token function">docker</span> <span class="token environment constant">$USER</span>systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>密码管理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> username参数-l 锁定口令，即禁用账号。-u 口令解锁。-d 使账号无口令。-f 强迫用户下次登录时修改口令。<span class="token comment"># 如果直接 passwd</span><span class="token comment"># 那么就是修改当前用户的密码</span><span class="token comment"># 如果是root用户</span><span class="token comment"># 可以使用 passwd username 的形式</span><span class="token comment"># 改变任何用户的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> groupname<span class="token comment">#参数：</span>-g :GID 指定新用户组的组标识号（GID）。-o :一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupdel</span> groupname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupmod</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> groupname<span class="token comment">#参数:</span>-g :GID 为用户组指定新的组标识号。-o :与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。-n :新用户组 将用户组的名字改为新名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换用户所在组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换当前用户到docker组</span><span class="token comment"># 前提条件是 docker 组确实是该组的主组或附加组</span>newgrp <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加用户进组或者删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpasswd <span class="token punctuation">[</span>options<span class="token punctuation">]</span> groupname参数-a ： +username 将username加入groupname-d <span class="token builtin class-name">:</span>  +username 将username从groupname中删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户文件的存储</p><ul><li><code>etc/passwd</code></li><li><code>etc/shadow</code></li><li><code>etc/group</code></li></ul><p>下列是<code>etc/passwd</code>文件的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geoclue:x:118:122::/var/lib/geoclue:/usr/sbin/nologinpulse:x:119:123:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologingnome-initial-setup:x:120:65534::/run/gnome-initial-setup/:/bin/falsegdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/falsesshd:x:122:65534::/run/sshd:/usr/sbin/nologinmrl:x:1000:1000:mrl,,,:/home/mrl:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述中每一行记录对应一个用户</p><p>每行记录的格式和含义如下</p><p><code>用户名</code>:<code>口令</code>:<code>用户标识号</code>:<code>组标识号</code>:<code>注释性描述</code>:<code>主目录</code>:<code>登录Shell</code></p><p>口令:</p><p>对于用户的口令由于人人都可以察看所以linux使用了shadow技术</p><p>把真正加密后的的口令存放在<code>etc/shadow</code>文件中</p><p>用户标识号</p><ul><li><p>通常用户标识号的取值范围是0～65535。</p></li><li><p>0是超级用户root的标识号</p></li><li><p>1～99由系统保留，作为管理账号</p></li><li><p>普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p></li></ul><hr><p>伪用户</p><p>伪 用 户 含 义 </p><ul><li>bin :拥有可执行的用户命令文件 </li><li>sys :拥有系统文件 </li><li>adm :拥有帐户文件 </li><li>uucp ：UUCP使用 </li><li>lp ：lp或lpd子系统使用 </li><li>nobody ：NFS使用</li></ul><hr><p>下述是<code>etc/shadow</code>文件的格式</p><p><code>登录名</code>:<code>加密口令</code>:<code>最后一次修改时间</code>:<code>最小时间间隔</code></p><p>:<code>最大时间间隔</code>:<code>警告时间</code>:<code>不活动时间</code>:<code>失效时间</code>:<code>标志</code></p><ul><li>“<code>登录名</code>“:是与/etc/passwd文件中的登录名相一致的用户账号</li><li>“<code>口令</code>“:字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“<code>最后一次修改时间</code>“表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“<code>最小时间间隔</code>“指的是两次修改口令之间所需的最小天数。</li><li>“<code>最大时间间隔</code>“指的是口令保持有效的最大天数。</li><li>“<code>警告时间</code>“字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“<code>不活动时间</code>“表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“<code>失效时间</code>“字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ul><hr><p>下述是<code>etc/group</code>文件的格式显示</p><p><code>组名</code>:<code>口令</code>:<code>组标识号</code>:<code>组内用户列表</code></p><ul><li>“<code>组名</code>“是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>“<code>口令</code>“字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“<code>组标识号</code>“与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“<code>组内用户列表</code>“是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ul><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2022/02/05/java-pian/jdbc/"/>
      <url>/2022/02/05/java-pian/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC-ava-DataBase-Connectivity"><a href="#JDBC-ava-DataBase-Connectivity" class="headerlink" title="JDBC(ava DataBase Connectivity)"></a>JDBC(ava DataBase Connectivity)</h2><h3 id="1-数据的持久化"><a href="#1-数据的持久化" class="headerlink" title="1.数据的持久化"></a>1.数据的持久化</h3><ul><li>持久化：把数据保存到可掉电式存储设备以供使用。数据持久化意味着将内存中的数据保存到硬盘上，而持久化的实现过程大多通过关系数据库来实现</li><li>持久化主要应用就是将内存中的数据存储在关系型数据库中，或硬盘文件，XML文件</li></ul><h3 id="2-JAVA中的数据存储技术"><a href="#2-JAVA中的数据存储技术" class="headerlink" title="2.JAVA中的数据存储技术"></a>2.JAVA中的数据存储技术</h3><ul><li>在Java中，数据库存取技术可分为如下几类<ul><li>JDBC直接访问数据库</li><li>JDO ava Data Object）技术</li><li>第三方O/R工具，如 Hibernate， Mybatis等</li></ul></li><li>JDBC是ava访问数据库的基石，JDO、 Hibernate、 Mybatis等只是更好的封装了JDBC</li></ul><h3 id="3-JDBC介绍"><a href="#3-JDBC介绍" class="headerlink" title="3.JDBC介绍"></a>3.JDBC介绍</h3><ul><li>JDBC（ Java Database Connectivity）是一个独立于特定数据库管理系统、通用的QL数据库存取和操作的公共接口（一组API），定义了用来访问数据库的标ava类库，（java. sql， javax.sqq）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了ー种统一的途径，为开发者屏了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程</li><li>如果没有JDBC，那么ava程序访问数据库时是这样的</li></ul><h3 id="4-JDBC体系结构"><a href="#4-JDBC体系结构" class="headerlink" title="4.JDBC体系结构"></a>4.JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次<ul><li>面向应用的API： Java Apl，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）</li><li>面向数据库的API： Java Driver AP，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。</p><p>​———-面向接口编程</p></blockquote><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><h3 id="1-加载与注册JDBC驱动"><a href="#1-加载与注册JDBC驱动" class="headerlink" title="1.加载与注册JDBC驱动"></a>1.加载与注册JDBC驱动</h3><ul><li><p>导入mysql-connector.jar得到他的Driver</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加载驱动</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-要素1-URL"><a href="#2-要素1-URL" class="headerlink" title="2.要素1:URL"></a>2.要素1:URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理通过和这个URL选择正确的驱动程序，从而建立到数据库连接</p></li><li><p>JDBC URL 的标准由三部分组成，各部分冒号隔开：</p><ul><li>jdbc：子协议：子名称</li><li>协议：JDBC URL中的协议总是jdbc</li><li>子协议：子协议用于标识一个数据库驱动程序</li><li>子名称： 一种表示数据库的方法，子名称可以依不同的子协议而变化，子名称的目的就是为了定位数据库提供足够的信息，包含主机名（对应服务端的ip地址），端口号，数据库名</li></ul></li><li><p>例如</p><ul><li>jdbc:mysql://localhost:3306/test</li><li>jdbc:主协议</li><li>mysql:子协议</li><li>localhost:3306:子名称</li><li>test: 数据库名</li></ul></li></ul><h3 id="3-要素2-user和password"><a href="#3-要素2-user和password" class="headerlink" title="3.要素2:user和password"></a>3.要素2:user和password</h3><ul><li>指明你的数据库的user和password</li></ul><h3 id="4-Driver接口实现类连接数据库"><a href="#4-Driver接口实现类连接数据库" class="headerlink" title="4.Driver接口实现类连接数据库"></a>4.Driver接口实现类连接数据库</h3><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>Jdbc程序中的Connection，它用于代表数据库的链接，Collection是数据库编程中最重要的一个对象，客户端与数据库所有交互都是通过connection对象完成的，创建方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法一</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>        <span class="token comment">//info 保存用户名和密码</span>        <span class="token class-name">Properties</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"Ll1442828431"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//方法二</span><span class="token comment">//对方式1的优化</span><span class="token comment">//1.使连接具有普适性通过反射，程序中不存在第三方那个的api</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token comment">//获取Driver实现对象，使用反射</span>        <span class="token class-name">Class</span> name <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"Ll1442828431"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//方式3</span><span class="token comment">//对方式2的优化</span><span class="token comment">//1.用DriverManager来替换Driver来操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"Ll1442828431"</span><span class="token punctuation">;</span>        <span class="token comment">//反射获取Driver类的对象</span>        <span class="token class-name">Class</span> name <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册驱动 ，注释掉这个代码，MySQL也会自己注册，因为在Driver类中存在这个静态代码块--&gt;在50行</span>        <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//Driver的静态代码块 自己注册驱动</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//方式4 </span><span class="token comment">// 对方式3 的优化</span><span class="token comment">// 1.实现数据与代码的分离</span>    <span class="token comment">//将数据库连接需要的4个基本信息声明的配置文件中，通过读取配置文件来获取连接</span>    <span class="token comment">//jdbc.properties</span>    <span class="token comment">//user</span>    <span class="token comment">//password,</span>    <span class="token comment">// url,</span>    <span class="token comment">// driver</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectTest4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token comment">//读取配置文件的信息，用类的加载器</span>        <span class="token comment">//放src下就直接文件名，相对路径</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ConnetionTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user <span class="token operator">=</span>pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span>pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driverClass <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射获取Driver对象</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Driver</span> driver <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span>c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用PreparedStatement实现CRUD操作"><a href="#使用PreparedStatement实现CRUD操作" class="headerlink" title="使用PreparedStatement实现CRUD操作"></a>使用PreparedStatement实现CRUD操作</h2><ul><li>PreparedStatement </li><li>An object that represents a precomplied SQL statement</li></ul><h3 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h3><ul><li><p>使用<code>Statement</code>来实现数据库操作存在SQL注入问题</p></li><li><p>SQL注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令如</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- user = '1' or 'AND-- password = '=1 or '1'='1'SELECT user， password FROM user_table WHERE user=[] AND password =[]-- 就会变成如下SELECT user， password FROM user_table WHERE user= '1' or ' AND password = '=1 or '1' = '1'-- 通过最后一个or  '1'='1' 就必然会为true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>从而利用系统的SQL引擎完成恶意行为的做法。</p></li><li><p>对于java而言，防范SQL注入，用PerparedStatement（从Statement扩展而来）替代Statement</p></li></ul><h3 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h3><h4 id="PrepareStatement概述"><a href="#PrepareStatement概述" class="headerlink" title="PrepareStatement概述"></a>PrepareStatement概述</h4><p>因为PreparedStatement 采用的是占位符进行填充，所以就避免了Statement遇到的sql注入问题</p><p><img src="/2022/02/05/java-pian/jdbc/image-20220207143010362.png" alt="image-20220207143010362"></p><h4 id="连接操作模块化（JdbcUtilis工具类）"><a href="#连接操作模块化（JdbcUtilis工具类）" class="headerlink" title="连接操作模块化（JdbcUtilis工具类）"></a>连接操作模块化（JdbcUtilis工具类）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ConnectionResetException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName JDBCUtils * @Author mrl * @Date 2022/2/7 15:23 * @Version 1.6 * @Description 实现数据库连接 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token comment">//读取配置文件</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取反射</span>            <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *     * @Author mrl     * @Date 2022/2/7 15:23     * @Version 1.6     * @Description 实现连接资源的关闭     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResources</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResources</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span>                                      <span class="token class-name">Connection</span> connection<span class="token punctuation">,</span><span class="token class-name">ResultSet</span> query<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                query<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   *   * @Author mrl   * @Date 2022/2/7 14:32   * @Version 1.6   * @Description 实现数据库增，删,改操作   **/</span>  <span class="token comment">//JDK1.5新增语法 动态参数 Object ...args</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">Connection</span> connection <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment">//Driver驱动连接数据库</span>          connection <span class="token operator">=</span><span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//用prepareStatement对数据库管理</span>          ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置占位符</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">//执行操作</span>          ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>          throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">closeResources</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/**     * @Author mrl     * @Date 2022/2/7 16:41     * @Version 1.6     * @Description 针对不同表的通用查询 ：泛型+反射+数组     **/</span> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">commandQueryTest</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//填充占位符</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//获取查询集合</span>            resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//查询的字段  "select id,name,email,birth from `customers` where id= "</span>            <span class="token comment">//id ,name,email,birth 决定了数据库的查询</span>            <span class="token comment">//获取结果集的元数据</span>            <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//得到列数</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//处理一行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">T</span> t<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//处理每一列</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Object</span> columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//获取CustomerDao类的属性为columnName</span>                    <span class="token class-name">Field</span> field <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//可能是私有属性，打开访问</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将customerDao这个对象的field设置columnValue属性</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//关闭资源</span>            <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">closeResources</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取对应的列字段名"><a href="#获取对应的列字段名" class="headerlink" title="获取对应的列字段名"></a>获取对应的列字段名</h4><ul><li><p>getColumnName(Name)和getColumnLabel(Name)区别</p><ul><li><p>getColumnName 获取的是数据库中的列字段名</p><p>  getColumnLabel 获取的是数据库中的列字段名的别名（如果设置了别名，没有设置还是数据库中的列字段名）</p></li></ul></li></ul><h3 id="Java与SQL对应数据类型转换表"><a href="#Java与SQL对应数据类型转换表" class="headerlink" title="Java与SQL对应数据类型转换表"></a>Java与SQL对应数据类型转换表</h3><ul><li>一般一个SQL的表对应一个类</li><li>表中的一条记录对应Java类的一个对象</li><li>表中的一个字段对应Java类的一个属性</li></ul><p><img src="/2022/02/05/java-pian/jdbc/image-20220207170116452.png" alt="image-20220207170116452"></p><h3 id="过程的问题"><a href="#过程的问题" class="headerlink" title="过程的问题"></a>过程的问题</h3><h4 id="1-关闭数据库的实现出现异常信息"><a href="#1-关闭数据库的实现出现异常信息" class="headerlink" title="1.关闭数据库的实现出现异常信息"></a>1.关闭数据库的实现出现异常信息</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>其原因是mysql在高版本中需要指明是否进行SSL连接。</p><p>使用SSL协议目的是：</p><ol><li>认证用户服务器，确保数据发送到正确的服务器；</li><li>加密数据，防止数据传输途中被窃取使用；</li><li>维护数据完整性，验证数据在传输过程中是否丢失。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">** BEGIN NESTED EXCEPTION ** javax.net.ssl.SSLExceptionMESSAGE: closing inbound before receiving peer<span class="token string">'s close_notifySTACKTRACE:javax.net.ssl.SSLException: closing inbound before receiving peer'</span>s close_notifyat sun.security.ssl.SSLSocketImpl.shutdownInput<span class="token punctuation">(</span>SSLSocketImpl.java:735<span class="token punctuation">)</span>at sun.security.ssl.SSLSocketImpl.shutdownInput<span class="token punctuation">(</span>SSLSocketImpl.java:714<span class="token punctuation">)</span>at com.mysql.cj.protocol.a.NativeProtocol.quit<span class="token punctuation">(</span>NativeProtocol.java:1284<span class="token punctuation">)</span>at com.mysql.cj.NativeSession.quit<span class="token punctuation">(</span>NativeSession.java:182<span class="token punctuation">)</span>at com.mysql.cj.jdbc.ConnectionImpl.realClose<span class="token punctuation">(</span>ConnectionImpl.java:1911<span class="token punctuation">)</span>at com.mysql.cj.jdbc.ConnectionImpl.close<span class="token punctuation">(</span>ConnectionImpl.java:730<span class="token punctuation">)</span>at demo2.PrepareStatementTest.insertTest<span class="token punctuation">(</span>PrepareStatementTest.java:74<span class="token punctuation">)</span>at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span>at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:498<span class="token punctuation">)</span>at org.junit.platform.commons.util.ReflectionUtils.invokeMethod<span class="token punctuation">(</span>ReflectionUtils.java:688<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.MethodInvocation.proceed<span class="token punctuation">(</span>MethodInvocation.java:60<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.InvocationInterceptorChain<span class="token variable">$ValidatingInvocation</span>.proceed<span class="token punctuation">(</span>InvocationInterceptorChain.java:131<span class="token punctuation">)</span>at org.junit.jupiter.engine.extension.TimeoutExtension.intercept<span class="token punctuation">(</span>TimeoutExtension.java:149<span class="token punctuation">)</span>at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod<span class="token punctuation">(</span>TimeoutExtension.java:140<span class="token punctuation">)</span>at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod<span class="token punctuation">(</span>TimeoutExtension.java:84<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.ExecutableInvoker<span class="token variable">$ReflectiveInterceptorCall</span>.lambda<span class="token variable">$ofVoidMethod</span><span class="token variable">$0</span><span class="token punctuation">(</span>ExecutableInvoker.java:115<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda<span class="token variable">$invoke</span><span class="token variable">$0</span><span class="token punctuation">(</span>ExecutableInvoker.java:105<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.InvocationInterceptorChain<span class="token variable">$InterceptedInvocation</span>.proceed<span class="token punctuation">(</span>InvocationInterceptorChain.java:106<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed<span class="token punctuation">(</span>InvocationInterceptorChain.java:64<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke<span class="token punctuation">(</span>InvocationInterceptorChain.java:45<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke<span class="token punctuation">(</span>InvocationInterceptorChain.java:37<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke<span class="token punctuation">(</span>ExecutableInvoker.java:104<span class="token punctuation">)</span>at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke<span class="token punctuation">(</span>ExecutableInvoker.java:98<span class="token punctuation">)</span>at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda<span class="token variable">$invokeTestMethod</span><span class="token variable">$6</span><span class="token punctuation">(</span>TestMethodTestDescriptor.java:210<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod<span class="token punctuation">(</span>TestMethodTestDescriptor.java:206<span class="token punctuation">)</span>at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute<span class="token punctuation">(</span>TestMethodTestDescriptor.java:131<span class="token punctuation">)</span>at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute<span class="token punctuation">(</span>TestMethodTestDescriptor.java:65<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$5</span><span class="token punctuation">(</span>NodeTestTask.java:139<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$7</span><span class="token punctuation">(</span>NodeTestTask.java:129<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.Node.around<span class="token punctuation">(</span>Node.java:137<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$8</span><span class="token punctuation">(</span>NodeTestTask.java:127<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively<span class="token punctuation">(</span>NodeTestTask.java:126<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute<span class="token punctuation">(</span>NodeTestTask.java:84<span class="token punctuation">)</span>at java.util.ArrayList.forEach<span class="token punctuation">(</span>ArrayList.java:1259<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll<span class="token punctuation">(</span>SameThreadHierarchicalTestExecutorService.java:38<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$5</span><span class="token punctuation">(</span>NodeTestTask.java:143<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$7</span><span class="token punctuation">(</span>NodeTestTask.java:129<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.Node.around<span class="token punctuation">(</span>Node.java:137<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$8</span><span class="token punctuation">(</span>NodeTestTask.java:127<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively<span class="token punctuation">(</span>NodeTestTask.java:126<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute<span class="token punctuation">(</span>NodeTestTask.java:84<span class="token punctuation">)</span>at java.util.ArrayList.forEach<span class="token punctuation">(</span>ArrayList.java:1259<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll<span class="token punctuation">(</span>SameThreadHierarchicalTestExecutorService.java:38<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$5</span><span class="token punctuation">(</span>NodeTestTask.java:143<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$7</span><span class="token punctuation">(</span>NodeTestTask.java:129<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.Node.around<span class="token punctuation">(</span>Node.java:137<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda<span class="token variable">$executeRecursively</span><span class="token variable">$8</span><span class="token punctuation">(</span>NodeTestTask.java:127<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute<span class="token punctuation">(</span>ThrowableCollector.java:73<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively<span class="token punctuation">(</span>NodeTestTask.java:126<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute<span class="token punctuation">(</span>NodeTestTask.java:84<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit<span class="token punctuation">(</span>SameThreadHierarchicalTestExecutorService.java:32<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute<span class="token punctuation">(</span>HierarchicalTestExecutor.java:57<span class="token punctuation">)</span>at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute<span class="token punctuation">(</span>HierarchicalTestEngine.java:51<span class="token punctuation">)</span>at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute<span class="token punctuation">(</span>EngineExecutionOrchestrator.java:108<span class="token punctuation">)</span>at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute<span class="token punctuation">(</span>EngineExecutionOrchestrator.java:88<span class="token punctuation">)</span>at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda<span class="token variable">$execute</span><span class="token variable">$0</span><span class="token punctuation">(</span>EngineExecutionOrchestrator.java:54<span class="token punctuation">)</span>at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams<span class="token punctuation">(</span>EngineExecutionOrchestrator.java:67<span class="token punctuation">)</span>at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute<span class="token punctuation">(</span>EngineExecutionOrchestrator.java:52<span class="token punctuation">)</span>at org.junit.platform.launcher.core.DefaultLauncher.execute<span class="token punctuation">(</span>DefaultLauncher.java:96<span class="token punctuation">)</span>at org.junit.platform.launcher.core.DefaultLauncher.execute<span class="token punctuation">(</span>DefaultLauncher.java:75<span class="token punctuation">)</span>at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs<span class="token punctuation">(</span>JUnit5IdeaTestRunner.java:71<span class="token punctuation">)</span>at com.intellij.rt.junit.IdeaTestRunner<span class="token variable">$Repeater</span>.startRunnerWithArgs<span class="token punctuation">(</span>IdeaTestRunner.java:33<span class="token punctuation">)</span>at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart<span class="token punctuation">(</span>JUnitStarter.java:221<span class="token punctuation">)</span>at com.intellij.rt.junit.JUnitStarter.main<span class="token punctuation">(</span>JUnitStarter.java:54<span class="token punctuation">)</span>** END NESTED EXCEPTION **<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>在连接的url加上 <code>serverTimezone=GMT%2B8&amp;useSSL=false</code></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useSSL=false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="操作BLOB类型字段"><a href="#操作BLOB类型字段" class="headerlink" title="操作BLOB类型字段"></a>操作BLOB类型字段</h2><ul><li><p>BLOB（二进制的大文件，视频，图片类）</p></li><li><p>Mysql中BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同的数据</p></li><li><p>插入BLOB类型的数据必须用PrepareStatement，因为BLOB类型的数据无法使用字符串拼接</p></li></ul><table><thead><tr><th align="center">类型</th><th align="center">大小</th></tr></thead><tbody><tr><td align="center">TinyBlob</td><td align="center">最大255</td></tr><tr><td align="center">Blob</td><td align="center">最大65k</td></tr><tr><td align="center">MediumBlob</td><td align="center">最大16M</td></tr><tr><td align="center">LongBlob</td><td align="center">最大4G</td></tr></tbody></table><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blb类型以后，还报错： xxx too large，那么在mysq的安装目录下，找myi文件加上如下的配置参数： max allowed_packet=16M。同时注意：修改了myin文件之后，需要重新启动mysq服务</li></ul><h2 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h2><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务*"></a>数据库事务*</h2><h2 id="DAO及其实现类"><a href="#DAO及其实现类" class="headerlink" title="DAO及其实现类"></a>DAO及其实现类</h2><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池*"></a>数据库连接池*</h2><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><p>以Studen表为例</p><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">接口StudentDao-&gt;BaseDao:提供对数据库操作的方法接口StudentImpl -&gt; BaseDao: extends BaseDao 获取具体的操作方法StudentImpl -&gt;接口StudentDao:implements StudentDao 实现方法接口的具体操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1275.最大数</title>
      <link href="/2022/02/04/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/1275.zui-da-shu/"/>
      <url>/2022/02/04/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/1275.zui-da-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-27 04:46:50 * @LastEditTime: 2022-02-04 17:47:39 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1277/    1275. 最大数    题目描述        如果该行的内容是 Q L，则表示这个操作是询问序列中最后 L 个数的最大数是多少；        如果是 A t，则表示向序列后面加一个数，加入的数是 (t+a) mod p。其中，t 是输入的参数，a 是在这个添加操作之前最后一个询问操作的答案（如果之前没有询问操作，则 a=0）。    Tag:        1.线段树    思路：        用线段树维护区间最大值        线段树一般操作        1.build        2.update        3.modify        4.query*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span> tr<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> tr<span class="token punctuation">[</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">&gt;=</span>l<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>        v <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>        v <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">==</span>index<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">==</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">+</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">modify</span><span class="token punctuation">(</span>u <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">update</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    string opt<span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span>  last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l<span class="token punctuation">;</span>            last <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> last <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> t<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>            <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>t <span class="token operator">+</span> last<span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/02/04/web/ajax/"/>
      <url>/2022/02/04/web/ajax/</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h2><ul><li><p>AJAX ：Asynchronous javaScript and XML (异步的javaScript 和XML)</p></li><li><p>AJAX是一种无需重新加载整个网页的情况下，能够更新部分网页的技术</p></li><li><p>AJAX是一种用于创建更好更快以及交互性更强的Web应用程序的技术</p></li><li><p>作用</p><ul><li>传统网页想要更新内容，需要重新加载整个网页，用AJAX就可以实现少量的数据交换，实现异步局部更新</li></ul></li><li><p>AJAX的核心是XMLHttpRequest对象（XHR）。XHR为向服务器发送请求和解析服务器响应提供了接口，能够以异步方式从服务器获取新数据</p></li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>可以不需要刷新整个页面跟服务器进行通信</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题</li><li>SEO（search Engine Optimization）不友好 – 懒加载</li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2022/02/04/java-pian/javaweb/"/>
      <url>/2022/02/04/java-pian/javaweb/</url>
      
        <content type="html"><![CDATA[<h2 id="javaWeb教程网站"><a href="#javaWeb教程网站" class="headerlink" title="javaWeb教程网站"></a>javaWeb教程网站</h2><p><a href="https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/">javaWeb教程</a></p><h2 id="BS和CS"><a href="#BS和CS" class="headerlink" title="BS和CS"></a>BS和CS</h2><h3 id="CS（client-server）"><a href="#CS（client-server）" class="headerlink" title="CS（client server）"></a>CS（client server）</h3><p>客户端服务器架构模式</p><ul><li>优点<ul><li>充分利用客户端机器的资源，减轻服务器的负荷（一部分安全要求不高的计算任务存储在客户端进行名，不需要把所有的计算和存储都在服务器端执行，从而减轻服务器的压力，减轻网络负荷）</li></ul></li><li>缺点<ul><li>需要安装</li><li>升级维护成本高</li></ul></li></ul><h3 id="BS（browser-server）"><a href="#BS（browser-server）" class="headerlink" title="BS（browser server）"></a>BS（browser server）</h3><p>浏览器服务器架构模式</p><ul><li>优点<ul><li>客户端不需要安装，维护成本较低</li></ul></li><li>缺点<ul><li>所有的计算和存储任务都是放在服务器端，服务器的负荷较重，在服务器端计算完成之后把结果在传输给客户端，因此客户端和服务器端会进行非常频繁的数据通信，从而网络负荷重</li></ul></li></ul><h2 id="Tomcat-WebContainer"><a href="#Tomcat-WebContainer" class="headerlink" title="Tomcat(WebContainer)"></a>Tomcat(WebContainer)</h2><h3 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h3><ul><li>bin (可执行文件目录)</li><li>conf (配置文件目录)</li><li>lib (存放资源的目录)</li><li>logs (日志文件目录)</li><li>webapps（项目部署的目录）</li><li>work （工作目录）</li><li>temp (临时目录)</li></ul><h3 id="IDEA设置config"><a href="#IDEA设置config" class="headerlink" title="IDEA设置config"></a>IDEA设置config</h3><h4 id="设置目录"><a href="#设置目录" class="headerlink" title="设置目录"></a>设置目录</h4><ul><li>Application server:选择你的Tomcat的目录</li></ul><p><img src="/2022/02/04/java-pian/javaweb/image-20220212151413314.png" alt="image-20220212151413314"></p><h4 id="导入Servlet-jar包"><a href="#导入Servlet-jar包" class="headerlink" title="导入Servlet jar包"></a>导入Servlet jar包</h4><p>需要用到Servlet jar包，而Tomcat里面就已经有了这个包所以直接把下载的Tomcat里面的jar包导入进来就可以用Servlet</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220222141821840.png" alt="image-20220222141821840"></p><h4 id="设置Deployment"><a href="#设置Deployment" class="headerlink" title="设置Deployment"></a>设置Deployment</h4><p>添加你的项目到Artifacts （注意如果要导入jar包，要在problems那里更新）</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220222141056511.png" alt="image-20220222141056511"></p><p>然后再在Tomcat加入你当前的项目modules</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220212152941711.png" alt="image-20220212152941711"></p><p>配置路径</p><p>​<img src="/2022/02/04/java-pian/javaweb/image-20220212152959492.png" alt="image-20220212152959492"></p><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//tomcat8之前设置编码</span><span class="token comment">//1.get方式</span>string name <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tomcat默认</span>name <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.post 方式</span>    <span class="token comment">//获取参数之前 </span>    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//tomcat8之后只需要针对post方式编码</span><span class="token comment">//post方式</span>request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="idea创建Web-Application"><a href="#idea创建Web-Application" class="headerlink" title="idea创建Web Application"></a>idea创建Web Application</h3><p><img src="/2022/02/04/java-pian/javaweb/image-20220212151143049.png" alt="image-20220212151143049"></p><h3 id="web-xml工作"><a href="#web-xml工作" class="headerlink" title="web.xml工作"></a>web.xml工作</h3><ol><li>用户发请求 action = add</li><li>项目中 web.xml中 <code>&lt;servlet-mapping&gt;</code>找到<code>url-pattern</code> =/add</li><li>在同一个<code>&lt;servlet-mapping&gt;</code>中找到<code>servlet-name</code></li><li>找到<code>&lt;servlet&gt;</code>中找到跟<code>&lt;servlet-mapping&gt;</code>中<code>servlet-name</code>一致的<code>servlet-name</code></li><li>找到<code>&lt;servlet&gt;</code>中<code>&lt;servlet-class&gt;</code></li><li>用户发送post 请求 Tomcat调用 servlet-&gt;class.doPost()方法；</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>web<span class="token operator">-</span>app xmlns<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee"</span>         xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>         version<span class="token operator">=</span><span class="token string">"4.0"</span><span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>servlets<span class="token punctuation">.</span></span>AddServlets</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span>add<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>web<span class="token operator">-</span>app<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Servlet从3-0版本开始支持注解方式的注册"><a href="#Servlet从3-0版本开始支持注解方式的注册" class="headerlink" title="Servlet从3.0版本开始支持注解方式的注册"></a>Servlet从3.0版本开始支持注解方式的注册</h3><p>可以用注解的方式替代在web.xml里面写</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220222140836069.png" alt="image-20220222140836069"></p><h3 id="ServletConfig配置"><a href="#ServletConfig配置" class="headerlink" title="ServletConfig配置"></a>ServletConfig配置</h3><ul><li><p>Servlet的配置文件都封装在一个ServletConfig对象里面</p></li><li><p>需要对应到实际的类中</p></li></ul><p>下面两个方法从作用上来看是等价的,并且对于一个类只需要选用一种即可。</p><h4 id="在web-xml文件添加初始配置中"><a href="#在web-xml文件添加初始配置中" class="headerlink" title="在web.xml文件添加初始配置中"></a>在web.xml文件添加初始配置中</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>servlet<span class="token punctuation">&gt;</span></span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span></span>Servlet<span class="token punctuation">.</span>StudentController</span><span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>        <span class="token comment">//配置初始化</span>        <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span>utf8<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span>add<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在注解添加初始配置中"><a href="#在注解添加初始配置中" class="headerlink" title="在注解添加初始配置中"></a>在注解添加初始配置中</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"*.do"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//配置文件    </span>        initParams<span class="token operator">=</span><span class="token punctuation">{</span>                        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"encoding"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletConfig</span> config <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><h4 id="ServletContext概述"><a href="#ServletContext概述" class="headerlink" title="ServletContext概述"></a>ServletContext概述</h4><p>一个web应用都会创建一个ServletContext对象，代表当前Web应用</p><ul><li>域对象<ul><li>一个Web应用中的所有Servlet共享同一个ServletContext对象</li><li>因此ServletContext对象的域属性被Web应用的所有servlet访问</li></ul></li><li>作用范围<ul><li>整个web应用程序范围内共享数据</li></ul></li><li>生命周期<ul><li>web应用加载后创建出ServletContext对象后，域产生，当web应用关闭时销毁</li></ul></li></ul><p><strong>所以对于配置文件可以放在ServletContext中来传递</strong></p><h4 id="在web-xml文件添加初始配置参数"><a href="#在web-xml文件添加初始配置参数" class="headerlink" title="在web.xml文件添加初始配置参数"></a>在web.xml文件添加初始配置参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span> company <span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span> <span class="token class-name">Apple</span> <span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span>    <span class="token comment">//多个context-param是并列关系</span><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span> company <span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span> XM <span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用初始化配置参数-InitParameter"><a href="#调用初始化配置参数-InitParameter" class="headerlink" title="调用初始化配置参数(InitParameter)"></a>调用初始化配置参数(InitParameter)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> context <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取初始化参数值</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>域属性:<strong>Attribute</strong></p><table><thead><tr><th align="center"></th><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">Enumeration</td><td align="center"></td><td></td></tr><tr><td align="center">void</td><td align="center">setAttribute(String name )</td><td></td></tr><tr><td align="center">Object</td><td align="center">getAttribute(String name)</td><td></td></tr><tr><td align="center">void</td><td align="center">removeAtrribute(String name )</td><td></td></tr></tbody></table><h4 id="ServletContext实现读取Web应用下的资源文件"><a href="#ServletContext实现读取Web应用下的资源文件" class="headerlink" title="ServletContext实现读取Web应用下的资源文件"></a>ServletContext实现读取Web应用下的资源文件</h4><p>name.properties</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// /WEB-INF/name.properties 内容如下</span>company<span class="token operator">=</span>apple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="getResourceAsStream（“path”）方法读取"><a href="#getResourceAsStream（“path”）方法读取" class="headerlink" title="getResourceAsStream（“path”）方法读取"></a>getResourceAsStream（“path”）方法读取</h5><p><strong>家目录为web</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inputStream is <span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/name.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="getRealPath（“path”）方法"><a href="#getRealPath（“path”）方法" class="headerlink" title="getRealPath（“path”）方法"></a>getRealPath（“path”）方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServletContext</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> realPath context<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/name.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置文件</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HttpServletResponse应用"><a href="#HttpServletResponse应用" class="headerlink" title="HttpServletResponse应用"></a>HttpServletResponse应用</h3><h4 id="中文输出乱码问题"><a href="#中文输出乱码问题" class="headerlink" title="中文输出乱码问题"></a>中文输出乱码问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法一</span>    <span class="token comment">//设置编码</span>response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置浏览器解码方式</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法二</span>response<span class="token punctuation">.</span><span class="token function">setContecntType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现网页定时刷新并跳转"><a href="#实现网页定时刷新并跳转" class="headerlink" title="实现网页定时刷新并跳转"></a>实现网页定时刷新并跳转</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// URL 要全大写 这样跳转的是www.baidu.com</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Refresh"</span><span class="token punctuation">,</span><span class="token string">"2;URL=www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这样跳转的是WEB-INF目录下的index.html</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Refresh"</span><span class="token punctuation">,</span><span class="token string">"2;url=index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务器内部转发以及客户端重定向"><a href="#服务器内部转发以及客户端重定向" class="headerlink" title="服务器内部转发以及客户端重定向"></a>服务器内部转发以及客户端重定向</h3><h4 id="服务器内部请求转发"><a href="#服务器内部请求转发" class="headerlink" title="服务器内部请求转发"></a>服务器内部请求转发</h4><ul><li>服务器内部转发：<code>request.getRequestDispatcher("url-pattern").forward(request,response)</code></li><li>客户端向服务器请求一次，服务器进行内部转发，客户端是不知道的</li><li>地址栏没有变化</li></ul><h4 id="客户端重定向"><a href="#客户端重定向" class="headerlink" title="客户端重定向"></a>客户端重定向</h4><ul><li>客户端重定向：<code>response.sendRedirect("url-pattern")</code></li><li>客户端向服务器请求，然后服务器会响应给客户端一个重定向的url，客户端再次向这个url发送请求</li><li>地址栏有变化，客户端是知道自己请求url的变化</li><li>所以这是两次请求过程</li></ul><h3 id="ServletContext保存作用域"><a href="#ServletContext保存作用域" class="headerlink" title="ServletContext保存作用域"></a>ServletContext保存作用域</h3><p>Servlet可以保存作用域采用的是<code>[k,v]</code></p><p>可以从当前的保存作用域通过指定的k获取对应的v</p><ul><li>作用域跟SessionId绑定</li></ul><p>常用API</p><ul><li>void HttpSession.setAttribute(“key”,value)</li><li>Object HttpSession.getAttribute(“key”)</li></ul><h4 id="page级别（页面级别）"><a href="#page级别（页面级别）" class="headerlink" title="page级别（页面级别）"></a>page级别（页面级别）</h4><h4 id="request级别（一次请求范围）"><a href="#request级别（一次请求范围）" class="headerlink" title="request级别（一次请求范围）"></a>request级别（一次请求范围）</h4><ul><li><p><code>request.setAttribute(k,v);</code></p></li><li><p>对于服务器内部转发,仍然属于一次请求，所以session作用域依旧有效</p></li><li><p>但是对于客户端重定向，因为是第二次请求，所以上一次请求的session作用域在这一次请求里面无法进行获取</p></li></ul><h4 id="session级别（一次会话范围）"><a href="#session级别（一次会话范围）" class="headerlink" title="session级别（一次会话范围）"></a>session级别（一次会话范围）</h4><ul><li><code>request.getSession().setAttribute(k,v);</code></li><li>换个浏览器（客户端），那么就无法访问之前浏览器的session作用域里面k,v</li></ul><h4 id="application级别（整个应用程序范围）"><a href="#application级别（整个应用程序范围）" class="headerlink" title="application级别（整个应用程序范围）"></a>application级别（整个应用程序范围）</h4><ul><li><p><code>ServletContext application = request.getServletContext();</code></p></li><li><p><code>application.SetAttribute(k,v);</code></p></li><li><p>在这里就是Tomcat，Tomcat结束代表应用程序的关闭，session域清空</p></li><li><p>换个浏览器（客户端），仍然可以访问之前浏览器的session作用域里面的k,v</p></li></ul><h3 id="Servlet继承关系"><a href="#Servlet继承关系" class="headerlink" title="Servlet继承关系"></a>Servlet继承关系</h3><ul><li>javax.servlet.Servlet 接口<ul><li>javax.servlet.GenericServlet 抽象类<ul><li>javax.servlet.http.HttpServlet 抽象子类</li></ul></li></ul></li></ul><h3 id="Servlet-相关方法"><a href="#Servlet-相关方法" class="headerlink" title="Servlet 相关方法"></a>Servlet 相关方法</h3><ul><li><p>javax.servlet.Servlet:</p><ul><li>void init(config)</li><li>void service(request,response)–抽象</li><li>void destory()</li></ul></li><li><p>javax.servlet.GenericServlet</p><ul><li>void service(request,response)–抽象</li></ul></li><li><p>javax.servlet.http.HttpServlet</p><ul><li>void service(request,response) -不是抽象的</li><li>String method =request.getMethod();</li><li>子类复写请求方式方法，各种if判断，根据请求方式不同，去调用不同方法</li><li>如果没有这个请求方式方法，就会去调用父类的这个请求方式方法，父类的方法就会报405错误</li></ul></li></ul><h3 id="Servlet声明周期"><a href="#Servlet声明周期" class="headerlink" title="Servlet声明周期"></a>Servlet声明周期</h3><ul><li><p><code>init()</code></p></li><li><p><code>service()</code></p></li><li><p><code>destroy()</code></p></li><li><p>默认情况下</p><ul><li>第一次接收请求，Servlet会进行实例化（调用构造方法）,<code>init()</code> , <code>service()</code>,从第二次请求开始每一次都是service.</li><li>当容器关闭时，其中所有的<code>servlet</code>实例会被销毁，调用<code>destroy()</code></li></ul></li><li><p>Servlet实例tomcat只会创建一个，所有的请求都是这个实例去响应，tomcat通过反射来创建</p></li><li><p>默认情况下，第一次请求时，tomcat才会去实例化，初始化然后服务</p><ul><li>好处：提高系统的启动速度</li><li>缺点：降低了客户的响应速度</li></ul></li><li><p>可以设置Servlet的初始化时候</p><ul><li>通过在web.xml中设置<load-on-startup>设置servlet启动的先后顺序，数字越小，启动越靠前。</load-on-startup></li></ul></li><li><p>Servlet在容器中是:单例</p></li><li><p>单例：所有的请求都是同一个实例去响应</p></li><li><p>线程不安全：</p><ul><li>servlet线程不安全，尽量不要在servlet中定义成员变量</li></ul></li></ul><h3 id="HttpSession会话跟踪"><a href="#HttpSession会话跟踪" class="headerlink" title="HttpSession会话跟踪"></a>HttpSession会话跟踪</h3><ul><li>客户端第一次发请求给服务器，服务器会去获取你的session，如果没有那么就会创建新的响应给客户端</li><li>下次客户端再来发送请求给服务器就会有sessionID,服务器就可以做出相应的判断</li></ul><p>常用的API</p><ul><li><strong>HttpServletrequest.getSession()</strong>  ：获取当前的会话，如果没有就创建一个会话</li><li><strong>HttpServletrequest.getSession(true)</strong> ： 效果和不带参数一样</li><li><strong>HttpServletrequest.getSession(false)</strong> ：获取当前的会话，如果没有返回null，不会创建新的会话</li><li></li><li><strong>Httpsession.getId()</strong> ： 获取sessionId</li><li><strong>Httpsession.isNew()</strong> : 判断当前session是否为新的</li><li><strong>Httpsession.getMaxInactiveInterval()</strong> : session的非间隔时长，默认1800秒</li><li><strong>session.invalidate()</strong> : 取消会话</li></ul><h3 id="Servlet-路径"><a href="#Servlet-路径" class="headerlink" title="Servlet-路径"></a>Servlet-路径</h3><p>对于<strong>html</strong>查找css文件的路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    相对路径--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../cssFiles/main.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    绝对路径--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:63342/JAVAWEB/ThymeleafTest/web/cssFiles/main.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>绝对路径的端口号和文件路径根据实际情况修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MVC（Model-View-Controller）"><a href="#MVC（Model-View-Controller）" class="headerlink" title="MVC（Model View Controller）"></a>MVC（Model View Controller）</h2><h3 id="MVC结构"><a href="#MVC结构" class="headerlink" title="MVC结构"></a>MVC结构</h3><ul><li>view<ul><li>用于做数据展示以及用户交互的一个界面</li></ul></li><li>controller<ul><li>接收客户端的请求，具体的业务功能还需要借助于组件来完成</li></ul></li><li>model<ul><li>模型分为很多种例如<ol><li>POJO/VO(value object) : 值对象</li><li>DAO（data access object） ： 数据访问对象</li><li>BO/（business object）： 业务对象</li></ol></li></ul></li></ul><h3 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h3><p><img src="/2022/02/04/java-pian/javaweb/image-20220330202432900.png" alt="image-20220330202432900"></p><h3 id="（Server）业务对象和（DAO）数据访问对象"><a href="#（Server）业务对象和（DAO）数据访问对象" class="headerlink" title="（Server）业务对象和（DAO）数据访问对象"></a>（Server）业务对象和（DAO）数据访问对象</h3><p>:DAO中的方法都是单精度方法或者称之为细粒度方法。什么叫单精度？一个方法只考虑一个操作，比如添加，那就是insert操作</p><p>:BO中的方法属于业务方法，也实际的业务是比较复杂的，因此业务方法的粒度是比较粗的</p><p>例如注册这个功能属于业务功能，也就是说用来注册这个方法属于业务方法</p><p>那么这个方法中会存在多个dao方法，也就是业务方法中会调用多个dao方法</p><ul><li>例如注册使用dao中的select操作</li><li>添加使用dao中的insert操作</li></ul><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><p>对于DAO操作和Controller层之间还有要一个Server层</p><h3 id="IOC（inversion-of-Control）"><a href="#IOC（inversion-of-Control）" class="headerlink" title="IOC（inversion of Control）"></a>IOC（inversion of Control）</h3><p>BeanFactor来分配每个类以及他所需要的依赖类的实例</p><h4 id="耦合-x2F-依赖"><a href="#耦合-x2F-依赖" class="headerlink" title="耦合/依赖"></a>耦合/依赖</h4><ol><li><p>软件系统之间层与层之间存在依赖，</p></li><li><p>系统架构或者是设计的原则：高内聚低耦合</p></li><li><p>内部的组成应该是高度聚合的，而层与层的关系是0耦合，最理想的情况0耦合</p></li></ol><h4 id="控制反转（IOS）"><a href="#控制反转（IOS）" class="headerlink" title="控制反转（IOS）"></a>控制反转（IOS）</h4><p>控制反转</p><p>将程序中可能存在的由程序员创建的对象，放到beanFactory里面，由beanFactory来控制生命周期，程序员需要的对象只需要从这个beanFactory里面取就可以了，这样对象的生命周期就不由程序员控制，而是交给了baenFactory，这种现象就叫做控制反转</p><h4 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.之前的写法StudentServer studentServer = new StudentServiceImpl();这样会存在着 StudentServer 和 serviece 层存在耦合2.之后的做法StudentServer studentServer =null ;然后在配置文件中配置，手动的给这个Controller里面需要用到的控制层的东西注入依赖然后可以直接通过反射来获取到，不需要显性的创建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>studentController<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentServer<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentServer<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h2><h3 id="Filter概述"><a href="#Filter概述" class="headerlink" title="Filter概述"></a>Filter概述</h3><p>Filter也属于Servlet规范</p><p>继承Filter接口，实现方法</p><h3 id="Filter配置"><a href="#Filter配置" class="headerlink" title="Filter配置"></a>Filter配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.注解</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">"*.do"</span><span class="token punctuation">)</span><span class="token comment">//2.xml文件中配置</span><span class="token comment">// 在xml文件配置也和WebServlet一样，换个名字</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span>            <span class="token operator">&lt;</span><span class="token class-name">Filter</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Filter</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token class-name">Filter</span><span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>servlets<span class="token punctuation">.</span></span>AddServlets</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Filter</span><span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Filter</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token class-name">Filter</span><span class="token operator">-</span>mapping<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token class-name">Filter</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>x<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Filter</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span><span class="token operator">/</span>add<span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">Filter</span><span class="token operator">-</span>mapping<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Filter的触发优先级顺序"><a href="#Filter的触发优先级顺序" class="headerlink" title="Filter的触发优先级顺序"></a>Filter的触发优先级顺序</h3><ul><li>如果是类按照字典序</li><li>如果是配置文件，按照配置文件的先后</li></ul><h3 id="Filter的事务处理"><a href="#Filter的事务处理" class="headerlink" title="Filter的事务处理"></a>Filter的事务处理</h3><ul><li>可以通过Filter来进行编码的设置</li><li>执行事务的回滚操作</li></ul><h2 id="事务管理的前置知识"><a href="#事务管理的前置知识" class="headerlink" title="事务管理的前置知识"></a>事务管理的前置知识</h2><p>在Serice层开启事务管理，如果有一个DAO操作失败，那么就进行事务回滚</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220319101556570.png" alt="image-20220319101556570"></p><p>过滤器的基本应用，将上图的在Service层开启事务管理，向上抽取，在Filter层开启事务管理之后所有的操作都包含在<code>放行</code>里面，一旦出错就会rollback（）</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220319102004854.png" alt="image-20220319102004854"></p><h3 id="涉及的组件"><a href="#涉及的组件" class="headerlink" title="涉及的组件"></a>涉及的组件</h3><ul><li><p>ThreadLocal：管理数据库的连接</p></li><li><p>openSessionInViewFilter：具体实现负责事务的开启，提交，回滚的管理</p></li><li><p>JunitConnection：获取数据库连接</p></li><li><p>BaseDao：对数据库的操作</p></li><li><p>TransactionManager：事务管理</p></li></ul><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p>在一个Filter里面进行事务的提交和回滚，底层如果一个DAO操作出现失误，那么会向上抛出异常，直到在Filter里面被捕获到这个异常</p><p>然后就会进行事务回滚</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务回滚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TransactionManager</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><h4 id="ThreadLocal的set方法"><a href="#ThreadLocal的set方法" class="headerlink" title="ThreadLocal的set方法"></a>ThreadLocal的set方法</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220330171652239.png" alt="image-20220330171652239"></p><h4 id="ThreadLocal的get方法"><a href="#ThreadLocal的get方法" class="headerlink" title="ThreadLocal的get方法"></a>ThreadLocal的get方法</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220330171800202.png" alt="image-20220330171800202"></p><h3 id="通过线程进行Server后项目框架"><a href="#通过线程进行Server后项目框架" class="headerlink" title="通过线程进行Server后项目框架"></a>通过线程进行Server后项目框架</h3><p>每一个Server对应一个线程，对同一个线程他的DAO对应的ID是同一个</p><p>所以在同一个Server中可能会用到多个DAO操作</p><p>可以在当前线程上存储数据，也可以在当前线程上获取数据</p><p>当前DAO操作如果需要连接到数据库就从ThreadLocal中获取连接</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220331115337112.png" alt="image-20220331115337112"></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><h3 id="配置监听器（Listener）"><a href="#配置监听器（Listener）" class="headerlink" title="配置监听器（Listener）"></a>配置监听器（Listener）</h3><h3 id="监听器-1"><a href="#监听器-1" class="headerlink" title="监听器"></a>监听器</h3><p><img src="/2022/02/04/java-pian/javaweb/image-20220330172329072.png" alt="image-20220330172329072"></p><hr><h4 id="监听器的作用"><a href="#监听器的作用" class="headerlink" title="监听器的作用"></a>监听器的作用</h4><p>对之前的项目通过监听器来优化</p><p>可以通过ServletContextListener来舰艇ServletContext对象的创建</p><p>在ServletContext对象创建之前就将BeanFactory创建完成并且保存到application作用域中</p><p>这样有虽然会减慢系统的启动速度，但是会提高后续的响应速度</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220330184344808.png" alt="image-20220330184344808"></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">请求网址<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>请求方法<span class="token operator">:</span> GET状态代码<span class="token operator">:</span> <span class="token number">200</span> OK远程地址<span class="token operator">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">7890</span>引荐来源网址政策<span class="token operator">:</span> unsafe<span class="token operator">-</span>url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Accept</span><span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflate, brAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7Cache-Control: max-age=0Connection: keep-aliveCookie: __yjs_duid=1_07cb77934cc2cb7cba7321fe70e08e581631009224078; BIDUPSID=A160E32AF109862081730C99479850EA; PSTM=1631010583; BD_UPN=123253; BDUSS=01dTJza3o5fnh3ZFVpfjNiRXR0NHBnSVkyR0xEWHVwUjh6dC0zV1F5cUZSOFZoRVFBQUFBJCQAAAAAAAAAAAEAAACcoJqNWnZlcl8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIW6nWGFup1hUE; BDUSS_BFESS=01dTJza3o5fnh3ZFVpfjNiRXR0NHBnSVkyR0xEWHVwUjh6dC0zV1F5cUZSOFZoRVFBQUFBJCQAAAAAAAAAAAEAAACcoJqNWnZlcl8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIW6nWGFup1hUE; BAIDUID=C63C39519CA91244F4EE9F8EC57A6355:FG=1; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; delPer=0; BD_CK_SAM=1; PSINO=7; BAIDUID_BFESS=C63C39519CA91244F4EE9F8EC57A6355:FG=1; BDRCVFR[NUOtsRvVoHc]=mk3SLVN4HKm; H_PS_645EC=1016eFqKPY9kQNweStgu8qUVLVYtjKr0LyMuNgI%2FUZ8k46%2Fdw1CbB3xoNLusvrXxZjh1LsRtOfmP; BD_HOME=1; H_PS_PSSID=35106_31660_35773_34584_35490_35796_35318_26350_35746; sug=3; sugstore=0; ORIGIN=2; bdime=0; BA_HECTOR=a5042180a0210lalph1gvs2vr0qHost: www.baidu.comReferer: https://www.baidu.com/link?url=S1DCLMC5HRtFPUFeE_48NQoJvAKOB6gKa4AXKOCMdPO&amp;wd=&amp;eqid=fbd4eab2004e9d080000000661fe0becsec-ch-ua: " Not;A Brand";v="99", "Google Chrome";v="97", "Chromium";v="97"sec-ch-ua-mobile: ?0sec-ch-ua-platform: "macOS"Sec-Fetch-Dest: documentSec-Fetch-Mode: navigateSec-Fetch-Site: same-originSec-Fetch-User: ?1Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><ul><li><p><strong>GET</strong>，<strong>POST</strong></p><ul><li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全但高效</li><li>post: 请求能够携带的参数没有限制，大小没限制，不显示数据内容，安全但不高效</li></ul></li><li><p>json格式，请求题,request payload</p></li><li><p>HEAD，DELETE,PUT</p></li></ul><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Accept</span><span class="token operator">:</span> <span class="token comment">//告诉浏览器，他所支持的文件类型</span><span class="token class-name">Accept</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span> <span class="token comment">//支持的编码格式</span><span class="token class-name">Accept</span><span class="token operator">-</span><span class="token class-name">Language</span><span class="token operator">:</span>  <span class="token comment">//支持的语言环境</span><span class="token class-name">Cache</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">:</span>  <span class="token comment">//缓存控制</span><span class="token class-name">Connection</span><span class="token operator">:</span><span class="token comment">//告诉浏览器请求还是断开链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><ul><li><p>响应行</p><ul><li>协议</li><li>响应状态码</li><li>响应状态</li></ul></li><li><p>响应头</p><ul><li>包含服务器的信息，服务器发送给浏览器的信息(内容类型，编码，长度)</li></ul></li><li><p>响应体</p><ul><li>响应实际内容</li></ul></li><li><p>服务器响应-&gt;客户端</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Bdpagetype</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">Bdqid</span><span class="token operator">:</span> <span class="token number">0xe0f3d0f700863cfa</span><span class="token class-name">Cache</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">:</span> <span class="token keyword">private</span><span class="token comment">//缓存控制</span><span class="token class-name">Connection</span><span class="token operator">:</span> keep<span class="token operator">-</span>alive<span class="token comment">//连接：保持活跃</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span> gzip<span class="token comment">//编码</span><span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token comment">//字符集</span><span class="token class-name">Date</span><span class="token operator">:</span> <span class="token class-name">Sat</span><span class="token punctuation">,</span> <span class="token number">05</span> <span class="token class-name">Feb</span> <span class="token number">2022</span> <span class="token number">05</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">43</span> GMT<span class="token class-name">Expires</span><span class="token operator">:</span> <span class="token class-name">Sat</span><span class="token punctuation">,</span> <span class="token number">05</span> <span class="token class-name">Feb</span> <span class="token number">2022</span> <span class="token number">05</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">43</span> GMT<span class="token class-name">Server</span><span class="token operator">:</span> BWS<span class="token operator">/</span><span class="token number">1.1</span><span class="token class-name">Set</span><span class="token operator">-</span><span class="token class-name">Cookie</span><span class="token operator">:</span> BDSVRTM<span class="token operator">=</span><span class="token number">444</span><span class="token punctuation">;</span> path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Set</span><span class="token operator">-</span><span class="token class-name">Cookie</span><span class="token operator">:</span> BD_HOME<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> path<span class="token operator">=</span><span class="token operator">/</span><span class="token class-name">Set</span><span class="token operator">-</span><span class="token class-name">Cookie</span><span class="token operator">:</span> H_PS_PSSID<span class="token operator">=</span><span class="token number">35106_31660_35773_34584_35490_35796_35318_26350_35746</span><span class="token punctuation">;</span> path<span class="token operator">=</span><span class="token operator">/</span><span class="token punctuation">;</span> domain<span class="token operator">=</span><span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token class-name">Strict</span><span class="token operator">-</span><span class="token class-name">Transport</span><span class="token operator">-</span><span class="token class-name">Security</span><span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">172800</span><span class="token class-name">Traceid</span><span class="token operator">:</span> <span class="token number">1644039163070749261816209529243120844026</span><span class="token class-name">Transfer</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token operator">:</span> chunked<span class="token class-name">X</span><span class="token operator">-</span><span class="token class-name">Frame</span><span class="token operator">-</span><span class="token class-name">Options</span><span class="token operator">:</span> sameorigin<span class="token class-name">X</span><span class="token operator">-</span><span class="token class-name">Ua</span><span class="token operator">-</span><span class="token class-name">Compatible</span><span class="token operator">:</span> IE<span class="token operator">=</span><span class="token class-name">Edge</span><span class="token punctuation">,</span>chrome<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><ul><li><p>200 ： 请求成功</p></li><li><p>3xx : 请求重定向（重新给新位置）</p><ul><li>302:重定向</li></ul></li><li><p>4xx : 找不到资源</p><ul><li>404： 资源不存在</li><li>405:   表单提交方法错误</li></ul></li><li><p>5xx ： 服务器代码错误</p><ul><li>500</li><li>502 网关错误</li></ul></li></ul><h3 id="获取请求行信息的相关方法"><a href="#获取请求行信息的相关方法" class="headerlink" title="获取请求行信息的相关方法"></a>获取请求行信息的相关方法</h3><table><thead><tr><th align="center">方法声明</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">int getRemotePort()</td><td align="center">获取请求客户端网络连接的<strong>端口号</strong></td></tr><tr><td align="center">String getLocalAddr</td><td align="center">获取Web服务器上接收当前请求网络连接的<strong>IP地址</strong></td></tr><tr><td align="center">String getLocalName</td><td align="center">获取Web服务器上接收当前网络连接IP对应的<strong>主机名</strong></td></tr><tr><td align="center">String getScheme()</td><td align="center">获取请求的<strong>协议名</strong></td></tr><tr><td align="center">String getServerName()</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="为什么要学习Maven"><a href="#为什么要学习Maven" class="headerlink" title="为什么要学习Maven"></a>为什么要学习Maven</h3><ul><li>javaweb开发中，需要大量的jar包，我们手动去导入；</li><li>让一个东西帮我自动导入和配置这个jar包，由此有了Maven</li></ul><h3 id="Maven项目架构管理工具"><a href="#Maven项目架构管理工具" class="headerlink" title="Maven项目架构管理工具"></a>Maven项目架构管理工具</h3><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去喂饭</li></ul><p>Maven会规定编写java代码，按照规范</p><h3 id="Maven文件结构"><a href="#Maven文件结构" class="headerlink" title="Maven文件结构"></a>Maven文件结构</h3><p><strong>java获取文件目录</strong></p><p>├── pom.xml<br>├── src<br>│   ├── main<br>│   │   ├── java<br>│   │   │   ├── com<br>│   │   │   │   ├── alipay<br>│   │   │   │   │   ├── ResourceTest.java<br>│   │   │   │   │   └── Resource.java<br>│   │   └── resources<br>│   │   │   ├── conf<br>│   │   │   │   ├── sysConf.json<br>│   │   │   └── request.xml<br>└── local.iml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、通过Class的getResource方法</span>        <span class="token class-name">String</span> a1 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/com/alipay/Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> a2 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> a3 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> a4 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"../../request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> a5 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> a6 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"../../conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 2、通过本类的ClassLoader的getResource方法</span>        <span class="token class-name">String</span> b1 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"com/alipay/Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> b2 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> b3 <span class="token operator">=</span> <span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 3、通过ClassLoader的getSystemResource方法</span>        <span class="token class-name">String</span> c1 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"com/alipay/Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> c2 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> c3 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 4、通过ClassLoader的getSystemResource方法</span>        <span class="token class-name">String</span> d1 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResource</span><span class="token punctuation">(</span><span class="token string">"com/alipay/Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> d2 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResource</span><span class="token punctuation">(</span><span class="token string">"request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> d3 <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemResource</span><span class="token punctuation">(</span><span class="token string">"conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 5、通过Thread方式</span>        <span class="token class-name">String</span> e1 <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"com/alipay/Resource.class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> e2 <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"request.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> e3 <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"conf/sysConf.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于maven打包会把 src/main/java 和 src/main/resources 下的文件放到 target/classes 下，所以下面统一以根路径代表此目录，总结起来有以下几个规律：</p><p>Class.getResource()的资源获取如果以 / 开头，则从根路径开始搜索资源。<br>Class.getResource()的资源获取如果不以 / 开头，则从当前类所在的路径开始搜索资源。<br>ClassLoader.getResource()的资源获取不能以 / 开头，统一从根路径开始搜索资源。</p><h3 id="java8方法参数名称–maven配置"><a href="#java8方法参数名称–maven配置" class="headerlink" title="java8方法参数名称–maven配置"></a>java8方法参数名称–maven配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>plugin<span class="token punctuation">&gt;</span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">3.3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>       <span class="token generics"><span class="token punctuation">&lt;</span>configuration<span class="token punctuation">&gt;</span></span>           <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">&gt;</span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>source<span class="token operator">&gt;</span>           <span class="token generics"><span class="token punctuation">&lt;</span>target<span class="token punctuation">&gt;</span></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">&gt;</span>           <span class="token generics"><span class="token punctuation">&lt;</span>compilerArgs<span class="token punctuation">&gt;</span></span>               <span class="token generics"><span class="token punctuation">&lt;</span>arg<span class="token punctuation">&gt;</span></span><span class="token operator">-</span>parameters<span class="token operator">&lt;</span><span class="token operator">/</span>arg<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">/</span>compilerArgs<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QQZone项目学习过程"><a href="#QQZone项目学习过程" class="headerlink" title="QQZone项目学习过程"></a>QQZone项目学习过程</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>用户登陆</li><li>登陆成功，显示主界面</li><li>查看日志详情<ul><li>日志本身信息（作者头像，昵称，日志标题，日志内容）</li><li>回复列表（回复者头像，昵称，回复内容，回复日期）</li><li>主人回复信息</li></ul></li><li>删除日志</li><li>删除特定回复</li><li>删除特定主人回复</li><li>添加日志，添加回复，添加主人回复</li><li>点击左侧好友链接，进入好友的空间</li></ul><h3 id="数据库设计（E-R分析）"><a href="#数据库设计（E-R分析）" class="headerlink" title="数据库设计（E-R分析）"></a>数据库设计（E-R分析）</h3><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><ul><li><p>用户登陆信息</p></li><li><p>用户详情信息</p></li><li><p>日志</p></li><li><p>回复</p></li><li><p>主人回复</p></li><li><p>分析其中的属性</p><ul><li>用户登陆信息：账号，密码，头像，名称</li><li>用户详情：星座，血型····</li><li>日志：标题，内容，日期，作者</li><li>回复：内容，日期，作者，对那片日志的回复</li><li>主人回复：内容，日期，作者，对那片日志的回复</li></ul></li><li><p>分析实体之间的关系</p><ul><li>用户登陆信息 - 用户详情信息：1:1</li><li>日志 - 回复： 1: N</li><li>用户登陆信息 - 日志：1:N</li><li>回复 - 主人回复 ：1:1</li><li>用户登陆信息 ： 回复：1:N</li><li>用户登陆信息 ： 主人回复 ： 1:N</li></ul></li></ul><h4 id="Entity-Relationship图"><a href="#Entity-Relationship图" class="headerlink" title="Entity Relationship图"></a>Entity Relationship图</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220331125935148.png" alt="image-20220331125935148"></p><h3 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h3><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>属性不可再分</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>每个非主属性完全函数依赖于任何一个候选码</p><p>对于每个非主属性完全由任何一个候选码所确定</p><p>一张表只用来描述一件事情</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>表中的每一列和主键都是直接依赖关系，而不是间接依赖</p><p>也就是说每一列应该不能由主键通过和其他表连接得到</p><h4 id="数据库规范和效率的决定"><a href="#数据库规范和效率的决定" class="headerlink" title="数据库规范和效率的决定"></a>数据库规范和效率的决定</h4><p>数据库设计得越规范，冗余数据就越少，但是效率会有所下降</p><h3 id="XML约束"><a href="#XML约束" class="headerlink" title="XML约束"></a>XML约束</h3><p><img src="/2022/02/04/java-pian/javaweb/image-20220401192313134.png" alt="image-20220401192313134"></p><h3 id="截止目前的项目工作框架"><a href="#截止目前的项目工作框架" class="headerlink" title="截止目前的项目工作框架"></a>截止目前的项目工作框架</h3><p><img src="/2022/02/04/java-pian/javaweb/image-20220402125506255.png" alt="image-20220402125506255"></p><h3 id="截止目前为止的错误"><a href="#截止目前为止的错误" class="headerlink" title="截止目前为止的错误"></a>截止目前为止的错误</h3><ol><li>数据库没有更换</li><li>字段名跟类的属性名不相等可以用ColumeLable（）方法来用别名</li><li>遇见.html的Thymeleaf页面没有生效，是因为直接通过跳转的静态页面，没有经过服务器端的渲染，也就是super.processTemplate();所以可以写给pageController来跳转给DispacherServelt渲染然后在实现页面的跳转</li></ol><h3 id="根据好友链接进入空间实现"><a href="#根据好友链接进入空间实现" class="headerlink" title="根据好友链接进入空间实现"></a>根据好友链接进入空间实现</h3><p> 存储一个作用于为 UserBasic 和 Friend 作用域，</p><p>如果UserBasic = Friend 那么说明是自己的空间：进行额外的操作</p><p>如果不相等那么说明不是自己的空间</p><p>日志展示可以直接按照Friend 来展示，</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220403143501223.png" alt="image-20220403143501223"></p><h3 id="日志详情页面实现"><a href="#日志详情页面实现" class="headerlink" title="日志详情页面实现"></a>日志详情页面实现</h3><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ol><li><p>获取topic 内容</p></li><li><p>获取所有topic reply<list></list></p></li><li><p>获取所有topic hostReply<list></list></p></li><li><p>对于topic的author通过UserService获取所有author信息在赋予给topic的author</p></li><li><p>reply的author同理也需要同4一样的操作在获取Reply的时候对所有的id通过UserService赋予信息后在赋予author</p></li><li></li></ol><p><img src="/2022/02/04/java-pian/javaweb/image-20220403151258073.png" alt="image-20220403151258073"></p><h3 id="删除回复的功能实现"><a href="#删除回复的功能实现" class="headerlink" title="删除回复的功能实现"></a>删除回复的功能实现</h3><h4 id="逻辑-1"><a href="#逻辑-1" class="headerlink" title="逻辑"></a>逻辑</h4><ul><li><p>是你的空间，你可以删除任何回复</p></li><li><p>不是你的空间，你可以删除你自己的回复  </p></li><li><p>在删除回复记录的时候，发现删除失败:原因是当前主人回复中仍然有该回复记录</p></li><li><p>如果回复中有关联的主人回复，需要先删除主人回复，因为在数据库中对于当前回复的外健存在主人回复</p><ul><li>根据replyId 根据HostReplyService 获取replyId 的所有HostReply删除掉，在删除reply</li></ul></li></ul><h3 id="删除日志功能实现"><a href="#删除日志功能实现" class="headerlink" title="删除日志功能实现"></a>删除日志功能实现</h3><h4 id="逻辑-2"><a href="#逻辑-2" class="headerlink" title="逻辑"></a>逻辑</h4><ul><li>删除日志，需要先删除所有相关联的回复</li><li>删除回复，需要先删除所有相关联的主人回复</li><li>如果不是自己的空间，那么不可以删除日志</li><li>删除完后局部刷新展示日志的html,就是重新用数据来覆盖之前的session作用域里面的数据</li></ul><h3 id="QQZone-Review"><a href="#QQZone-Review" class="headerlink" title="QQZone Review"></a>QQZone Review</h3><h4 id="关于Data时间显示的格式问题"><a href="#关于Data时间显示的格式问题" class="headerlink" title="关于Data时间显示的格式问题"></a>关于Data时间显示的格式问题</h4><p>thymeleaf提供来方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">${#dates.format(topic.topicDate,{yyyy-MM-dd HH:mm:ss})} <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>java实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// String -&gt; java.util.Data;</span><span class="token class-name">String</span> dateString <span class="token operator">=</span> <span class="token string">"2021-12-30 12:30:59"</span><span class="token class-name">SimpleDateFormate</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormate</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span>    <span class="token comment">// Data -&gt; String</span><span class="token class-name">Date</span> date <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> dateString <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加PageContorller的目的"><a href="#添加PageContorller的目的" class="headerlink" title="添加PageContorller的目的"></a>添加PageContorller的目的</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">系统启动时，我们访问的页面是：http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1</span>ocalhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>pro23<span class="token operator">/</span>page<span class="token punctuation">.</span><span class="token keyword">do</span><span class="token operator">?</span>operate<span class="token operator">=</span>page<span class="token operator">&amp;</span>page<span class="token operator">=</span>login为什么不是：http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">1</span>oca1host<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>pro23<span class="token operator">/</span><span class="token number">1</span>ogin<span class="token punctuation">.</span>htm1<span class="token operator">?</span>答：如果是后者，那么属于直接访问静态页面。那么页面上的chymeleaf：表达式（标签）浏览器是不能识别的我们访问前者的目的其实就是要执行viewBaseServlet中的processTemplete（）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="项目整个流程"><a href="#项目整个流程" class="headerlink" title="项目整个流程"></a>项目整个流程</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220407180734265.png" alt="image-20220407180734265"></p><hr><p><img src="/2022/02/04/java-pian/javaweb/image-20220407180757854.png" alt="image-20220407180757854"></p><hr><p><img src="/2022/02/04/java-pian/javaweb/image-20220407181041224.png" alt="image-20220407181041224"></p><h4 id="快速进行一个项目套路"><a href="#快速进行一个项目套路" class="headerlink" title="快速进行一个项目套路"></a>快速进行一个项目套路</h4><ul><li><p>复制myssm包(通用)</p></li><li><p>新建applicationContent.xml配置文件，进行组件和依赖注入</p></li><li><p>在web.xml中指定文件名，如果使用thymeleaf配置thymeleaf前后缀</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span><span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>view<span class="token operator">-</span>prefix<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span><span class="token operator">&lt;</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span><span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span>view<span class="token operator">-</span>suffix<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">&gt;</span><span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token punctuation">.</span>html<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">-</span>param<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置监听器需要读取的参数 (例如监听创建提前创建好factory)</p></li><li><p>开发具体的业务模块</p></li></ul><p>一个具体的业务模块纵向上由几个部分组成</p><p>​html页面</p><p>​POJO类（对应数据库的表）</p><p>​DAO接口和实现类</p><p>​Service接口和实现类</p><p>​Controller控制器组件</p><p>在applicationContext.xml中配置DAO，Service,Controller之间的依赖关系</p><p>DAO实现类继承BaseDao实现具体的接口，BaseDao<t>泛型类型要对应</t></p><p>Service是业务控制类：业务逻辑都封装在Service层，</p><p>​保证DAO方法的单精度（DAO只实现一个功能）</p><p>​当一个业务功能需要使用其他模块的业务功能时，尽量调用别人的Service方法，而不是深入到DAO层细节</p><ul><li>Controller类的编写规则</li></ul><p>在配置文件中配置Controller类的时候</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.qqzone.controllers.UserConroller"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​那么，用户在前端发送请求的时候对应的servlectPath就是 /user.do</p><p>​其中 user 应该要对应bean的id值</p><p>在Controller中设计的方法应该要和operate的值一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​在前端中应该要有如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;form type=“hidden”,name=“operate”,value=“login”&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​其中的 value 值对应方法名</p><p>在表单中组件的name属性要和Controller的方法的参数名一致</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">&gt;</span></span>public String login(String loginId,String pwd,HttpSession session)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Controller中方法的参数不一定是全部通过作用域来获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>“request”<span class="token punctuation">.</span>equals<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>“session”<span class="token punctuation">.</span>equals…<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"response"</span><span class="token punctuation">.</span>equals<span class="token punctuation">)</span> <span class="token punctuation">{</span>    直接由dispacherServlet赋予<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    通过反射获取类型赋予参数<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DispacherServlet大致流程</li></ul><p>从application作用域获取Ioc容器<br>解析servletPath，在Ioc容器中寻找对应的Controller组件<br>准备operate指定的方法所要求的参数<br>调用operate,指定的方法<br>接收到执行operate指定的方法的返回值，对返回值进行处理-视图处理</p><ul><li>DispacherServlet从 application 作用域中获取IOC容器</li></ul><p>ContextLoaderListener在容器启动时会执行初始化任务，而它的操作就是：<br>解析IOC的配置文件，创建一个一个的组件，并完成组件之间依赖关系的注入<br>将Ioc容器保存到application作用域</p><ul><li>修改BaseDAO，让其支持oroperties文件以及druid数据源连接池</li></ul><p>讲解了两种方式：<br>1）直接自己配置oroperties，然后读取，然后加载驱动.·…</p><p>2）使用druid连接池技术，那么properties中的key是有要求的</p><ul><li>将通用的代码弄成jar包，在工程直接添加library可以直接使用</li></ul><h2 id="书城项目学习过程"><a href="#书城项目学习过程" class="headerlink" title="书城项目学习过程"></a>书城项目学习过程</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><h4 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220408113357175.png" alt="image-20220408113357175"></p><h4 id="Entity-relationship-Diagram（ER图）"><a href="#Entity-relationship-Diagram（ER图）" class="headerlink" title="Entity-relationship Diagram（ER图）"></a>Entity-relationship Diagram（ER图）</h4><p><img src="/2022/02/04/java-pian/javaweb/image-20220408113251068.png" alt="image-20220408113251068"></p><h3 id="登陆功能实现"><a href="#登陆功能实现" class="headerlink" title="登陆功能实现"></a>登陆功能实现</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li><p>提交表单包含用户名和密码</p></li><li><p>根据用户名和密码去数据库验证</p></li></ul><h3 id="首页书籍显示功能实现"><a href="#首页书籍显示功能实现" class="headerlink" title="首页书籍显示功能实现"></a>首页书籍显示功能实现</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul><li>获取所有书籍的信息</li><li>通过thymeleaf在网页中展示</li></ul><h3 id="加入购物车功能实现"><a href="#加入购物车功能实现" class="headerlink" title="加入购物车功能实现"></a>加入购物车功能实现</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ul><li><p>获取该用户的所有购物车项</p></li><li><p>通过map标记购物车里面的图书的 id 所属购物车项</p></li><li><p>通过map对当前添加书籍判断是否已有所属购物车项</p><ul><li>如果有该购物车项中的数量+1</li><li>如果没有通过该书籍创建新的购物车项，</li></ul></li></ul><h3 id="购物车详情页面实现"><a href="#购物车详情页面实现" class="headerlink" title="购物车详情页面实现"></a>购物车详情页面实现</h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>通过用户id获取该用户的所有的购物车项</li><li>在根据每个购物车项里面的book id 为每个book赋予详细信息</li><li>通过每一个购物车项的价格和数量，算出该购物车项的小计</li><li>通过每个购物车项的小计算出总金额</li></ul><h3 id="结账功能实现"><a href="#结账功能实现" class="headerlink" title="结账功能实现"></a>结账功能实现</h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><ul><li>订单表中添加一条记录</li><li>订单详情表添加所有订单项的记录</li><li>购物车项删除对应的记录</li></ul><h3 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h3><h4 id="购物车里面的订单数量问题"><a href="#购物车里面的订单数量问题" class="headerlink" title="购物车里面的订单数量问题"></a>购物车里面的订单数量问题</h4><p><strong>问题：</strong></p><p>当前在购物车中的订单数量可以达到 0 </p><p><strong>解决方案：</strong></p><ul><li>添加逻辑逻辑判断，订单数量最少为1</li></ul><h4 id="Double数据运算过程中精度调整"><a href="#Double数据运算过程中精度调整" class="headerlink" title="Double数据运算过程中精度调整"></a>Double数据运算过程中精度调整</h4><p>在购物车中小计和总和是直接使用double进行计算，会出现显示问题</p><p><img src="/2022/02/04/java-pian/javaweb/image-20220421173524625.png" alt="image-20220421173524625"></p><p>解决方案</p><ul><li>使用BigDecimal类型来进行Double类型数据运算</li><li>创建BigDecimal类型对象时将Double类型的数据转换为字符串</li></ul><p>求小计</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取金额时需要计算得到</span><span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// +" " 将类型转化成字符串类型</span>    <span class="token class-name">BigDecimal</span> bigDecimalCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BigDecimal</span> bigDecimalPrice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BigDecimal</span> multiReuslt <span class="token operator">=</span> bigDecimalCount<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bigDecimalPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> multiReuslt<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求总和</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 计算总金额</span><span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getTotalAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.声明一个变量用于存储累加结果</span>    <span class="token class-name">BigDecimal</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.遍历Map集合</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> cartItemMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CartItem</span> cartItem <span class="token operator">=</span> cartItemMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> amount <span class="token operator">=</span> cartItem<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 3.返回累加结果</span>    <span class="token keyword">return</span> sum<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区分用户和非用户"><a href="#区分用户和非用户" class="headerlink" title="区分用户和非用户"></a>区分用户和非用户</h4><p><strong>问题：</strong></p><p>因为在购物车处需要获得对应的用户来显示对应的购物车，如果当前没有用户登录，那么就会在进入购物车的时候获取用户不到，出现异常，</p><p><strong>解决方案：</strong></p><ul><li>创建一个过滤器Filter，如果当前用户没有登录，并且还点击了除首页外其他组件（例如，加入购物车，立即购买等等），就会跳转到登录界面，</li></ul><p><strong>在解决方案中，出现以下问题</strong></p><p>localhost將您重定向的次数过多。尝试清除Cookie</p><p>ERR TOO MANY REDIRECTS</p><p><strong>问题原因：</strong></p><p>​当第一次到登录界面由于没有登录，会被过滤器又跳转到登录界面，重复上述过程，造成死循环</p><p><strong>解决方案1：</strong></p><ul><li>在过滤器中添加逻辑判断，如果当前在指定页面中直接放行，不重定向</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//http://localhost:8080/pro25/page.do?operate=page&amp;&amp;page=user/login</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//  pro25/page.do</span>request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//  operate=page&amp;&amp;page=user/login</span>    <span class="token comment">//通过在webFilter中设置初始值，对于所有的合法的操作加入到initParams中（白名单）</span><span class="token comment">//如果当前跳转的页面在initParameter中直接放行，否则拦截跳转</span><span class="token comment">//通过上述的两个方法可以获取到对应的操作</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>    initParams<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token operator">=</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">"bai"</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">"/pro25/page.do?opetater=page&amp;&amp;page=user/ogin,/pro25/user.do?null,/pro25/user.do?"</span>                      <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//在 init方法中通过","分割分别放入List中，通过这个List来判断当前的合法操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterCOnfig</span> config <span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> bai<span class="token operator">=</span>config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"bai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> baiArr <span class="token operator">=</span>bai<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    baiList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>baiArr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方案2:</strong></p><ul><li>在对应需要用户的网页如果没有获取到用户信息，跳转到首页中</li></ul><p>缺点是，如果存在多个网页不如第一个解决方案添加白名单管理方便。</p><h4 id="添加Cookie实现自动登录"><a href="#添加Cookie实现自动登录" class="headerlink" title="添加Cookie实现自动登录"></a>添加Cookie实现自动登录</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cookie</span><span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加注册的验证码（反爬）"><a href="#添加注册的验证码（反爬）" class="headerlink" title="添加注册的验证码（反爬）"></a>添加注册的验证码（反爬）</h4><h4 id="判断用户是否已经被注册（ajax）"><a href="#判断用户是否已经被注册（ajax）" class="headerlink" title="判断用户是否已经被注册（ajax）"></a>判断用户是否已经被注册（ajax）</h4><p>Ajax:异步的javascript and xml</p><p>目的：用来发送异步的请求，然后当服务器给我响应的时候进行回调操作，进行局部刷新</p><p>步骤</p><ol><li>创建XMLHttpRequest</li><li>调用open进行设置：“GET”，URL，TRUE</li><li>绑定改变时执行的回调函数 -onreadystatechange</li><li>发送请求-send（）</li><li>编写回调函数，在回调函数，我们对XMLHttpRequest的readyState为4和XMLHttpRequest的status为200；<ul><li>0（未初始化）还没有调用send（）方法</li><li>1（载入）已调用send0方法，正在发送请求</li><li>2（载入完成）send（）方法执行完成，已经接收到全部响应内容</li><li>3（交互）正在解析响应内容</li><li>4（完成）响应内容解析完成，可以在客户端调用了</li></ul></li></ol><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="axios基本格式"><a href="#axios基本格式" class="headerlink" title="axios基本格式"></a>axios基本格式</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">axios()    .then()    .catch();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端发送普通参数给服务端"><a href="#客户端发送普通参数给服务端" class="headerlink" title="客户端发送普通参数给服务端"></a>客户端发送普通参数给服务端</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>在params里申明参数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string-property property">"el"</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token string-property property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span>        <span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">"123"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string-property property">"methods"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string-property property">"commonParam"</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string-property property">"method"</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token comment">//请求方式</span>                <span class="token string-property property">"url"</span><span class="token operator">:</span><span class="token string">"/demo/AjaxServlet?method=commonParam"</span><span class="token punctuation">,</span> <span class="token comment">//请求</span>                <span class="token string-property property">"params"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">//普通参数</span>                    <span class="token string-property property">"userName"</span><span class="token operator">:</span>vue<span class="token punctuation">.</span>uname                    <span class="token string-property property">"userPwd"</span><span class="token operator">:</span>vue<span class="token punctuation">.</span>pwd                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//接受服务端的响应</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//接受服务端的异常</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>commonParam<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>普通请求参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务端返回字符串"><a href="#服务端返回字符串" class="headerlink" title="服务端返回字符串"></a>服务端返回字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxServlet</span> <span class="token keyword">extends</span> <span class="token class-name">ModelBaseServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">commonParam</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userPwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userPwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userName = "</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userPwd = "</span> <span class="token operator">+</span> userPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"服务器端返回普通文本字符串作为响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端发送JSON格式的数据给服务端"><a href="#客户端发送JSON格式的数据给服务端" class="headerlink" title="客户端发送JSON格式的数据给服务端"></a>客户端发送JSON格式的数据给服务端</h3><p>JSON(JavaScript Object Notation) javascript 对象表示法</p><p>和发送普通参数区别</p><ul><li>params 变成 data</li></ul><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><p>客户端中也可以进行类型转换json和string 的类型转换</p><p><strong>js语言中也有字符串和js对象之间的API</strong></p><ul><li>string JSON.stringify(object)     object -&gt; string</li><li>object JSON.parse(string)    string-&gt;object</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string-property property">"el"</span><span class="token operator">:</span><span class="token string">"#xx"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">uname</span><span class="token operator">:</span><span class="token string">"lina"</span><span class="token punctuation">,</span>            <span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">"123"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token string-property property">"requestBodyJSON"</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string-property property">"method"</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>            <span class="token string-property property">"url"</span><span class="token operator">:</span><span class="token string">"/demo/AjaxServlet?method=requestBodyJSON"</span><span class="token punctuation">,</span>            <span class="token string-property property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token string-property property">"stuId"</span><span class="token operator">:</span> <span class="token number">55</span><span class="token punctuation">,</span>                <span class="token string-property property">"stuName"</span><span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>                <span class="token string-property property">"subjectList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token string-property property">"subjectName"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>                        <span class="token string-property property">"subjectScore"</span><span class="token operator">:</span> <span class="token number">50.55</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        <span class="token string-property property">"subjectName"</span><span class="token operator">:</span> <span class="token string">"php"</span><span class="token punctuation">,</span>                        <span class="token string-property property">"subjectScore"</span><span class="token operator">:</span> <span class="token number">30.26</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string-property property">"teacherMap"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token string-property property">"one"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token string-property property">"teacherName"</span><span class="token operator">:</span><span class="token string">"tom"</span><span class="token punctuation">,</span>                        <span class="token string-property property">"tearcherAge"</span><span class="token operator">:</span><span class="token number">23</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token string-property property">"two"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token string-property property">"teacherName"</span><span class="token operator">:</span><span class="token string">"jerry"</span><span class="token punctuation">,</span>                        <span class="token string-property property">"tearcherAge"</span><span class="token operator">:</span><span class="token number">31</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string-property property">"school"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token string-property property">"schoolId"</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>                    <span class="token string-property property">"schoolName"</span><span class="token operator">:</span> <span class="token string">"atguigu"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务端返回字符串-1"><a href="#服务端返回字符串-1" class="headerlink" title="服务端返回字符串"></a>服务端返回字符串</h4><p>服务端接受json数据可以通过<code>Gson</code>包来进行类型转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">requestBodyJSON</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.由于请求体数据有可能很大，所以Servlet标准在设计API的时候要求我们通过输入流来读取</span>    <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.创建StringBuilder对象来累加存储从请求体中读取到的每一行</span>    <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.声明临时变量</span>    <span class="token class-name">String</span> bufferStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 4.循环读取</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bufferStr <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bufferStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 5.关闭流</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 6.累加的结果就是整个请求体</span>    <span class="token class-name">String</span> requestBody <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 7.创建Gson对象用于解析JSON字符串</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 8.将JSON字符串还原为Java对象</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student = "</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestBody = "</span> <span class="token operator">+</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"服务器端返回普通文本字符串作为响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务端返回json"><a href="#服务端返回json" class="headerlink" title="服务端返回json"></a>服务端返回json</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">responseBodyJSON</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.准备数据对象</span>    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setStuId</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setStuName</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setSchool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">"atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setSubjectList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token number">95.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token number">93.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Teacher</span><span class="token punctuation">&gt;</span></span> teacherMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    teacherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"lili"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    teacherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"mary"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    teacherMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"t3"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"katty"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span><span class="token function">setTeacherMap</span><span class="token punctuation">(</span>teacherMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.创建Gson对象</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.将Java对象转换为JSON对象</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.设置响应体的内容类型，MIME标准</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码模版</title>
      <link href="/2022/02/03/templates/dai-ma-mo-ban-hui-zong/"/>
      <url>/2022/02/03/templates/dai-ma-mo-ban-hui-zong/</url>
      
        <content type="html"><![CDATA[<hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//o(n)求ne数组;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//匹配过程</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="朴素dijk"><a href="#朴素dijk" class="headerlink" title="朴素dijk"></a>朴素dijk</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//用邻接矩阵,初始化为正无穷大</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆优化dijk"><a href="#堆优化dijk" class="headerlink" title="堆优化dijk"></a>堆优化dijk</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//用邻接表</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token comment">/*    pair默认排序是按照a.first==b.first?a.first&lt;b.first:a.second&gt;b.second;    所以每次找最近的点,应该要把距离放在first    */</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> vur <span class="token operator">=</span> t<span class="token punctuation">.</span>second  <span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>vur<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>vur<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>vur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><h3 id="判断是否是2的幂次"><a href="#判断是否是2的幂次" class="headerlink" title="判断是否是2的幂次"></a>判断是否是2的幂次</h3><p>如果 n&amp;(n-1)==0 说明是2的幂次</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// n&gt;0首先判断</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span>  <span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断是否是4的幂次"><a href="#判断是否是4的幂次" class="headerlink" title="判断是否是4的幂次"></a>判断是否是4的幂次</h3><p>如果 n是 44 的幂，那么 n 一定也是 2 的幂。因此我们可以首先判断 n 是否是 2 的幂，在此基础上再判断 n 是否是 4 的幂。</p><p>如果 n 是 4的幂，那么 n的二进制表示中有且仅有一个 1，并且这个 1 出现在从低位开始的第偶数个二进制位上（这是因为这个 1 后面必须有偶数个 0）。这里我们规定最低位为第 0 位，例如 n=16 时，n 的二进制表示为 (10000)</p><p>唯一的1出现在第4个二进制位上，因此n是4的幂</p><p>由于题目保证了 n是一个 32位的有符号整数，因此我们可以构造一个整数，它的所有偶数二进制位都是 0，所有奇数二进制位都是 1。这样一来，我们将 n和 num  进行按位与运算，如果结果为 0，说明 n 二进制表示中的 1 出现在偶数的位置，否则说明其出现在奇数的位置。</p><p>​      mask=(10101010101010101010101010101010)</p><p>可以转换成十六进制表示</p><p>​mask=(AAAAAAAA)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mask <span class="token operator">=</span><span class="token number">0xaaaaaaaa</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span> ans<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>        b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token operator">=</span>a<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="64位整数乘法"><a href="#64位整数乘法" class="headerlink" title="64位整数乘法"></a>64位整数乘法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span>  <span class="token function">getMul</span><span class="token punctuation">(</span><span class="token keyword">int</span>  a<span class="token punctuation">,</span> <span class="token keyword">int</span>   b<span class="token punctuation">,</span> <span class="token keyword">int</span>  q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">%</span> q<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">%</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> pri<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> pri<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="减少unordered-map时间"><a href="#减少unordered-map时间" class="headerlink" title="减少unordered_map时间"></a>减少unordered_map时间</h3><p>其实我们要从底层原理来了解为什么unordered_map会被卡，是因为它的load_factor超过<br>了设定的阈值max_load_factor就会引发哈希表的重建，这个时间耗费才是关键</p><p>我们姑且把load_factor称为负载因子，它等于无序桶的数目/所有元素的数目，个人经验max_load_factor值取0.25并将初始化桶数设置为1024可以最大化避免大数据hash的时间<br>(ps:这个最优化不一定是要求重建次数最小，而是在重建时这个表的规模大小和重建次数中做个平衡~)</p><p><a href="https://www.acwing.com/solution/content/112849/">摘抄</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&gt;</span>mp<span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">.</span><span class="token function">max_load_factor</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// a/b 向上取整</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="取余不为负数"><a href="#取余不为负数" class="headerlink" title="取余不为负数"></a>取余不为负数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二进制表示上下左右"><a href="#二进制表示上下左右" class="headerlink" title="二进制表示上下左右"></a>二进制表示上下左右</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0001</span>   x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span>  <span class="token number">0010</span>   x<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token number">0100</span>   x<span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token number">1000</span>   x<span class="token operator">&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//x + a 和 x ^ a ，对x的奇偶性改变是一样</span>x <span class="token operator">+</span> ax <span class="token operator">^</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码模版 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的整数问题2</title>
      <link href="/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti-2-de-fu-ben/"/>
      <url>/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti-2-de-fu-ben/</url>
      
        <content type="html"><![CDATA[<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/244/    243. 一个简单的整数问题2    题目描述：        给定一个长度为 N 的数列 A，以及 M 条指令，每条指令可能是以下两种之一：            C l r d，表示把 A[l],A[l+1],…,A[r] 都加上 d。            Q l r，表示询问数列中第 l∼r 个数的和。        对于每个询问，输出一个整数表示答案        区间查询 + 区间修改    Tag:        1.树状数组        2.线段树        3.差分        4.数学知识    思路：        g1+g2+g3+g4+···+gn      = a1+(a1+a2)+(a1+a2+a3)+(a1+a2+a3+a4)+·····+（a1+a2+a3···+an)      = n(a1+a2+a3+a4···an) - (0+a2+2a3+3a4+···(n-1)an)          所以只需要    一个数组a[]为g[]的差分数组    一个数组b[i]为 (i-1)*a[i]        sum表示为前缀和    那么就可以通过 i*(sum(a[i]))-sum(b[i]))的求得 g数组的[1,i]的前缀和*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a</span>ll b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//(i-1)*b</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll t <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> value<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> value<span class="token punctuation">;</span>        index <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll sa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll sb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll t <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sa <span class="token operator">+=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        sb <span class="token operator">+=</span> b<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        index <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token operator">*</span>sa<span class="token operator">-</span>sb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">g</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>opt<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            cin<span class="token operator">&gt;&gt;</span>l<span class="token operator">&gt;&gt;</span>r<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>t<span class="token punctuation">;</span>            cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的整数问题</title>
      <link href="/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti/"/>
      <url>/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/yi-ge-jian-dan-de-zheng-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/248/    242. 一个简单的整数问题    题目描述        给定长度为 N 的数列 A，然后输入 M 行操作指令。        第一类指令形如 C l r d，表示把数列中第 l∼r 个数都加 d。        第二类指令形如 Q x，表示询问数列中第 x 个数的值。        对于每个询问，输出一个整数表示答案。    Tag:        1.树状数组        2.差分    思路        1.差分+前缀和单点查询+区间修改        */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> value<span class="token punctuation">;</span>        index <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ll  <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+=</span> tr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        index <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> t<span class="token operator">-</span>last<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> opt <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token string">"Q"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>            cin<span class="token operator">&gt;&gt;</span>l<span class="token operator">&gt;&gt;</span>r<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>t<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>楼兰图腾</title>
      <link href="/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/lou-lan-tu-teng/"/>
      <url>/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/lou-lan-tu-teng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/description/243/    241. 楼兰图腾    题目描述        能够构成多少个图腾图案，一个`V`,一个`∧`        1.如果三个点 (i,yi),(j,yj),(k,yk) 满足 1≤i&lt;j&lt;k≤n 且 yi&gt;yj,yj&lt;yk，则称这三个点构成 V 图腾;        2.如果三个点 (i,yi),(j,yj),(k,yk) 满足 1≤i&lt;j&lt;k≤n 且 yi&lt;yj,yj&gt;yk，则称这三个点构成 ∧ 图腾;    Tag:        1.树状数组        2.线段树    思路：        1.暴力做法的话，就是每次遍历第 i 个数的左右两边比他大和比他小的数，          通过 lmax[i]*rmax[i] 和 lmin[i]*rmin[i] 即可得到答案，这样时间复杂度          为O(n^2)超时        2.考虑到数据范围为10^5，所以可以考虑用树状数组,            用数值大小代表下标，value为这个数值的出现个数            即index=value ,value =1          来表示[1，value-1]的个数也就是get_sum(value-1)          get_sum(maxn)-get_sum(value) 表示[value+1,maxn]的个数           左右各遍历一遍即可          这样处理的时间复杂度就是O(nlogn) 区间查询+区间修改*/</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> value<span class="token punctuation">;</span>        index <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+=</span> tr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        index <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">lmin</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">lmax</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        lmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lmax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>maxx<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// f();</span>        <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll ans1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ll ans2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans2 <span class="token operator">+=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>lmin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans1 <span class="token operator">+=</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>lmax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">get_sum</span><span class="token punctuation">(</span>maxx<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ans2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谜一样的牛</title>
      <link href="/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/mi-yi-yang-de-niu/"/>
      <url>/2022/02/03/summary/acwing/suan-fa-ti-gao/shu-ju-jie-gou/xian-duan-shu-he-shu-zhuang-shu-zu/mi-yi-yang-de-niu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-27 04:46:50 * @LastEditTime: 2022-02-03 15:16:03 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/245/    244. 谜一样的牛    题目描述        有 n 头奶牛，已知它们的身高为 1∼n 且各不相同，但不知道每头奶牛的具体身高。        现在这 n 头奶牛站成一列，已知第 i 头牛前面有 Ai 头牛比它低，求每头奶牛的身高。    Tag:        1.思维题        2.前缀和        3.树状数组    思路：        1.从后往前枚举，必然只会有一个数满足条件，    下标: 1 2 3 4 5    样例  0 1 2 1 0 从后往前枚举，相当于选择第k个数用树状数组维护 1-n中 value=每个数前面比他低的个数，选了 u 那么u之后的每个数的value--                     1 2 3 4 5    前面比他低的数              0 1 2 3 4   d[5]必然是1                              0 0 1 2 3   d[4] 必然是3                             0 0 0 1 2   d[3] 必然是5                             0 0 0 1 0   d[2] 必然是4                              0 0 0 0 0   d[1] 必然是2        2.所以用树状数组维护这样一个前缀和使得修改和查询复杂度降低        3.在查找对应的第k个数的时候，因为满足单调性，所以可以用二分查找来降低查找复杂度*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">lowbit</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ans</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_sum</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2022/02/03/web/mysql/"/>
      <url>/2022/02/03/web/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-教程网站"><a href="#Mysql-教程网站" class="headerlink" title="Mysql 教程网站"></a>Mysql 教程网站</h2><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">Mysql菜鸟教程</a></p><h2 id="Mysql概述"><a href="#Mysql概述" class="headerlink" title="Mysql概述"></a>Mysql概述</h2><p>SQL(发音为字母S-Q-L或sequel)是结构化查询语言(Structured Query Language)的缩写</p><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><h4 id="关系型型数据库："><a href="#关系型型数据库：" class="headerlink" title="关系型型数据库："></a>关系型型数据库：</h4><ul><li>MySQL,Oracle,Sql Server, DB2, SQLite</li><li>通过表和表之间的，行和列之间的关系进行数据的存储 </li><li>例如 学员信息表</li></ul><h4 id="非关系型数据库："><a href="#非关系型数据库：" class="headerlink" title="非关系型数据库："></a>非关系型数据库：</h4><ul><li>RedisMongDB</li><li>通过存储对象自身的属性决定</li></ul><h3 id="DBMS（databasemassagesystem"><a href="#DBMS（databasemassagesystem" class="headerlink" title="DBMS（databasemassagesystem)"></a>DBMS（databasemassagesystem)</h3><ul><li>数据库的管理软件，科学有效的管理我的数据，获取和维护数据；</li><li>MySQL 就是关系型DBMS，运用SQL语言访问数据库的标准化语言.</li></ul><h2 id="MySQL-使用"><a href="#MySQL-使用" class="headerlink" title="MySQL 使用"></a>MySQL 使用</h2><p>MySQL的命令对大小写都一样</p><p>MySQL以分号结尾</p><h3 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -p# -u ： 用户名# -p : 密码,注意-p和密码之间不要有空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="MAC下起别名"><a href="#MAC下起别名" class="headerlink" title="MAC下起别名"></a>MAC下起别名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加载.zshrc里面每次启动终端就会加载</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">mysql</span><span class="token operator">=</span>/usr/local/mysql/bin/mysql<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mysqladmin</span><span class="token operator">=</span>/usr/local/mysql/bin/mysqladmin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="line-numbers language-msyql" data-language="msyql"><code class="language-msyql">create database 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用-mysqladmin-创建数据库"><a href="#使用-mysqladmin-创建数据库" class="headerlink" title="使用 mysqladmin 创建数据库"></a>使用 mysqladmin 创建数据库</h4><p>使用普通用户，你可能需要特定的权限来创建或者删除 MySQL 数据库。</p><p>所以我们这边使用root用户登录，root用户拥有最高权限，可以使用 mysql <strong>mysqladmin</strong> 命令来创建数据库。</p><p>以下命令简单的演示了创建数据库的过程，数据名为 RUNOOB:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqladmin -u root -p create RUNOOB# 以上命令执行成功后会创建 MySQL 数据库 RUNOOB。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据库语言"><a href="#数据库语言" class="headerlink" title="数据库语言"></a>数据库语言</h3><p><code>DDL(data definition language）</code>: 数据定义语言</p><p><code>DML(data manage language)</code>:数据操作语言</p><p><code>DQL(data query language)</code>：数据查询语言</p><p><code>DCL(data control language)</code> :数据控制语言</p><h2 id="数据库的列类型"><a href="#数据库的列类型" class="headerlink" title="数据库的列类型"></a>数据库的列类型</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ol><li><p><code>tinyint</code>: 1字节</p></li><li><p><code>smallint</code>: 2字节</p></li><li><p><code>mediumint</code>: 3字节</p></li><li><p><code>int</code>: 4字节</p></li><li><p><code>bigint</code>： 8字节</p></li><li><p><code>double</code>： 浮点数 8字节</p></li><li><p><code>float</code> ：  浮点数 4字节</p></li><li><p><code>decimal</code> ： 字符串形式的浮点数。  金融计算的时候用</p></li></ol><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li><code>char</code>       固定大小0~255</li><li><code>varchar</code>    可变字符串  0~65535</li><li><code>tinytext</code>      微型文本          2^8-1</li><li><code>text</code>            文本             2^16-1</li></ol><hr><h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><ol><li><code>data</code> : YYYY-MM-DD 日期格式</li><li><code>Time</code> : HH ： mm : ss 时间格式</li><li><strong><code>datatime</code> : YYYY-MM-DD HH : mm : ss</strong> </li><li><code>timestamp </code> : 时间戳      1970.1.1到现在的毫秒数</li><li></li></ol><hr><h2 id="数据库的字段类型"><a href="#数据库的字段类型" class="headerlink" title="数据库的字段类型*"></a>数据库的字段类型*</h2><h3 id="Unsigned"><a href="#Unsigned" class="headerlink" title="Unsigned"></a>Unsigned</h3><ul><li><p>无符号的整数</p></li><li><p>声明了该列不能为负数</p></li></ul><h3 id="Zerofill"><a href="#Zerofill" class="headerlink" title="Zerofill"></a>Zerofill</h3><ul><li><p>0填充</p></li><li><p>不足的位数用0进行填充</p></li></ul><h3 id="Auto-increment-自增"><a href="#Auto-increment-自增" class="headerlink" title="Auto increment(自增)"></a>Auto increment(自增)</h3><ul><li>自动在上一条记录的基础上+1</li><li>通常用来设置唯一的主键</li></ul><p></p><h3 id="Decimals"><a href="#Decimals" class="headerlink" title="Decimals"></a>Decimals</h3><ul><li>默认值</li></ul><h3 id="Not-NUll"><a href="#Not-NUll" class="headerlink" title="Not NUll"></a>Not NUll</h3><ul><li>当前的属性不能为空，如果为空会报错</li></ul><h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h3><ul><li>主键</li><li>可以用来设置自增</li></ul><h2 id="MySQL数据库和表"><a href="#MySQL数据库和表" class="headerlink" title="MySQL数据库和表"></a>MySQL数据库和表</h2><h3 id="对Mysql数据库的操作"><a href="#对Mysql数据库的操作" class="headerlink" title="对Mysql数据库的操作"></a>对Mysql数据库的操作</h3><h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database if not exists 数据库名;表示如果不存在这个数据库创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter datebase 数据库名#设置字符集default character set utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop database if exists 数据库名;# 删除所有表包括其中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示当前拥有的数据库"><a href="#显示当前拥有的数据库" class="headerlink" title="显示当前拥有的数据库"></a>显示当前拥有的数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="转换数据库"><a href="#转换数据库" class="headerlink" title="转换数据库"></a>转换数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对Mysql表的操作"><a href="#对Mysql表的操作" class="headerlink" title="对Mysql表的操作"></a>对Mysql表的操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.创建现成的表语法这两个必填，其他可选CREATE TABLE IF NOT EXISTS (表名)(`字段名` 列类型（长度） [] [] [] [],    `字段名` 列类型（长度）[] [] [] [])[表类型][字符集]-------------------------------------------------# 1.创建现成的表实例CREATE TABLE IF NOT EXISTS `Student`(`id` int(4) NOT NULL auto_increment COMMENT '学号', `name` varchar(30),PRIMARY KEY(`id`) -- 设置主键)创建一个id列属性，列类型为int，长度为4，不能为空值（NOT NULL），自增（auto_increment）注释（comment）创建了一个name列属性，列类型为varchar，长度为30，其他配置全为NULL# 2.复制表#2.1 复制表结构,包含主键外键，不包含内容create table 表名 like 表名; #2.2 复制表表结构,包含内容，不包含主键外键create table 表名 as select * from 表名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><ul><li>add</li><li>modify </li><li>change 列名 原列名</li><li>drop column 列名</li><li>rename to 新表名</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ALTER(变更) ： 添加类型-- 添加列类型ALTER table  表名 ADD sex varchar(30) COMMENT 注释;-- 删除列类型alter table 表名 drop column 列名;-- 修改列名alter table 列名 rename to 列名-- 修改列类型ALTER table 表名 MODIFY column 列名 enum('男','女') not null default '男';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table if exists 表名;-- 该命令会将表的描述，完整性约束，索引以及相关权限一并删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示当前数据库下所有的表"><a href="#显示当前数据库下所有的表" class="headerlink" title="显示当前数据库下所有的表"></a>显示当前数据库下所有的表</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对Mysql表内记录的操作"><a href="#对Mysql表内记录的操作" class="headerlink" title="对Mysql表内记录的操作"></a>对Mysql表内记录的操作</h3><h4 id="Mysql表的插入记录"><a href="#Mysql表的插入记录" class="headerlink" title="Mysql表的插入记录"></a>Mysql表的插入记录</h4><h5 id="插入新的记录"><a href="#插入新的记录" class="headerlink" title="插入新的记录"></a>插入新的记录</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- INSERT(插入) : 添加内容-- 没有指明列类型要按照对应列类型顺序，依次填入INSERT INTO `Student` VALUES (null,'小白','男');-- insert指定一个列类型多个value，value之间用逗号隔开INSERT INTO `Student` (`sex`) VALUES ('man'),('value');-- 指定多个列类型INSERT INTO `Student` (`name`,`sex`) VALUES ('xiaoyu','man'),('xiaola', 'woman');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从已有表中插入新纪录"><a href="#从已有表中插入新纪录" class="headerlink" title="从已有表中插入新纪录"></a>从已有表中插入新纪录</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名 select [列名] from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Mysql表的修改记录"><a href="#Mysql表的修改记录" class="headerlink" title="Mysql表的修改记录"></a>Mysql表的修改记录</h4><h5 id="替换旧记录"><a href="#替换旧记录" class="headerlink" title="替换旧记录"></a>替换旧记录</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">当插入一个记录，这个记录的主键在表中已经存在可以使用 replace 替代 insert 此时旧记录会被覆盖replace into `表名` values('','','');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改单个表"><a href="#修改单个表" class="headerlink" title="修改单个表"></a>修改单个表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 修改 table 为 `Student` 的`id`=1 的`name`UPDATE `Student` set `name`= 'xiaoll' where `id`=1;-- 不指定条件，会改动所有表； 这个时候你的数据库就废了UPDATE `Student` SET `name`= "xx";-- 修改多个属性之间要用逗号隔开UPDATE `Student` SET  `name`='xiaoll', `sex` = 'woman' WHERE `sex`='man';-- 语法UPDATA 表名 SET 列名 = 值 , 列名 = 值  WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改多个表"><a href="#修改多个表" class="headerlink" title="修改多个表"></a>修改多个表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名1,表名2  set 表名1.列名=值,表名2.列名=值 where 条件；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Mysql表的删除记录"><a href="#Mysql表的删除记录" class="headerlink" title="Mysql表的删除记录"></a>Mysql表的删除记录</h4><h5 id="删除满足条件的行"><a href="#删除满足条件的行" class="headerlink" title="删除满足条件的行"></a>删除满足条件的行</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法delete from `表名` where 条件;-- 例子delete from `Student` WHERE `id` &lt; 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从多个表中删除行"><a href="#从多个表中删除行" class="headerlink" title="从多个表中删除行"></a>从多个表中删除行</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 语法delete 表名1,表名2 from 表名1.列名,表名2.列名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="消除表数据"><a href="#消除表数据" class="headerlink" title="消除表数据"></a>消除表数据</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 全部删完delete from `Student`;-- 删除一个数据库表，表的结构和索引约束不会变truncate `Student`;/* 使用delete 和 truncate的区别 delete 删除完 不会影响自增 truncate 删除完 自增会清零.*/`DELETE删除问题`，重启数据库，现象- InnoDB 自增列会从1 开始 （存在内存当中，断电即失）- MyISAM   继续从上一个自增量开始（存在文件当中不会丢失）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显示表中的结构"><a href="#显示表中的结构" class="headerlink" title="显示表中的结构"></a>显示表中的结构</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">describe [表名];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mysql查询和视图"><a href="#Mysql查询和视图" class="headerlink" title="Mysql查询和视图"></a>Mysql查询和视图</h2><h3 id="DML-Database-Manage-Language"><a href="#DML-Database-Manage-Language" class="headerlink" title="DML(Database Manage Language)"></a>DML(Database Manage Language)</h3><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select id,name,email from `Student ` where id = 1;-- 可以设置别名select id as s_id,name as s_name,email as s_email from `student` where id=1;-- 在jdbc连接中别名应该设置为对应类的属性名-- 列名为 id 也为 s_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h4><h5 id="where"><a href="#where" class="headerlink" title="where"></a>where</h5><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td></td><td></td><td></td></tr><tr><td>&lt; &gt; 或!=</td><td>不等于</td><td></td><td></td></tr><tr><td>&gt; , &lt; , &gt;= , &lt;=</td><td></td><td></td><td></td></tr><tr><td>and</td><td>&amp;&amp;</td><td></td><td></td></tr><tr><td>or</td><td>||</td><td></td><td></td></tr><tr><td>between····and···</td><td>范围</td><td>[2,5]</td><td></td></tr></tbody></table><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.查询若干列select 列名 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 同自身做连接select frist.age ,second.phonefrom student frist ,student secondwhere frist.name=second.name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL通配符过滤"><a href="#SQL通配符过滤" class="headerlink" title="SQL通配符过滤"></a>SQL通配符过滤</h2><ul><li><p><a href="https://www.runoob.com/sql/sql-wildcards.html">链接教程</a></p></li><li><p>在 SQL 中，通配符与 <strong>like</strong> 操作符一起使用实现模糊查询。</p></li></ul><table><thead><tr><th align="center">通配符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">%</td><td align="center">替代0个或多个字符</td></tr><tr><td align="center">_</td><td align="center">替代一个字符</td></tr><tr><td align="center">[charlist]</td><td align="center">字符列中的任何单一字符</td></tr><tr><td align="center">[^charlist]或者[!charlist]</td><td align="center">不再字符列中的任何单一字符</td></tr></tbody></table><h3 id="使用-SQL-通配符"><a href="#使用-SQL-通配符" class="headerlink" title="使用 SQL % 通配符"></a>使用 SQL % 通配符</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.SQL 语句选取 url 以字母 "https" 开始的所有网站</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> url <span class="token operator">LIKE</span> <span class="token string">'https%'</span><span class="token punctuation">;</span><span class="token comment">-- 2.SQL 语句选取 url 包含模式 "oo" 的所有网站</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> url <span class="token operator">LIKE</span> <span class="token string">'%oo%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-SQL-通配符-1"><a href="#使用-SQL-通配符-1" class="headerlink" title="使用 SQL _ 通配符"></a>使用 SQL _ 通配符</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 3.SQL 语句选取 name 以一个任意字符开始，然后是 "oogle" 的所有客户</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'_oogle'</span><span class="token punctuation">;</span><span class="token comment">-- 4.SQL 语句选取 name 以 "G" 开始，然后是一个任意字符，然后是 "o"，然后是一个任意字符，然后是 "le" 的所有网站：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'G_o_le'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQl-charlist"><a href="#SQl-charlist" class="headerlink" title="SQl[charlist]"></a>SQl[charlist]</h3><p>MySQL 中使用 <strong>REGEXP</strong> 或 <strong>NOT REGEXP</strong> 运算符 (或 RLIKE 和 NOT RLIKE) 来操作正则表达式。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.SQL 语句选取 name 以 "G"、"F" 或 "s" 开始的所有网站</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'^[GFs]'</span><span class="token punctuation">;</span><span class="token comment">-- 2.SQL 语句选取 name 以 A 到 H 字母开头的网站：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'^[A-H]'</span><span class="token punctuation">;</span><span class="token comment">-- 3.SQL 语句选取 name 不以 A 到 H 字母开头的网站：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Websites <span class="token keyword">WHERE</span> name <span class="token operator">REGEXP</span> <span class="token string">'^[!A-H]'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通配符总结"><a href="#通配符总结" class="headerlink" title="通配符总结"></a>通配符总结</h3><p>正如所见，MySQL的通配符很有用。但这种功能是有代价的:通配 符搜索的处理一般要比前面讨论的其他搜索所花时间更长。这里给出一 些使用通配符要记住的技巧。</p><ul><li><p>不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符。</p></li><li><p>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起 来是最慢的</p></li><li></li></ul><h2 id="正则表达式过滤"><a href="#正则表达式过滤" class="headerlink" title="正则表达式过滤"></a>正则表达式过滤</h2><p>regexp 表明是正则表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mysql过程汇总"><a href="#Mysql过程汇总" class="headerlink" title="Mysql过程汇总"></a>Mysql过程汇总</h2><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><h4 id="取别名"><a href="#取别名" class="headerlink" title="取别名"></a>取别名</h4><p> 在指定别名以包含某个聚集函数的结果时，不应该使 用表中实际的列名。虽然这样做并非不合法，但使用唯一的名 字会使你的SQL更易于理解和使用(以及将来容易排除故障)</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 单行注释/*多行注释*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方法一select version();#方法二,显示更加详细status;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use `database_name`-- 如果你的表名或者数据库名是一个特殊字符，用 `` 包起来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Css</title>
      <link href="/2022/02/03/ji-suan-ji-yu-yan-lei/css-main/css/"/>
      <url>/2022/02/03/ji-suan-ji-yu-yan-lei/css-main/css/</url>
      
        <content type="html"><![CDATA[<h2 id="css-教程网站"><a href="#css-教程网站" class="headerlink" title="css 教程网站"></a>css 教程网站</h2><p><a href="https://www.runoob.com/css/css-tutorial.html">css菜鸟教程</a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">onmouseover  <span class="token comment">//鼠标悬停</span>onmouseout<span class="token comment">//鼠标移开</span>cursor<span class="token comment">//光标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2022/01/30/ji-suan-ji-yu-yan-lei/java-main/fan-she-ji-zhi/"/>
      <url>/2022/01/30/ji-suan-ji-yu-yan-lei/java-main/fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="获得反射的对象"><a href="#获得反射的对象" class="headerlink" title="获得反射的对象"></a>获得反射的对象</h3><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>testreflect</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TestFlect * @Author mrl * @Date 2022/1/30 11:23 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFlect</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取反射类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//Class.forName("packege.Class") 路径Module为根目录</span>         <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.test.MassageReceive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ul><li><p>Class本身也是一个类</p></li><li><p>Class对象只能由系统建立对象</p></li><li><p>一个加载的类在JVM中只会有一个Cass实例</p></li><li><p>一个Class对象对应的是一个加载到JM中的个cs文件</p></li><li><p>每个类的实例都会记得自己是由哪个Cass实彻所生成</p></li><li><p>通过Cass可以完整地得到一个类中的所有被加载的结构</p></li><li><p>Class2类z是 Reflectione的根源，针对任何你想动态加载、运行的类，唯有先获得相应的<br>Classy时象</p></li></ul><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><ul><li><p><code>加载</code>：将cass文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lng. Class》对象.</p></li><li><p><code>链接</code>：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题</li><li>准备：正式为类变量（ static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul></li><li><p><code>初始化</code></p><ul><li>执行类构造器 clinit 方法的过程。类构造器 clinit 方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的 clinit 方法在多线程环境中被正确加锁和同步</li></ul></li></ul><h4 id="发生类的初始化"><a href="#发生类的初始化" class="headerlink" title="发生类的初始化"></a>发生类的初始化</h4><ul><li><p>类的主动引用（一定会发生类的初始化）</p><ul><li>当虚拟机启动，先初始化main方法所在的类neW一个类的对象</li><li>调用类的静态成员（除了 final常量）和静态方法使用ava.lang. reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化则先会初始化它的父类</li></ul></li><li><p>类的被动引用（不会发生类的初始化）</p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中力）</li></ul></li></ul><h3 id="类的加载器"><a href="#类的加载器" class="headerlink" title="类的加载器"></a>类的加载器</h3><h4 id="类的加载器作用"><a href="#类的加载器作用" class="headerlink" title="类的加载器作用"></a>类的加载器作用</h4><p><img src="/2022/01/30/ji-suan-ji-yu-yan-lei/java-main/fan-she-ji-zhi/image-20220130121737801.png" alt="image-20220130121737801"></p><h4 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>testreflect</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TestFlect * @Author mrl * @Date 2022/1/30 11:23 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFlect</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取反射类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//系统类的父类</span>        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//扩展类的父类</span>        <span class="token class-name">ClassLoader</span> parent <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//扩展类的父类 -&gt; 引导类</span>        <span class="token class-name">ClassLoader</span> parentParent <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parentParent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过反射获取类的完整结构"><a href="#通过反射获取类的完整结构" class="headerlink" title="通过反射获取类的完整结构"></a>通过反射获取类的完整结构</h3><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>testreflect</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TestFlect * @Author mrl * @Date 2022/1/30 11:23 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFlect</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取反射类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.testreflect.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.获取类名</span>        <span class="token comment">// getName() 包名 + 类名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// getSimpleName() 类名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取方法</span>        <span class="token comment">// getMethods() 本类及其Object的 public 方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// getDeclareMethods 本类及其Object的 所有方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//获取指定方法：因为存在重载函数，所以需要指明方法参数类型--parameterTypes</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//3.获取属性</span>        <span class="token comment">//getFields 获取本类的所有public属性</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//getDeclareFields 获取本类的所有属性</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token operator">+</span> declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//4.获取构造器</span>        <span class="token comment">//getConstructors 获取本类的public 构造器</span>        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//getDeclaredConstructors 获取所有构造器</span>        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token operator">+</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//获取指定构造器：因为存在重载构造器，需要指明构造器所需要的参数:parameterTypes,</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ol><li>在实际的操作中，取得类的信息的操作代码〉并不会经常开发。</li><li>一定要熟测java.lng. reflect包的作用，反射机制</li><li>如何取得属性、方法、构造器的名称，修饰符等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/01/29/ji-suan-ji-yu-yan-lei/c-main/c/"/>
      <url>/2022/01/29/ji-suan-ji-yu-yan-lei/c-main/c/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中的-inline"><a href="#C-中的-inline" class="headerlink" title="C++ 中的 inline"></a>C++ 中的 inline</h2><h3 id="引入inline关键字的原因"><a href="#引入inline关键字的原因" class="headerlink" title="引入inline关键字的原因"></a>引入inline关键字的原因</h3><p>在 c/c++ 中，为了解决一些频繁调用的小函数大量消耗栈空间（栈内存）的问题，特别的引入了 <strong>inline</strong> 修饰符，表示为内联函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span> <span class="token keyword">inline</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">num_check</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"奇"</span> <span class="token operator">:</span> <span class="token string">"偶"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d   %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">num_check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子就是标准的内联函数的用法，使用 <strong>inline</strong> 修饰带来的好处我们表面看不出来，其实，在内部的工作就是在每个 <strong>for</strong> 循环的内部任何调用 *<strong>dbtest(i)*</strong> 的地方都换成了 ***(i%2&gt;0)?”奇”:”偶”***，这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。</p><h3 id="inline使用限制"><a href="#inline使用限制" class="headerlink" title="inline使用限制"></a>inline使用限制</h3><p><strong>inline</strong> 的使用是有所限制的，inline 只适合涵数体内代码简单的涵数使用，不能包含复杂的结构控制语句例如 while、switch，并且不能内联函数本身不能是直接递归函数（即，自己内部还调用自己的函数）。</p><h3 id="inline仅是一个对编译器的建议"><a href="#inline仅是一个对编译器的建议" class="headerlink" title="inline仅是一个对编译器的建议"></a>inline仅是一个对编译器的建议</h3><p><strong>inline</strong> 函数仅仅是一个对编译器的建议，所以最后能否真正内联，看编译器的意思，它如果认为函数不复杂，能在调用点展开，就会真正内联，并不是说声明了内联就会内联，声明内联只是一个建议而已。</p><h3 id="建议-inline-函数的定义放在头文件中"><a href="#建议-inline-函数的定义放在头文件中" class="headerlink" title="建议 inline 函数的定义放在头文件中"></a>建议 inline 函数的定义放在头文件中</h3><p>其次，因为内联函数要在调用点展开，所以<strong>编译器必须随处可见内联函数的定义</strong>，要不然就成了非内联函数的调用了。所以，这要求每个调用了内联函数的文件都出现了该<strong>内联函数的定义</strong>。</p><p>因此，将<strong>内联函数的定义</strong>放在<strong>头文件</strong>里实现是合适的，省却你为每个文件实现一次的麻烦。</p><p><strong>声明跟定义要一致</strong>：如果在每个文件里都实现一次该内联函数的话，那么，最好保证每个定义都是一样的，否则，将会引起未定义的行为。如果不是每个文件里的定义都一样，那么，编译器展开的是哪一个，那要看具体的编译器而定。所以，最好将<strong>内联函数定义</strong>放在<strong>头文件</strong>中。</p><h3 id="inline-是一种”用于实现的关键字”"><a href="#inline-是一种”用于实现的关键字”" class="headerlink" title="inline 是一种”用于实现的关键字”"></a>inline 是一种”用于实现的关键字”</h3><p>关键字 <strong>inline</strong> 必须与函数定义体放在一起才能使函数成为内联，仅将 <strong>inline</strong> 放在函数声明前面不起任何作用。</p><p>如下风格的函数 <strong>Foo</strong> 不能成为内联函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inline 仅与函数声明放在一起</span><span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而如下风格的函数 <strong>Foo</strong> 则成为内联函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// inline 与函数定义体放在一起</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="慎用-inline"><a href="#慎用-inline" class="headerlink" title="慎用 inline"></a>慎用 inline</h3><p>内联能提高函数的执行效率，为什么不把所有的函数都定义成内联函数？如果所有的函数都是内联函数，还用得着”内联”这个关键字吗？<br>内联是以<strong>代码膨胀（复制）</strong>为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。<br>如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</p><p><strong>以下情况不宜使用内联：</strong> </p><ol><li>如果函数体内的代码<strong>比较长</strong>，使用内联将导致<strong>内存消耗代价较高</strong>。 </li><li>如果函数体内出现<strong>循环</strong>，那么执行函数体内代码的时间要比函数调用的开销大。</li></ol><p>类的构造函数和析构函数容易让人误解成使用内联更有效。要当心<strong>构造函数和析构函数可能会隐藏一些行为</strong>，如”偷偷地”执行了<strong>基类或成员对象</strong>的构造函数和析构函数。所以<strong>不要随便地将构造函数和析构函数的定义体放在类声明中</strong>。一个好的编译器将会根据函数的定义体，自动地取消不值得的内联（这进一步说明了 inline 不应该出现在函数的声明中）。</p><h2 id="预处理器"><a href="#预处理器" class="headerlink" title="预处理器"></a>预处理器</h2><h3 id="预处理器命令"><a href="#预处理器命令" class="headerlink" title="预处理器命令"></a>预处理器命令</h3><ol><li><code>#define</code> : 定义宏</li><li><code>#include</code> :  包含头文件</li><li><code>#undef</code> ： 取消已经定义的宏</li><li><code>#ifdef</code> : 如果宏已经定义，那么返回真</li><li><code>#ifndef</code> : 如果宏没有定义，那么返回真</li><li><code>#if</code> ： 如果给定的条件为真，则编译下面的代码</li><li><code>#else</code> : #if的替代方案</li><li><code>#elif</code> : 如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</li><li><code>#endif</code> : 结束一个 #if……#else 条件编译块</li><li><code>#error</code> : 当遇到标准错误时，输出错误消息</li><li><code>#pragma</code> : 使用标准化方法，向编译器发布特殊的命令到编译器中</li></ol><h3 id="2实例"><a href="#2实例" class="headerlink" title="2实例"></a>2实例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span>  <span class="token expression">FILE_SIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_SIZE</span> <span class="token expression"><span class="token number">42</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 取消已定义的 FILE_SIZE，并定义它为 42。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MESSAGE</span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MESSAGE</span> <span class="token string">"You wish!"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 只有当 MESSAGE 未定义时，才定义 MESSAGE。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>   <span class="token comment">/* Your debugging statements here */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个指令告诉 CPP 如果定义了 DEBUG，则执行处理语句。在编译时，如果您向 gcc 编译器传递了 <em>-DDEBUG</em> 开关量，这个指令就非常有用。它定义了 DEBUG，您可以在编译期间随时开启或关闭调试。</p><h3 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h3><ol><li><code>__DATE__</code> : 当前日期，一个以 “MMM DD YYYY” 格式表示的字符常量。</li><li><code>__TIME__</code> : 当前时间，一个以 “HH:MM:SS” 格式表示的字符常量。</li><li><code>__FILE__</code> : 这会包含当前文件名，一个字符串常量。</li><li><code>__LINE__</code> :  这会包含当前行号，一个十进制常量。</li><li><code>__STDC__</code> : 当编译器以 ANSI 标准编译时，则定义为 1。</li></ol><h3 id="预处理器运算符"><a href="#预处理器运算符" class="headerlink" title="预处理器运算符"></a>预处理器运算符</h3><ul><li><p>宏延续运算符（\）</p><ul><li>一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（\），例如</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">message_for</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" and "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">": We love you!\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>字符串常量化运算符（#）</p><ul><li>在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。在宏中使用的该运算符有一个特定的参数或参数列表,例如</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name function">message_for</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span>#a </span><span class="token string">" and "</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">b</span> </span></span><span class="token string">": We love you!\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">message_for</span><span class="token punctuation">(</span>Carole<span class="token punctuation">,</span> Debra<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//运行结果： Carole and Debra: We love you!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>标记粘贴运算符（##）</p><ul><li>宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。例如：</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">tokenpaster</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">printf</span> <span class="token punctuation">(</span></span><span class="token string">"token"</span> <span class="token expression"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">n</span> </span></span><span class="token string">" = %d"</span><span class="token expression"><span class="token punctuation">,</span> token</span><span class="token punctuation">##</span><span class="token expression">n<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> token34 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>      <span class="token function">tokenpaster</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//运行结果： token34 = 40</span><span class="token comment">//等价于 ： printf ("token34 = %d", token34);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数化的宏"><a href="#参数化的宏" class="headerlink" title="参数化的宏"></a>参数化的宏</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">square</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CPP 一个强大的功能是可以使用参数化的宏来模拟函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Max between 20 and 10 is %d\n"</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用带有参数的宏之前，必须使用 <strong>#define</strong> 指令定义。参数列表是括在圆括号内，且必须紧跟在宏名称的后边。宏名称和左圆括号之间不允许有空格</p><h2 id="C-面向对象"><a href="#C-面向对象" class="headerlink" title="C++ 面向对象"></a>C++ 面向对象</h2><h4 id="c-类"><a href="#c-类" class="headerlink" title="c++ 类"></a>c++ 类</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token comment">//共有属性</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Animal</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Animal</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> hight<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//私有属性</span><span class="token keyword">private</span><span class="token operator">:</span>z    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> hight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//构造函数</span><span class="token comment">//1.构造函数写法一</span><span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token function">Animal</span><span class="token punctuation">(</span>string name <span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token keyword">int</span> hight<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-&gt;</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-&gt;</span>hight <span class="token operator">=</span> hight<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//2.构造函数写法二</span><span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token function">Animal</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//析构函数</span><span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"回收资源"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//类方法的实现</span>string <span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token class-name">Animal</span><span class="token double-colon punctuation">::</span><span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Animal <span class="token function">animal</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> animal<span class="token punctuation">.</span><span class="token function">get_age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> animal<span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义和实现方法，构造函数分开，养成良好编程习惯</li></ol><h2 id="C-进阶"><a href="#C-进阶" class="headerlink" title="C++ 进阶"></a>C++ 进阶</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><h4 id="引入命名空间的原因"><a href="#引入命名空间的原因" class="headerlink" title="引入命名空间的原因"></a>引入命名空间的原因</h4><p>您可能会写一个名为 xyz() 的函数，在另一个可用的库中也存在一个相同的函数 xyz()。这样，编译器就无法判断您所使用的是哪一个 xyz() 函数。</p><p>因此，引入了<strong>命名空间</strong>这个概念，专门用于解决上面的问题，它可作为附加信息来区分不同库中相同名称的函数、类、变量等。</p><h4 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">// 第一个命名空间</span><span class="token keyword">namespace</span> first_space<span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inside first_space"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二个命名空间</span><span class="token keyword">namespace</span> second_space<span class="token punctuation">{</span>   <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inside second_space"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 调用第一个命名空间中的函数</span>   first_space<span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用第二个命名空间中的函数</span>   second_space<span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="using-指令"><a href="#using-指令" class="headerlink" title="using 指令"></a>using 指令</h4><p>您可以使用 <strong>using namespace</strong> 指令，这样在使用命名空间时就可以不用在前面加上命名空间的名称。这个指令会告诉编译器，后续的代码将使用指定的命名空间中的名称。</p><h4 id="不连续的命名空间"><a href="#不连续的命名空间" class="headerlink" title="不连续的命名空间"></a>不连续的命名空间</h4><p>命名空间可以定义在几个不同的部分中，因此命名空间是由几个单独定义的部分组成的。一个命名空间的各个组成部分可以分散在多个文件中。</p><p>所以，如果命名空间中的某个组成部分需要请求定义在另一个文件中的名称，则仍然需要声明该名称。下面的命名空间定义可以是定义一个新的命名空间，也可以是为已有的命名空间增加新的元素：</p><h4 id="嵌套的命名空间"><a href="#嵌套的命名空间" class="headerlink" title="嵌套的命名空间"></a>嵌套的命名空间</h4><p>命名空间可以嵌套，您可以在一个命名空间中定义另一个命名空间，如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> namespace_name1 <span class="token punctuation">{</span>   <span class="token comment">// 代码声明</span>   <span class="token keyword">namespace</span> namespace_name2 <span class="token punctuation">{</span>      <span class="token comment">// 代码声明</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以通过使用 :: 运算符来访问嵌套的命名空间中的成员：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 访问 namespace_name2 中的成员</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> namespace_name1<span class="token double-colon punctuation">::</span>namespace_name2<span class="token punctuation">;</span> <span class="token comment">// 访问 namespace:name1 中的成员</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> namespace_name1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="补充笔记"><a href="#补充笔记" class="headerlink" title="补充笔记"></a>补充笔记</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">namespace</span> A<span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">namespace</span> B            <span class="token comment">//嵌套一个命名空间B</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//定义一个全局变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"A::a ="</span><span class="token operator">&lt;&lt;</span> A<span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"A::B::a ="</span><span class="token operator">&lt;&lt;</span>A<span class="token double-colon punctuation">::</span>B<span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"a ="</span><span class="token operator">&lt;&lt;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"::a ="</span><span class="token operator">&lt;&lt;</span><span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"a ="</span><span class="token operator">&lt;&lt;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"::a ="</span><span class="token operator">&lt;&lt;</span><span class="token double-colon punctuation">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*A::a =100  A::B::a =20a =200      ::a =200//全局变量aa =30       //局部变量a::a =200  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即全局变量 a 表达为 <strong>::a</strong></p><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><p><a href="https://www.runoob.com/cplusplus/cpp-templates.html">模版</a></p><h4 id="模版的模式"><a href="#模版的模式" class="headerlink" title="模版的模式"></a>模版的模式</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">type</span><span class="token operator">&gt;</span> ret<span class="token operator">-</span>type func<span class="token operator">-</span><span class="token function">name</span><span class="token punctuation">(</span>parameter list<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 函数的主体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>好处就是支持泛型</li></ol><h4 id="函数实战"><a href="#函数实战" class="headerlink" title="函数实战"></a>函数实战</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> T  <span class="token function">qpow</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span>    T ans <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> ans<span class="token operator">=</span>ans<span class="token operator">*</span>a<span class="token punctuation">;</span>        b<span class="token operator">&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token operator">*=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类实战"><a href="#类实战" class="headerlink" title="类实战"></a>类实战</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span><span class="token operator">:</span>     vector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> elems<span class="token punctuation">;</span>     <span class="token comment">// 元素 </span>   <span class="token keyword">public</span><span class="token operator">:</span>     <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入栈</span>    <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 出栈</span>    T <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>            <span class="token comment">// 返回栈顶元素</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>       <span class="token comment">// 如果为空则返回真。</span>        <span class="token keyword">return</span> elems<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">push</span> <span class="token punctuation">(</span>T <span class="token keyword">const</span><span class="token operator">&amp;</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 追加传入元素的副本</span>    elems<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">pop</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>elems<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">"Stack&lt;&gt;::pop(): empty stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">// 删除最后一个元素</span>    elems<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T <span class="token class-name">Stack</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">top</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>elems<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">"Stack&lt;&gt;::top(): empty stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment">// 返回最后一个元素的副本 </span>    <span class="token keyword">return</span> elems<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><h4 id="结构体重载排序关系"><a href="#结构体重载排序关系" class="headerlink" title="结构体重载排序关系"></a>结构体重载排序关系</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token comment">//重载&lt;运算符</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">//小根堆</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">&gt;</span> x<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">//大根堆</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类中重载-x3D-运算符"><a href="#类中重载-x3D-运算符" class="headerlink" title="类中重载 = 运算符"></a>类中重载 = 运算符</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>X <span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> X <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>X obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">;</span>obj1 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>          <span class="token comment">//调用重载“=”</span>obj1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用重载“=”</span>obj1 <span class="token operator">=</span> obj2 <span class="token operator">=</span> obj3<span class="token punctuation">;</span>    <span class="token comment">//调用重载“=”</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类中重载-和-运算符"><a href="#类中重载-和-运算符" class="headerlink" title="类中重载 [] 和 () 运算符"></a>类中重载 [] 和 () 运算符</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X::operator("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X::operator("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X::operator["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X::operator["</span> <span class="token operator">&lt;&lt;</span> cp <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    X obj<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">"abcd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="隐函数写法"><a href="#隐函数写法" class="headerlink" title="隐函数写法"></a>隐函数写法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1.</span><span class="token keyword">auto</span> dfs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.</span> function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>dfs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>s<span class="token comment">//对2格式就是</span>function<span class="token operator">&lt;</span>返回值<span class="token punctuation">(</span>参数类型，参数类型<span class="token punctuation">)</span><span class="token operator">&gt;</span> 函数名称<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>参数，参数<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/01/29/ji-suan-ji-yu-yan-lei/javascript-main/javascript/"/>
      <url>/2022/01/29/ji-suan-ji-yu-yan-lei/javascript-main/javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript教程网站"><a href="#JavaScript教程网站" class="headerlink" title="JavaScript教程网站"></a>JavaScript教程网站</h2><p><a href="https://www.runoob.com/js/js-tutorial.html">JavaScript</a></p><h2 id="JavaScript-语法关键词"><a href="#JavaScript-语法关键词" class="headerlink" title="JavaScript 语法关键词"></a>JavaScript 语法关键词</h2><h3 id="JavaScript-语句标识符"><a href="#JavaScript-语句标识符" class="headerlink" title="JavaScript 语句标识符"></a>JavaScript 语句标识符</h3><p><img src="/2022/01/29/ji-suan-ji-yu-yan-lei/javascript-main/javascript/image-20220201202950685.png" alt="image-20220201202950685"></p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//下面的两行代码是等效的</span><span class="token keyword">var</span> person<span class="token operator">=</span><span class="token string">"runoob"</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p>您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好 \世界!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p><p>1.string</p><ul><li>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> carname<span class="token operator">=</span><span class="token string">"Volvo XC60"</span><span class="token punctuation">;</span><span class="token keyword">var</span> carname<span class="token operator">=</span><span class="token string">'Volvo XC60'</span><span class="token punctuation">;</span><span class="token comment">//您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</span><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">"It's alright"</span><span class="token punctuation">;</span><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">"He is called 'Johnny'"</span><span class="token punctuation">;</span><span class="token keyword">var</span> answer<span class="token operator">=</span><span class="token string">'He is called "Johnny"'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.Number</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x1<span class="token operator">=</span><span class="token number">34.00</span><span class="token punctuation">;</span>      <span class="token comment">//使用小数点来写</span><span class="token keyword">var</span> x2<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">;</span>         <span class="token comment">//不使用小数点来写</span><span class="token comment">//极大或极小的数字可以通过科学（指数）计数法来书写：</span><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">123e5</span><span class="token punctuation">;</span>      <span class="token comment">// 12300000</span><span class="token keyword">var</span> z<span class="token operator">=</span><span class="token number">123e-5</span><span class="token punctuation">;</span>     <span class="token comment">// 0.00123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.Boolean</p><p>布尔（逻辑）只能有两个值：true 或 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.Symbol</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>var a=[1,2,3,4,5,];</p><h5 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h5><ol><li><p><code>indexOf(index)</code> </p></li><li><p><code>slice(index,(count))</code> : 截取字符串，返回新数组</p></li><li><p><code>push(var,var,var)</code>: 可以任意多个（尾部）</p></li><li><p><code>pop()</code> ：（尾部）</p></li><li><p><code>unshift</code> : （头部）</p></li><li><p><code>shift</code> : （头部）弹出</p></li><li><p><code>concat([])</code> :连接数组， 返回新数组;</p></li><li><p><code>join()</code> : 链接符，通过参数字符连接数组打印</p></li></ol><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><h3 id="不含任何值的数据类型"><a href="#不含任何值的数据类型" class="headerlink" title="不含任何值的数据类型"></a>不含任何值的数据类型</h3><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><h4 id="undefinede"><a href="#undefinede" class="headerlink" title="undefinede"></a>undefinede</h4><h2 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><p>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 <strong>name:value</strong> 对呈现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Fiat"</span><span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">"white"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="对象定义"><a href="#对象定义" class="headerlink" title="对象定义"></a>对象定义</h3><p>定义 JavaScript 对象可以跨越多行，空格跟换行不是必须的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"Doe"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token literal-property property">eyeColor</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//通过 person.firstName 访问属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><p>可以说<code> "JavaScript 对象是变量的容器"</code>。</p><p>但是，我们通常认为 “JavaScript 对象是键值对的容器”。</p><p>键值对通常写法为 <strong>name : value</strong> (键与值以冒号分割)。</p><p>键值对在 JavaScript 对象通常称为 <strong>对象属性</strong>。</p><p>对象键值对的写法类似于：</p><ul><li>PHP 中的关联数组</li><li>Python 中的字典</li><li>C 语言中的哈希表</li><li>Java 中的哈希映射</li><li>Ruby 和 Perl 中的哈希表</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"Doe"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span>    <span class="token literal-property property">eyeColor</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//访问对象属性</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token literal-property property">eyeColor</span><span class="token operator">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>        <span class="token function-variable function">sout</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//不加括号输出函数表达式 person.sout</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"不加括号输出函数表达式："</span>  <span class="token operator">+</span> person<span class="token punctuation">.</span>sout<span class="token punctuation">;</span><span class="token comment">//加括号输出函数执行结果 person.sout()</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"加括号输出函数执行结果："</span>  <span class="token operator">+</span>  person<span class="token punctuation">.</span>sou <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 执行代码</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>job</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", the "</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//带返回值</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token comment">//在JS方法中return返回多个值</span><span class="token keyword">function</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span>  a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">var</span>  b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token keyword">var</span>  c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//返回格式</span> <span class="token punctuation">}</span><span class="token comment">/*使用时这样获取,例如获取a：    parent()[0];    获取b:           parent()[1];以此类推！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>点击这个按钮，来调用带参数的函数。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"myFunction('Harry Potter','Wizard')"</span><span class="token operator">&gt;</span>点击这里<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token comment">//变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>job</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", the "</span> <span class="token operator">+</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在 JavaScript 函数内部声明的变量是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p><p>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。</p><p>只要函数运行完毕，本地变量就会被删除。</p><hr><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在函数外声明的变量是<em>全局</em>变量，网页上的所有脚本和函数都能访问它。</p><hr><h3 id="变量的生存期"><a href="#变量的生存期" class="headerlink" title="变量的生存期"></a>变量的生存期</h3><p>JavaScript 变量的生命期从它们被声明的时间开始。</p><p>局部变量会在函数运行以后被删除。</p><p>全局变量会在页面关闭后被删除。</p><h3 id="let和var"><a href="#let和var" class="headerlink" title="let和var"></a>let和var</h3><p>通过var关键字声明的变量没有块作用域，在块{ }内声明的变量可以从块之外进行访问。</p><p>通过let关键字声明的变量拥有块作用域，在块{ }内声明的变量无法从块外访问</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//var是全局变量</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// 此处可以使用 x</span><span class="token comment">//let是局部变量</span><span class="token punctuation">{</span>   <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 此处不可以使用 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h2><h3 id="普通运算符"><a href="#普通运算符" class="headerlink" title="普通运算符"></a>普通运算符</h3><p><img src="/2022/01/29/ji-suan-ji-yu-yan-lei/javascript-main/javascript/image-20220201210522442.png" alt="image-20220201210522442"></p><hr><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><p>你可以使用 typeof 操作符来检测变量的数据类型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>                <span class="token comment">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>                  <span class="token comment">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>                 <span class="token comment">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token comment">// 返回 object</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">}</span> <span class="token comment">// 返回 object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="null-1"><a href="#null-1" class="headerlink" title="null"></a>null</h3><p>null是一个只有一个值的特殊类型。表示一个空对象引用。</p><p>你可以设置为 null 来清空对象:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token comment">// 值为 null(空), 但类型为对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>在 JavaScript 中, <strong>undefined</strong> 是一个没有设置值的变量。</p><p><strong>typeof</strong> 一个没有值的变量会返回 <strong>undefined</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person<span class="token punctuation">;</span>                  <span class="token comment">// 值为 undefined(空), 类型是undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任何变量都可以通过设置值为 <strong>undefined</strong> 来清空。 类型为 <strong>undefined</strong>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>          <span class="token comment">// 值为 undefined, 类型是undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="null和undefinede"><a href="#null和undefinede" class="headerlink" title="null和undefinede"></a>null和undefinede</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//null 和 undefined 的值相等，但类型不等：</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span>             <span class="token comment">// undefined</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>                  <span class="token comment">// object</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>           <span class="token comment">// false</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>            <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ol><li><p>undefined：是所有没有赋值变量的默认值，自动赋值。</p></li><li><p>null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</p></li></ol><h4 id="何时使用null"><a href="#何时使用null" class="headerlink" title="何时使用null?"></a>何时使用null?</h4><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null。</p><h4 id="null-与-undefined-的异同点"><a href="#null-与-undefined-的异同点" class="headerlink" title="null 与 undefined 的异同点"></a>null 与 undefined 的异同点</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>都是原始类型，保存在栈中变量本地。</p><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ol><li>undefined——表示变量声明过但并未赋过值。它是所有未赋值变量默认值，例如：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span>    <span class="token comment">// a 自动被赋值为 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>null——表示一个变量将来可能指向一个对象。一般用于主动释放指向对象的引用，例如：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> emps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ss'</span><span class="token punctuation">,</span><span class="token string">'nn'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>emps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token comment">// 释放指向数组的引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JavaScript-变量提升"><a href="#JavaScript-变量提升" class="headerlink" title="JavaScript 变量提升"></a>JavaScript 变量提升</h2><h3 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h3><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。</p><p>JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。</p><p>以下两个实例将获得相同的结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 变量 x 设置为 5</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找元素</span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span>                     <span class="token comment">// 在元素中显示 x</span><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// 声明 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// 声明 x</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 变量 x 设置为 5</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找元素</span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x<span class="token punctuation">;</span>                     <span class="token comment">// 在元素中显示 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="初始化不会提升"><a href="#初始化不会提升" class="headerlink" title="初始化不会提升"></a>初始化不会提升</h3><p>JavaScript 只有声明的变量会提升，初始化的不会。</p><p>以下两个实例结果结果不相同：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 x</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 y</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找元素</span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>           <span class="token comment">// 显示 x 和 y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 x</span>elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查找元素</span>elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>           <span class="token comment">// 显示 x 和 y</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p> JavaScript 严格模式(strict mode)不允许使用未声明的变量。</p><h2 id="JavaScript-严格模式"><a href="#JavaScript-严格模式" class="headerlink" title="JavaScript 严格模式"></a>JavaScript 严格模式</h2><h3 id="use-strict"><a href="#use-strict" class="headerlink" title="use strict"></a>use strict</h3><p>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增。</p><p>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略。</p><p>“use strict” 的目的是指定代码在严格条件下执行。</p><p>严格模式下你不能使用未声明的变量。</p><hr><h3 id="严格模式声明"><a href="#严格模式声明" class="headerlink" title="严格模式声明"></a>严格模式声明</h3><p>严格模式通过在脚本或函数的头部添加 <strong>use strict</strong>; 表达式来声明。</p><hr><h3 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h3><ol><li>不允许使用未声明的变量：</li><li>不允许删除变量或对象。</li><li>不允许变量重名:</li><li>不允许使用八进制:</li><li>不允许使用转义字符:</li><li>不允许对只读属性赋值:</li><li>不允许对一个使用getter方法读取的属性进行赋值</li><li></li></ol><hr><h3 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h3><p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留关键字：</p><ul><li>implements</li><li>interface</li><li>let</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li><li>yield</li></ul><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//网页加载就绑定如下函数</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> comTable <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"commodity_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rows <span class="token operator">=</span> comTable<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>rows<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tr <span class="token operator">=</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>onmouseover<span class="token operator">=</span>showBGcolor<span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>onmouseout<span class="token operator">=</span>hideBGcolor<span class="token punctuation">;</span>        <span class="token keyword">var</span> cells <span class="token operator">=</span>tr<span class="token punctuation">.</span>cells<span class="token punctuation">;</span>        <span class="token keyword">var</span> price <span class="token operator">=</span> cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        price<span class="token punctuation">.</span>onmouseover<span class="token operator">=</span>showHand<span class="token punctuation">;</span>        price<span class="token punctuation">.</span>onclick<span class="token operator">=</span>editPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showBGcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>tagName<span class="token operator">==</span><span class="token string">"TD"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> td<span class="token operator">=</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>        <span class="token keyword">var</span> tr<span class="token operator">=</span> td<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span> <span class="token string">"navy"</span><span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span>  <span class="token string">"white"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">hideBGcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>tagName<span class="token operator">==</span><span class="token string">"TD"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> td<span class="token operator">=</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>        <span class="token keyword">var</span> tr<span class="token operator">=</span>td<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span><span class="token string">"transparent"</span><span class="token punctuation">;</span>        tr<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">showHand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>tagName<span class="token operator">==</span><span class="token string">"TD"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> td<span class="token operator">=</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>        td<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor<span class="token operator">=</span> <span class="token string">"pointer"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">editPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>srcElement<span class="token operator">&amp;&amp;</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>tagName<span class="token operator">==</span><span class="token string">"TD"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> priceTD <span class="token operator">=</span>event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>        <span class="token comment">//nodeType ==3是Text   ==1 是Element node</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>priceTD<span class="token punctuation">.</span>firstChild<span class="token operator">&amp;&amp;</span>priceTD<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>nodeType<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> oldPrice <span class="token operator">=</span>priceTD<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>            priceTD<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"&lt;input type='text' size='4'/&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> input <span class="token operator">=</span> priceTD<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>tagName <span class="token operator">==</span><span class="token string">"INPUT"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                input<span class="token punctuation">.</span>value<span class="token operator">=</span> oldPrice<span class="token punctuation">;</span>                input<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//绑定输入框失去焦点事件</span>                input<span class="token punctuation">.</span>onblur<span class="token operator">=</span>updatePrice<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updatePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>srcElement <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">"INPUT"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> input <span class="token operator">=</span> event<span class="token punctuation">.</span>srcElement<span class="token punctuation">;</span>        <span class="token keyword">var</span> newPrice <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">var</span> priceTD <span class="token operator">=</span> input<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>        priceTD<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newPrice<span class="token punctuation">;</span>        <span class="token function">updataXJ</span><span class="token punctuation">(</span>priceTD<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updataXJ</span><span class="token punctuation">(</span><span class="token parameter">tr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token operator">&amp;&amp;</span>tr<span class="token punctuation">.</span>tagName<span class="token operator">==</span><span class="token string">"TR"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> tds <span class="token operator">=</span> tr<span class="token punctuation">.</span>cells<span class="token punctuation">;</span>        <span class="token keyword">var</span> price <span class="token operator">=</span> tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>        <span class="token keyword">var</span> count <span class="token operator">=</span> tds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>        <span class="token keyword">var</span> xj <span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">parseInt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> xjTD<span class="token operator">=</span>tds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        xjTD<span class="token punctuation">.</span>innerText<span class="token operator">=</span>xj<span class="token punctuation">;</span>        <span class="token function">updateSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> comTable <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"commodity_table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rows <span class="token operator">=</span>comTable<span class="token punctuation">.</span>rows<span class="token punctuation">;</span>    <span class="token keyword">var</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> rows<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> tr<span class="token operator">=</span>rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> xj<span class="token operator">=</span>tr<span class="token punctuation">.</span>cells<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>         sum<span class="token operator">=</span>sum<span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>xj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> lastTr<span class="token operator">=</span> rows<span class="token punctuation">[</span>rows<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sumTD<span class="token operator">=</span>lastTr<span class="token punctuation">.</span>cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    sumTD<span class="token punctuation">.</span>innerText<span class="token operator">=</span>sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zcss.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zjs.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container_div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>commodity_div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>commodity_table<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token punctuation">&gt;</span></span>单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>小计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">&gt;</span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">&gt;</span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span>  <span class="token punctuation">&gt;</span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>2500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>总计<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_add_div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#container_div</span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>    <span class="token comment">/*position: relative;*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#commodity_div</span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span>10%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#commodity_table</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>    <span class="token comment">/*background-color:antiquewhite;*/</span><span class="token punctuation">}</span><span class="token selector">#commodity_table,#commodity_table tr,#commodity_table th,#commodity_table td</span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span>    <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Helvetica Neue"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 <span class="token punctuation">;</span>    <span class="token comment">/*background-color: #808080;*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-String-对象"><a href="#JavaScript-String-对象" class="headerlink" title="JavaScript String 对象"></a>JavaScript String 对象</h2><h3 id="String对象属性"><a href="#String对象属性" class="headerlink" title="String对象属性"></a>String对象属性</h3><ul><li><p><code>constructor</code> : 对创建该对象的函数的引用</p></li><li><p><code>length</code> : 字符串的长度</p></li><li><p><code>prototype</code> : 允许你向对象添加属性和方法</p></li></ul><h2 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>prototype 属性允许您向对象添加属性和方法</p><p><strong>注意：</strong> Prototype 是全局属性，适用于所有的 Javascript 对象。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name<span class="token operator">=</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">employee</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>jobtitle<span class="token punctuation">,</span>born</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>jobtitle<span class="token operator">=</span>jobtitle<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>born<span class="token operator">=</span>born<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> fred<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">employee</span><span class="token punctuation">(</span><span class="token string">"Fred Flintstone"</span><span class="token punctuation">,</span><span class="token string">"Caveman"</span><span class="token punctuation">,</span><span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往employee添加了salary属性</span>employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>salary<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>fred<span class="token punctuation">.</span>salary<span class="token operator">=</span><span class="token number">20000</span><span class="token punctuation">;</span><span class="token comment">//往employee添加了toCDB方法</span>employee<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toCDB</span><span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fred<span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><table><thead><tr><th align="center">/g</th><th align="center">全局匹配(global)</th></tr></thead><tbody><tr><td align="center">/i</td><td align="center">忽略大小写(ignore)</td></tr><tr><td align="center">/m</td><td align="center">多行匹配(multi)</td></tr></tbody></table><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th align="center">/\w</th><th align="center">数字，字母，下划线 =》[a-zA-Z0-9_]</th></tr></thead><tbody><tr><td align="center">/\s</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/27/readme/"/>
      <url>/2022/01/27/readme/</url>
      
        <content type="html"><![CDATA[<h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1904. 奶牛慢跑</title>
      <link href="/2022/01/27/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1904.nai-niu-man-pao/"/>
      <url>/2022/01/27/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1904.nai-niu-man-pao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T <span class="token function">get_pow</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">,</span> T p<span class="token punctuation">)</span><span class="token punctuation">{</span>    T res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">*=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1906/    1904. 奶牛慢跑    题目描述：        有 N 头奶牛在无限长的单行道上慢跑，且跑步方向为坐标值增大的方向。        每头奶牛在跑道上开始奔跑的位置互不相同，一些奶牛的奔跑速度可能相同，也可能不同。        由于跑道是单行道，十分狭窄，奶牛们无法相互超越。        当一头速度很快的牛追上另一头牛时，她必须减速至与另一头牛速度相同以免发生碰撞，并成为同一跑步小组的一员。此时，两头牛可以视为在同一点上。        最终，再也没有奶牛会撞到（追上）其他奶牛了。        约翰想知道在这种情况下，会剩下多少个跑步小组。    Tag:        1.单调栈        2.思维题     思路        1.从后往前枚举速度，速度必然是以后面的最小速度为同一跑步小组，就会把前面的速度同步为后面的最小速度，所以只需要比较当前的速度和后面的最小速度的大小        2.单调栈，从前往后，如果一个速度小，那么它之前所有的速度必然会变成以他为基础，所以就用栈把它之前比当前速度大的全部弹出。最后栈里留下的就是以不同速度为基础的跑步小组，答案就是栈的大小*/</span><span class="token comment">//1.</span><span class="token keyword">void</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">,</span> speed<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> index <span class="token operator">&gt;&gt;</span> speed<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> speed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            v <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//2.单调栈</span><span class="token keyword">void</span> <span class="token function">test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">,</span> speed<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> index <span class="token operator">&gt;&gt;</span> speed<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> speed<span class="token punctuation">)</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1913.公平摄影</title>
      <link href="/2022/01/23/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1913.gong-ping-she-ying/"/>
      <url>/2022/01/23/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1913.gong-ping-she-ying/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-22 01:50:07 * @LastEditTime: 2022-01-23 21:52:54 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/*    https://www.acwing.com/problem/content/1915/    1913. 公平摄影    题目描述：         1.一维数轴，保证一个连续的区间满足如下条件            1.两个品种的牛数量相同            2.全是一个品种的牛        求满足上述任一条件的区间最长长度    Tag：        1.前缀和        2.map    思路：        1.将一个状态变成1，另一个状态变成-1 ，然后求前缀和会发现，如果sum[l]=sum[r] ，那么[l+1,r]是平衡的串        2.用map记录这个前缀和第一次出现的位置即可        3.这个题目还要求求单个品种的牛的长度，        4.这题要注意的是判断map 中是否存在这个数要用 map.find(number)==map.end() 返回true表示找不到            这是因为在前缀和里面sum[0]=0,所以不可以用map[i]!=0来进行判断    位置     1 3 4 7 10 16            G H G G  H  G    前缀和 0 1 0 1 2  1  2    下标   0 1 2 3 4  5  6        位置      1 3             G H    前缀和 0  1 0    下标   0  1 2*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string opt<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> num <span class="token operator">&gt;&gt;</span> opt<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span> <span class="token string">"H"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans_all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans_h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans_g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last_h <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">int</span> last_g <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token comment">// G G G G G G G H H H H G G G</span>    m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token comment">//1.找一头牛的最长长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last_h <span class="token operator">==</span> INF<span class="token punctuation">)</span>                last_h <span class="token operator">=</span> index<span class="token punctuation">;</span>            ans_h <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_h<span class="token punctuation">,</span> index <span class="token operator">-</span> last_h<span class="token punctuation">)</span><span class="token punctuation">;</span>            last_g <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last_g <span class="token operator">==</span> INF<span class="token punctuation">)</span>                last_g <span class="token operator">=</span> index<span class="token punctuation">;</span>            ans_g <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_g<span class="token punctuation">,</span> index <span class="token operator">-</span> last_g<span class="token punctuation">)</span><span class="token punctuation">;</span>            last_h <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//2.找两头牛的最长长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans_all <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_all<span class="token punctuation">,</span> index <span class="token operator">-</span> m<span class="token punctuation">[</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ans_h <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_h<span class="token punctuation">,</span> ans_g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans_h <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        ans_h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_h<span class="token punctuation">,</span> ans_all<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>埃氏筛</title>
      <link href="/2022/01/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/ai-shi-shai/"/>
      <url>/2022/01/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/ai-shi-shai/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(nlogn)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Getprimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性筛</title>
      <link href="/2022/01/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/xian-xing-shai/"/>
      <url>/2022/01/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/xian-xing-shai/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(n)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> primes<span class="token punctuation">[</span>cnt <span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度乘法</title>
      <link href="/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-cheng-fa/"/>
      <url>/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-cheng-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mul</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//用t来表示前一位到本位的进位数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b <span class="token operator">+</span> t<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 高精度乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度除法</title>
      <link href="/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-chu-fa/"/>
      <url>/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-chu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">div</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        r <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">%=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 处理前导0 ;</span>        c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 高精度除法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度加法</title>
      <link href="/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-jia-fa/"/>
      <url>/2022/01/23/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-jia-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            r <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            r <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 高精度加法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1922. 懒惰的牛</title>
      <link href="/2022/01/22/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/acwing-1922.lan-duo-de-niu/"/>
      <url>/2022/01/22/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/acwing-1922.lan-duo-de-niu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">rep</span><span class="token expression"><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/***** * 1922. 懒惰的牛 * https://www.acwing.com/problem/content/1924/ * 题目描述： *  一维数轴有n个包含 gi 单位的青草，位置坐标为 xi  *  与她的初始位置的距离不超过 K 时，才能吃到那片草地上的草。 *  选择最佳初始位置，求她可以吃到的青草最大数量。 * Tag： *  1.二分 *  2.滑动窗口 *  3.前缀和 * 思路： *  1.用二分的方法来做的话，就是首先对草进行求前缀和，对于每一个草的下标位置 i ,牛的最佳位置为 i+k, *    牛能够吃到的范围为[i,i+2k],在原数组中找到小于等于 i+2k 最大的下标index 就可以直接通过前缀和 *    sum[index]-sum[i-1]来算得[i,index]的区间和，因为前缀和是有序的所以可以用二分查找。 *  *  2.滑动窗口方法来做，到达一个草的位置i，牛能够吃到的最远位置为 i+2k，所以就变成了维护 [i,i+2k]这样 *    一个区间，首先对下标进行排序， *    如果新进入的下标大于队首i所能取到的最大值i+2k，说明此时超出区间，将队首弹出，不断维护这样一个队列 * *  *  */</span><span class="token comment">//1.二分</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">,</span> value<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> value <span class="token operator">&gt;&gt;</span> index<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> index<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxn <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> maxn<span class="token punctuation">)</span>                l <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//2.滑动窗口</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token function">g</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rep</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> b<span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">-=</span> g<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">CPPTEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 二分答案 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/01/20/ji-suan-ji-yu-yan-lei/java-main/wang-luo-bian-cheng/"/>
      <url>/2022/01/20/ji-suan-ji-yu-yan-lei/java-main/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络编程概述"><a href="#1-网络编程概述" class="headerlink" title="1.网络编程概述"></a>1.网络编程概述</h2><ul><li>计算机网络<ul><li>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息.共享硬件、软件、数据信息.等资源。</li></ul></li><li>网络编程的目的<ul><li>直接或间接地通过씨络协议与其它计算机实现数据交换，</li></ul></li><li>进行通讯网络编程中有两个主要的问题<ul><li>如何准确地定位络上一台或多台主机；定位主机上的特定的应用找到主机后如何可靠高效地进行数据传输</li></ul></li></ul><h2 id="2-网络通信要素概述"><a href="#2-网络通信要素概述" class="headerlink" title="2.网络通信要素概述"></a>2.网络通信要素概述</h2><h3 id="如何实现网络中的主机相互通信"><a href="#如何实现网络中的主机相互通信" class="headerlink" title="如何实现网络中的主机相互通信"></a>如何实现网络中的主机相互通信</h3><ul><li><p>通信双方地址</p><ul><li><p>IP</p></li><li><p>端口号</p></li></ul></li><li><p>一定的规则（即：网络通信协议。有两套参考模型）</p><ul><li><p>OSl参考模型：模型过于理想化，未能在因特网上进行广泛推广</p></li><li><p>TCP/P参考模型（或TCP/IP协议）：事实上的国际标准。</p></li></ul></li><li><p>网络通信协议</p></li><li><p><img src="/2022/01/20/ji-suan-ji-yu-yan-lei/java-main/wang-luo-bian-cheng/09bdce6b569fe3cf80206cc704dbf7cb.png" alt="09bdce6b569fe3cf80206cc704dbf7cb"></p></li><li><p><img src="/2022/01/20/ji-suan-ji-yu-yan-lei/java-main/wang-luo-bian-cheng/e769997523201f9fa4f83e501931e6e1.png" alt="e769997523201f9fa4f83e501931e6e1"></p></li></ul><h3 id="通信要素1-IP和端口号"><a href="#通信要素1-IP和端口号" class="headerlink" title="通信要素1 : IP和端口号"></a>通信要素1 : IP和端口号</h3><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><ul><li><p>IP 地址：InetAddress</p><ul><li>唯一的标识Internet 上的计算机（通信实体）</li><li>本地回环地址(hostAddress)：127.0.0.1 主机名(hostName)：localhost</li><li>IP地址分类方式1：IPV4和IPV6<br>- IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1<br>- IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li><li>IP地址分类方式2：公网地址(万维网使用)和私有地址(局域网使用)。192.168.开头的就是私有地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</li><li>特点：不易记忆</li></ul></li><li><p>Internet上的主机有两种方式表示地址：</p><ul><li><p>域名(hostName)：<a href="http://www.atguigu.com/">www.atguigu.com</a></p></li><li><p>IP地址(hostAddress)：202.108.35.210</p></li></ul></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>InetAddress类对象含有一个Internet主机地址的域名和IP地址：<a href="http://www.atguigu.com和202.108.35.210./">www.atguigu.com和202.108.35.210。</a></p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。——-域名解析</p></li><li><p><img src="/2022/01/20/ji-suan-ji-yu-yan-lei/java-main/wang-luo-bian-cheng/f0b20fc08bb3bd5b0aaff6131b11b428.png" alt="f0b20fc08bb3bd5b0aaff6131b11b428"></p></li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><h2 id="3-通信协议"><a href="#3-通信协议" class="headerlink" title="3.通信协议"></a>3.通信协议</h2><h2 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4.TCP"></a>4.TCP</h2><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Socket</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TestTcp * @Author mrl * @Date 2022/1/28 22:58 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTcp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TecTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocket</span> server_socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> input_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byte_array_output_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> output_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//1.创建ServerSocket对象</span>            server_socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.用接收的socket创建socket对象</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server_socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.创建InputStream读取内容</span>            input_stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.防止传输编码规则不一样乱码</span>            byte_array_output_stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input_stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                byte_array_output_stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byte_array_output_stream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//5.接收完毕，返回客户端结束</span>            output_stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> accept<span class="token operator">=</span><span class="token string">"我接受完毕,你可以断开了"</span><span class="token punctuation">;</span>            output_stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>accept<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//6.关闭资源</span>            server_socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            input_stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            byte_array_output_stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output_stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> output_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> input_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> byte_array_output_stream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//1.创建Socket对象</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.创建输出流</span>            output_stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.发送内容</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"我是客户端"</span><span class="token punctuation">;</span>            output_stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.发送完成，结束</span>            socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.接收服务端确认结束内容</span>            input_stream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            byte_array_output_stream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input_stream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                byte_array_output_stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>byte_array_output_stream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//4.关闭资源</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output_stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            byte_array_output_stream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-UDP"><a href="#5-UDP" class="headerlink" title="5.UDP"></a>5.UDP</h2><h3 id="5-1-UDP的简单应用"><a href="#5-1-UDP的简单应用" class="headerlink" title="5.1.UDP的简单应用"></a>5.1.UDP的简单应用</h3><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TestUDP * @Author mrl * @Date 2022/1/29 00:07 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUDP</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.开放数据报端口</span>        <span class="token class-name">DatagramSocket</span> datagram_socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.接收数据报</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> datagram_packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        datagram_socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagram_packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用数据报的getLength()获取长度</span>        <span class="token class-name">String</span> massage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>datagram_packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datagram_packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>datagram_packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>massage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">TestClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.建立DatagramSocket对象</span>        <span class="token class-name">DatagramSocket</span> datagram_socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.数据报内容</span>        <span class="token class-name">String</span> massage <span class="token operator">=</span> <span class="token string">"我是发送端"</span><span class="token punctuation">;</span>        <span class="token comment">//3.指定socket</span>        <span class="token class-name">InetAddress</span> inet_address <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>        <span class="token comment">//4.数据报</span>        <span class="token comment">//注意应该是 0 到 massage.getBytes().length</span>        <span class="token class-name">DatagramPacket</span> datagram_packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>massage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> massage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> inet_address<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.往目标socket发送数据报</span>        datagram_socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>datagram_packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-UDP实现在线聊天"><a href="#5-2-UDP实现在线聊天" class="headerlink" title="5.2.UDP实现在线聊天"></a>5.2.UDP实现在线聊天</h3><h5 id="MassageReceive代码"><a href="#MassageReceive代码" class="headerlink" title="MassageReceive代码"></a>MassageReceive代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramPacket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">DatagramSocket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">SocketException</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MassageReceive * @Author mrl * @Date 2022/1/29 02:21 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MassageReceive</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> ip_name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user_name<span class="token punctuation">;</span>    <span class="token class-name">DatagramSocket</span> datagram_socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MassageReceive</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> ip_name<span class="token punctuation">,</span> <span class="token class-name">String</span> user_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip_name <span class="token operator">=</span> ip_name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user_name <span class="token operator">=</span> user_name<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//1.开放端口</span>            datagram_socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">//2.接收数据报</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">DatagramPacket</span> datagram_packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                datagram_socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>datagram_packet<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//3.获取返回的数据报信息</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> re_data <span class="token operator">=</span> datagram_packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> massage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>re_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datagram_packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>massage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user_name <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> massage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="MassageSend代码"><a href="#MassageSend代码" class="headerlink" title="MassageSend代码"></a>MassageSend代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MassageSend * @Author mrl * @Date 2022/1/29 01:53 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MassageSend</span><span class="token generics"><span class="token punctuation">&lt;</span>inet_address<span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> in <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> to_port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> to_ip<span class="token punctuation">;</span>    <span class="token class-name">DatagramSocket</span> datagram_socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MassageSend</span><span class="token punctuation">(</span><span class="token keyword">int</span> to_port<span class="token punctuation">,</span> <span class="token class-name">String</span> to_ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>to_port <span class="token operator">=</span> to_port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>to_ip <span class="token operator">=</span> to_ip<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            datagram_socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment">//1.数据报内容</span>                  <span class="token class-name">String</span> send_massage <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//2.转成字节</span>                  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> send_data <span class="token operator">=</span> send_massage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//3。打包成数据报</span>                  <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>send_data<span class="token punctuation">,</span>                          <span class="token number">0</span><span class="token punctuation">,</span> send_data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>to_ip<span class="token punctuation">,</span>to_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//4.发送数据报</span>                  datagram_socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1934. 贝茜放慢脚步</title>
      <link href="/2022/01/19/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1934.bei-qian-fang-man-jiao-bu/"/>
      <url>/2022/01/19/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1934.bei-qian-fang-man-jiao-bu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-15 18:34:31 * @LastEditTime: 2022-01-19 23:33:07 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/***** * 1934. 贝茜放慢脚步 * https://www.acwing.com/problem/content/1936/ * 题目描述:  *  走完1000米,过程中速度为1,D N 为在N米时降低速度,T N为在T秒时候降低速度,降低速度为1,1/2,1/3,1/4··· *  问到达1000米时花费的时间为 * Tag: *  1.模拟 * 思路: *  1.对于题目意思模拟就可以了 *  2.用两个数组存储时间和距离并且排序 *  3.如果从小到大便利两个数组,t[i]表示减速时间点,d[i]表示减速距离点,ans表示当前时间点,dis表示当前距离点 *          sum =(t[i] - ans )* speed *      1.如果 dis + sum  &lt; d[i] ,即相差的时间走的距离的点小于规定的距离点,那么就走时间减速 *      2.如果 dis + sum  &gt; d[i],即相差的时间走的距离的点大于规定的距离点,那么就先走距离减速 *      3.如果 dis + sum  = d[i].相差的时间走的距离等于规定的距离点,那么就两个都走 * 注意: *  *  1.当然题目中的速度取的是倒数,所以乘法的地方会变成除法 *  2.用double ,因为要的是向上取整 *  *   */</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> t<span class="token punctuation">;</span> <span class="token comment">//double</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> num<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> s <span class="token operator">&gt;&gt;</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    d<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> speed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> time <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> distance <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> ans<span class="token punctuation">)</span> <span class="token operator">/</span> speed<span class="token punctuation">;</span> <span class="token comment">// s= t / 1/v</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">+</span> sum <span class="token operator">&gt;</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token punctuation">(</span>distance <span class="token operator">-</span> dis<span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span> <span class="token comment">//t =s * 1/v</span>            dis <span class="token operator">=</span> distance<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">+</span> sum <span class="token operator">&lt;</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dis <span class="token operator">=</span> dis <span class="token operator">+</span> sum<span class="token punctuation">;</span> <span class="token comment">//</span>            ans <span class="token operator">=</span> time<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">+</span> sum <span class="token operator">==</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dis <span class="token operator">=</span> distance<span class="token punctuation">;</span>            ans <span class="token operator">=</span> time<span class="token punctuation">;</span>            speed<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        speed<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> distance <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token punctuation">(</span>distance <span class="token operator">-</span> dis<span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>        dis <span class="token operator">=</span> distance<span class="token punctuation">;</span>        speed<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.0lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1230. K倍区间</title>
      <link href="/2022/01/18/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1230.k-bei-qu-jian/"/>
      <url>/2022/01/18/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1230.k-bei-qu-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-18 20:50:09 * @LastEditTime: 2022-01-18 21:37:30 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/***** * 1230. K倍区间 * https://www.acwing.com/problem/content/1232/ * 题目描述: *  给一个长度为N的区间,如果其中一段连续的子序列和为k的倍数称为k倍区间,求有多少个k倍区间 * Tag: *  1.前缀和 *  2.数论 * 思路: *  1.可以用前缀和省去一重循环 *  2.选择一个右端点R,在1~R的区间找到一个L使得(S[R] - S[L-1]) % k == 0, *    等价于S[R] % k == S[L-1] % K *  3.将1~R区间换成 0~R-1 上述式子等价于找到一个L使得(S[R] - S[L]) % k == 0, *    等价于S[R] % K==S[L] % K; *  4.用一个数组来存储余数的个数,从前往后枚举R *  5.由于区间换成 0~R-1 所以 0 必然存在且 0 % m == 0,所以cnt[0] = 1. *  *  *   */</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>LL g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//LL</span>LL cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//余数为i的个数 LL</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//LL</span>    cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//g[0]%m==0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">[</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> m<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1960. 闪烁</title>
      <link href="/2022/01/17/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1960.shan-shuo/"/>
      <url>/2022/01/17/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/1960.shan-shuo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-15 18:34:31 * @LastEditTime: 2022-01-17 21:31:42 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/**** * 1960. 闪烁 * https://www.acwing.com/problem/content/1962/ * 题目描述: *  一串灯泡,01代表开关,如果 i-1 灯泡为 1 那么 i 灯泡改变状态,否则不变,求m时间后 *   灯泡的状态 * Tag: *  1.二进制枚举 * 思路: *  1.从题目分析首先,最大15个灯泡也就是2^15种灯泡状态,远远少于数据范围10^15,说明 *    存在环,所以花费的时间应该最大为2^15+2^7. *  2. 将状态用二进制转换成一个数保存 *  3. 然后就是按照题意模拟灯泡的状态变换.  *  4. 如果已经找到环那么就对环长度取余.否则直接模拟找出答案 *   *  *  */</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>LL m<span class="token punctuation">;</span><span class="token comment">//模拟</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> <span class="token comment">//att</span>        <span class="token keyword">int</span> s1 <span class="token operator">=</span> state <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s2 <span class="token operator">=</span> state <span class="token operator">&gt;&gt;</span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">+=</span> <span class="token punctuation">(</span>s1 <span class="token operator">^</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出</span><span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>state <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span>        state <span class="token operator">+=</span> number <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 1</span>        state <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">out</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            p<span class="token punctuation">[</span>state<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//环</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> i <span class="token operator">-</span> p<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                state <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">out</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举与注解</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/mei-ju-yu-zhu-jie/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/mei-ju-yu-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举与注解"><a href="#枚举与注解" class="headerlink" title="枚举与注解"></a>枚举与注解</h1><blockquote><p>2021.12.14-2021.12.20</p></blockquote><h2 id="1-枚举类"><a href="#1-枚举类" class="headerlink" title="1. 枚举类"></a>1. 枚举类</h2><h3 id="1-1-枚举类的理解"><a href="#1-1-枚举类的理解" class="headerlink" title="1.1.枚举类的理解"></a>1.1.枚举类的理解</h3><ol><li><p>类的对象是<code>有限</code>的,<code>确定</code>的,我们称此类为枚举类</p><ol><li><p>举例如下:</p><ul><li><p>星期:</p></li><li><p>季节:</p></li><li><p>线程状态:创建,就绪,运行,堵塞,死亡.</p></li></ul></li></ol></li><li><p><em>当需要定义一组常量的时,强烈建议使用枚举类</em></p></li><li><p>如果枚举类中只有一个对象,则相当于单例模式的实现方式</p></li></ol><h3 id="1-2-枚举类的创建"><a href="#1-2-枚举类的创建" class="headerlink" title="1.2.枚举类的创建"></a>1.2.枚举类的创建</h3><h4 id="1-2-1-自定义创建枚举类"><a href="#1-2-1-自定义创建枚举类" class="headerlink" title="1.2.1.自定义创建枚举类"></a>1.2.1.自定义创建枚举类</h4><ol><li>构造器私有化</li><li>类中创建<code>public static 对象</code></li><li></li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> weekDecription<span class="token punctuation">;</span>    <span class="token comment">/**     *      1.构造器私有化     */</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> weekDecription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weekDecription <span class="token operator">=</span> weekDecription<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *      2.在类中创建对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> MON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"MON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> TUS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"TUS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> WED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"WED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> THU <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"THU"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> FRI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"FRI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> SAT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"SAT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Week</span> SUN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWeekDecription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weekDecription<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-使用enum关键词创建枚举类"><a href="#1-2-2-使用enum关键词创建枚举类" class="headerlink" title="1.2.2.使用enum关键词创建枚举类"></a>1.2.2.使用enum关键词创建枚举类</h4><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 1.优先在类中先创建对象     * 去除掉自定义枚举类中大量重复的部分，对象之间用','隔开，最后一个对象用'；'结尾；     */</span>    <span class="token function">MON</span><span class="token punctuation">(</span><span class="token string">"MON"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TUS</span><span class="token punctuation">(</span><span class="token string">"TUS"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WED</span><span class="token punctuation">(</span><span class="token string">"WED"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">THU</span><span class="token punctuation">(</span><span class="token string">"THU"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FRI</span><span class="token punctuation">(</span><span class="token string">"FRI"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SAT</span><span class="token punctuation">(</span><span class="token string">"SAT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUN</span><span class="token punctuation">(</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 2.属性     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> weekDescription<span class="token punctuation">;</span>    <span class="token comment">/**     * 3.提供私有构造器     */</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> weekDescription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription <span class="token operator">=</span> weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 4.提供属性的get()方法.     *     * @return String     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWeekDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用enum类关键词定义的枚举实现接口"><a href="#使用enum类关键词定义的枚举实现接口" class="headerlink" title="使用enum类关键词定义的枚举实现接口"></a>使用enum类关键词定义的枚举实现接口</h5><ol><li><p>在枚举类中实现接口抽象方法</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token comment">/**     * show instance method     */</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 1.优先在类中先创建对象     * 去除掉自定义枚举类中大量重复的部分，对象之间用','隔开，最后一个对象用'；'结尾；     */</span>    <span class="token function">MON</span><span class="token punctuation">(</span><span class="token string">"MON"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TUS</span><span class="token punctuation">(</span><span class="token string">"TUS"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WED</span><span class="token punctuation">(</span><span class="token string">"WED"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">THU</span><span class="token punctuation">(</span><span class="token string">"THU"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FRI</span><span class="token punctuation">(</span><span class="token string">"FRI"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SAT</span><span class="token punctuation">(</span><span class="token string">"SAT"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUN</span><span class="token punctuation">(</span><span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 2.属性     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> weekDescription<span class="token punctuation">;</span>    <span class="token comment">/**     * 3.提供私有构造器     */</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> weekDescription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription <span class="token operator">=</span> weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 4.提供属性的get()方法.     *     * @return String     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWeekDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>让每个枚举类的对象实现接口抽象方法</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * show instance method     */</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token class-name">Week</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>       <span class="token function">MON</span><span class="token punctuation">(</span><span class="token string">"MON"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//在每个对象里面重写show()方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MONDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">TUE</span><span class="token punctuation">(</span><span class="token string">"TUE"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TUESDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">WED</span><span class="token punctuation">(</span><span class="token string">"WED"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WEDNESDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">THU</span><span class="token punctuation">(</span><span class="token string">"THU"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"THURSDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">FRI</span><span class="token punctuation">(</span><span class="token string">"FRI"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FRIDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SAT</span><span class="token punctuation">(</span><span class="token string">"SAT"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SATURDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SUN</span><span class="token punctuation">(</span><span class="token string">"SUN"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SUNDAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 2.属性     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> weekDescription<span class="token punctuation">;</span>    <span class="token comment">/**     * 3.提供私有构造器     */</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Week</span><span class="token punctuation">(</span><span class="token class-name">String</span> weekDescription<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription <span class="token operator">=</span> weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 4.提供属性的get()方法.     *     * @return String     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getWeekDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weekDescription<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="enum类的常用方法"><a href="#enum类的常用方法" class="headerlink" title="enum类的常用方法"></a>enum类的常用方法</h5><p><code>values()</code>:返回枚举类的对象数组,该方法可以方便的便利枚举类的所有对象</p><p><code>valueOf(String str)</code>:可以把一个字符串转换成枚举类的对象,要求字符串必须是枚举类的对象,否则如果对象不存在会抛出异常.</p><p><code>toString()</code>:输出方法</p><h2 id="2-注解-Annotation"><a href="#2-注解-Annotation" class="headerlink" title="2.注解(Annotation)"></a>2.注解(Annotation)</h2><h3 id="2-1-注释的理解"><a href="#2-1-注释的理解" class="headerlink" title="2.1.注释的理解"></a>2.1.注释的理解</h3><p><strong>框架 = 注解 + 反射 + 设计模式</strong></p><p><code>Annotation</code>就是代码里面的特殊标记,这些标记可以在编译,类加载,运行时被读取,并执行相应的处理. 可以在不改变原有逻辑的情况下,在源文件添加一些补充信息</p><h3 id="2-2-Annotation的使用示例"><a href="#2-2-Annotation的使用示例" class="headerlink" title="2.2.Annotation的使用示例"></a>2.2.Annotation的使用示例</h3><ol><li><p><code>@author</code>:开发者</p></li><li><p><code>@version</code>:该模块的版本</p></li><li><p><code>@see</code>:参考转向,相关主题</p></li><li><p><code>@since</code> : 从那个版本开始添加的;</p></li><li><p><code>@param</code> : 对方法中某参数的说明,如果没有参数不用写</p></li><li><p><code>@return </code> : 对方返回值的说明,如果方法的返回值类型是void就不能写</p></li><li><p><code>@exception</code> : 对可能抛出的异常进行说明,如果方法没有用throws显示抛出的异常就不用写</p><h5 id="在编译时进行格式检查"><a href="#在编译时进行格式检查" class="headerlink" title="在编译时进行格式检查"></a>在编译时进行格式检查</h5><ol><li><p><code>@Override</code> : 限定重写父类方法,该注解只能用于方法</p></li><li><p><code>@Deprecated</code> : 用于表示所修饰的元素(类,方法等)已过时,通常是因为所修饰的结构危险或存在更好的选择</p></li><li><p><code>@SuppressWarnings</code> : 抑制编译器警告</p></li></ol></li></ol><h5 id="跟踪代码的依赖性-实现替代配置文件功能"><a href="#跟踪代码的依赖性-实现替代配置文件功能" class="headerlink" title="跟踪代码的依赖性,实现替代配置文件功能"></a>跟踪代码的依赖性,实现替代配置文件功能</h5><h3 id="2-3-如何自定义注解"><a href="#2-3-如何自定义注解" class="headerlink" title="2.3.如何自定义注解"></a>2.3.如何自定义注解</h3><ul><li><p>定义新的<code>Annotation</code>类型需要使用<code>@interface</code>关键字.</p></li><li><p>自定义注解自动继承<code>java.lang.annotation</code>的Annotation接口</p></li><li><p>内部定义成员,通常使用<code>value</code>表示</p></li><li><p>可以指定成员的默认值,使用<code>default</code>定义</p></li><li><p>如果自定义注解没有成员,表明是一个<code>标识</code>作用.</p></li></ul><p><em>如果注释有成员,那么就需要指明成员的值,如果有默认值可以不写.</em></p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token comment">//default 默认值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-jdk中4个基本的注解的使用"><a href="#2-4-jdk中4个基本的注解的使用" class="headerlink" title="2.4.jdk中4个基本的注解的使用"></a>2.4.jdk中4个基本的注解的使用</h3><p>JDK的<code>元注解</code>用于修饰其他Annotation定义</p><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>JDK5.0提供了4个标准的meta-annotation类型,分别是</p><h5 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h5><p><code>@Retention</code>用于指定该Annotation的<em>生命周期</em>,<code>@Retention</code>包含一个<code>RetentionPolicy</code>类型的成员变量.</p><p>包—–<strong>import java.lang.annotation.Retention</strong></p><p>使用<code>Retention</code>必须为该<code>value</code>成员变量指定值,<code>RetentionPolicy</code>其有三种状态(枚举类)</p><ol><li><p><code>RetentionPolicy.SOURCE</code> :  在源文件中有效</p><ol><li><code>RetentionPolicy.CLASS</code> — 默认状态  : 在编译时保留在CLASS文件里面,但是在运行java程序时,JVM不会保留注解</li></ol></li><li><p><code>RetentionPolicy.RUNTIME</code> : 在编译和运行的时候都保留注解</p></li></ol><h5 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h5><p> <code>@Target</code>用于指定被修饰的Annotation能用于修饰那些程序元素</p><p>包—–<strong>import static java.lang.annotation.ElementType.</strong>*</p><p><code>@Target </code>也包含一个名为<code>value</code>的成员变量</p><ul><li><code>CONSTRUCTOR</code> — 构造器</li><li><code>FIELD</code> — 域</li><li><code>LOCAL_VARIABLE</code> — 局部变量</li><li><code>METHOD</code> — 方法</li><li><code>PACKAGE</code> — 包</li><li><code>PARAMETER</code> — 参数</li><li><code>TYPE</code> — 类,接口或enum声明</li><li><code>TYPE_USE</code>:表明该注解能写在使用类型的任何语句中—jdk8</li><li><code>TYPE_PARAMETER</code> : 表示该注解能写在类型变量的声明语句中(如:泛型声明)—jdk8</li></ul><h5 id="Documented-—-出现频率较低"><a href="#Documented-—-出现频率较低" class="headerlink" title="Documented —- 出现频率较低"></a>Documented —- 出现频率较低</h5><p>用于指定被该元Annotation修饰的Annotation类,将被javadoc工具提取成文档<br>表示所修饰的注解在被javadoc解析时,保留下来</p><p>默认情况下,javadoc是不包含注解的</p><p><strong>定义为Documented的注解必须设置Retention的值为RUNTIME</strong></p><h5 id="Inherited-—-出现频率较低"><a href="#Inherited-—-出现频率较低" class="headerlink" title="Inherited — 出现频率较低"></a>Inherited — 出现频率较低</h5><p><code>Inherited</code>被他所修饰的 Annotation 将具有继承性</p><h3 id="2-5-利用反射获取注解信息"><a href="#2-5-利用反射获取注解信息" class="headerlink" title="2.5.利用反射获取注解信息"></a>2.5.利用反射获取注解信息</h3><h3 id="2-6-jdk8新特性-可重复注解"><a href="#2-6-jdk8新特性-可重复注解" class="headerlink" title="2.6.jdk8新特性:可重复注解"></a>2.6.jdk8新特性:可重复注解</h3><h4 id="JDK8之前实现重复注解"><a href="#JDK8之前实现重复注解" class="headerlink" title="JDK8之前实现重复注解"></a>JDK8之前实现重复注解</h4><ol><li>创建一个<code>MyAnnotaion</code>的数组value的注解</li></ol><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token annotation punctuation">@MyAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDK8实现"><a href="#JDK8实现" class="headerlink" title="JDK8实现"></a>JDK8实现</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>在<code>MyAnnotation</code>上声明<code>@Repeatable</code>,成员值为<code>MyAnnotations.class</code></li><li><code>MyAnnotation的</code>的<code>Target</code>和<code>Retension</code>要与<code>MyAnnotations</code>相同.</li></ol><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">//2.两个注释内容要同步</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 1. 实现@Repeatable</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"23"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"11"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-jdk8新特性-类型注解"><a href="#2-7-jdk8新特性-类型注解" class="headerlink" title="2.7.jdk8新特性:类型注解"></a>2.7.jdk8新特性:类型注解</h3><h4 id="支持注解泛型"><a href="#支持注解泛型" class="headerlink" title="支持注解泛型"></a>支持注解泛型</h4><p><code>@Target</code>里面有个参数<code>TYPE_PARAMETER</code>.</p><p><code>TYPE_PARAMETER</code> : 表示该注解能写在类型变量的声明语句中(如:泛型声明)</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>METHOD<span class="token punctuation">,</span>TYPE_PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="支持注解异常"><a href="#支持注解异常" class="headerlink" title="支持注解异常"></a>支持注解异常</h4><p><code>@Target</code>里面有个参数<code>TYPE_USE</code>.</p><p><code>TYPE_USE</code>:表明该注解能写在使用类型的任何语句中</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>TYPE<span class="token punctuation">,</span>METHOD<span class="token punctuation">,</span>TYPE_USE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/duo-xian-cheng/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><blockquote><p>用时:2021.12.1-2021.12.11</p></blockquote><h2 id="基本概念-程序-进程-线程"><a href="#基本概念-程序-进程-线程" class="headerlink" title="基本概念:程序,进程,线程"></a>基本概念:程序,进程,线程</h2><ul><li><p><em><strong>程序(program)</strong></em> : <em>为完成特定任务,用某种语言编写的一组指令的集合</em>.即一段静态的代码,静态对象.</p></li><li><p><em><strong>进程(process)</strong></em> :  是程序的一次执行过程.或是<em>正在运行的一个程序</em>,是一个动态的过程,有他自身的产生,存在和消亡的过程—–生命周期</p><ul><li><p>运行中的程序</p></li><li><p>程序是静态的,进程是动态的</p></li><li><p>进程作为资源分配的单位,系统在运行时会为每个进程分配不同的内存区域.</p></li></ul></li><li><p><em><strong>线程(thread)</strong></em>  :  进程可进一步细分划分为线程,<em>是一个程序内部的一条执行路径</em>.</p><ul><li>若一个进程同一时间并行执行多个线程,就是支持多线程的</li></ul><ul><li><p>线程作为调度和执行的单位,<em>每个线程具有独立的运行栈和程序计数器(pc)</em>,线程切换的开销小<br>  <img src="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/duo-xian-cheng/16387466173876.jpg"></p></li><li><p>一个进程中的多个线程共享相同的内存单元/内存地址空间-&gt;他们从同一堆中分配对象,可以访问相同的变量和对象,这就使得线程间的通信变得更加简便和高效,但多个线程操作共享的系统资源可能带来安全隐患<br>  <img src="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/duo-xian-cheng/16387069631589.jpg"></p></li></ul></li><li><p><em><strong>单核CPU与多核CPU</strong></em></p><ul><li>单核CPU : 其实是一个假的多线程,在一个时间单元内只能执行一个线程的任务.只是因为CPU的时间单元很小,所以感觉不出来.</li><li>多核CPU:更好的发挥多线程的效率</li></ul></li><li><p><em><strong>并行</strong></em> : 多个CPU同时执行多个不同的任务</p></li><li><p><em><strong>并发</strong></em> : 一个CPU(采用时间片)同时执行多个任务</p><blockquote><p><em>使用多线程的优点</em></p></blockquote></li><li><p>以单核CPU为例子,只使用单个线程先后完成多个任务,肯定比用多个线程来完成的时间更加段短,既然如此为什么要使用多线程?</p></li><li><p>多线程的优点</p><ul><li><ol><li>提高应用程序的响应,对图形化界面有意义,增强用户体验</li></ol></li><li><ol start="2"><li>提高计算机CPU的利用率</li></ol></li><li><ol start="3"><li>改善程序结构,将长而复杂的进程分为多个线程,独立运行,利于修改<blockquote><p><em>何时使用多线程</em></p></blockquote></li></ol></li></ul></li><li><p>程序需要执行多个任务</p></li><li><p>程序需要实现一些需要等待的任务,如用户输入,文件读写操作,网络操作,搜索等</p></li><li><p>需要一些后台运行的程序</p></li></ul><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><h3 id="多线程的创建"><a href="#多线程的创建" class="headerlink" title="多线程的创建"></a>多线程的创建</h3><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><blockquote><p>线程的创建流程</p></blockquote><ol><li>创建一个继承Thread类的子类.</li><li>重写Thread类的run()–这个线程需要执行的操作申明在run里面</li><li>创建Thread类的子类的对象.</li><li>用对象调用Thread的start().<ol><li>主线程启动新的线程</li><li>调用这个线程的run()方法</li></ol></li></ol><blockquote><p>代码实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.创建Thread类的子类的对象.</span>        <span class="token class-name">User</span> u1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.用对象调用Thread的start().</span>        u1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">//1. 创建一个继承Thread类的子类.</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> summers <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">ReentrantLock</span>  lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.重写Thread类的run()--这个线程需要执行的操作申明在run里面</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                summers <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>summers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 问题与解决</p></blockquote><ol><li>不能让已经start()的对象再去start(),会抛出<code>IllegaleThreadException</code>异常</li><li>创造多个线程,就要创造多个对象去调用一次start().</li><li>不同的方法就创造不同的类继承Thread类.</li><li>只用一次的可以用Thread类的匿名类写法</li></ol><blockquote><p>Thread的常用方法</p></blockquote><ol><li><code>start()</code>: 创建新的线程,调用线程的run()</li><li><code>run()</code>:通常需要重写Thread类中的run方法,将创建该线程所需要完成的操作写在run()方法里面</li><li><code>currentThread()</code>:获取当前进程</li><li><code>getName()</code>:获取当前进程的名字</li><li><code>setName()</code>:设置当前进程的名字</li><li><code>yield()</code>:释放当前CPU的执行权 7. <code>join()</code>:当线程a调用线程b的join()方法,那么a就会进入堵塞状态,直到b执行完,<ol><li>低优先级的线程可以获得执行</li></ol></li><li><code>sleep(long millitime)</code>:让当前进程睡眠指定的millitime毫秒,在指定的时间内为阻塞状态<ol><li>在线程中需要try-catch抛异常</li></ol></li></ol><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><blockquote><p>线程创建流程</p></blockquote><ol><li>创建一个实现Runnable接口的类</li><li>实现类去实现Runnable接口中的方法:<code>run()</code></li><li>创建实现类的对象</li><li>将实现类的对象作为参数传递到Thread的构造器中,创造Thread的对象</li><li>通过Thread对象来调用<code>start()</code></li></ol><blockquote><p>代码实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建一个实现Runnable接口的类</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> summers <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.实现类去实现Runnable接口中的方法:`run()`</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                summers <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>summers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//3.创建实现类的对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//4.将实现类的对象作为参数传递到Thread的构造器中,创造Thread的对象</span>        <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 5.通过Thread对象来调用start()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较两种创建方法"><a href="#比较两种创建方法" class="headerlink" title="比较两种创建方法"></a>比较两种创建方法</h4><blockquote><p>优先选择实现Runnable接口</p></blockquote><ol><li><strong>原因</strong><ol><li>实现的方法没有类的单继承的局限性</li><li>实现的方式更加适合处理多个线程享有共同资源的情况</li></ol></li></ol><blockquote><p>两者的联系与相同点</p></blockquote><ol><li><strong>联系</strong><ol><li>不管是继承Thread类还是实现Runnable接口,本质上都是在重写Runnable接口的run()方法,因为Thread类的run()方法也是重写了Runnable接口的run()方法</li></ol></li><li><strong>相同点</strong><ol><li>两种创建方法都需要重写run()方法,将线程需要执行的操作写在run()方法里面</li></ol></li></ol><h3 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h3><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><h5 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a><em>调度策略</em></h5><ol><li>时间片</li><li>抢占式:高优先级的线程抢占CPU<h5 id="Java的调度方法"><a href="#Java的调度方法" class="headerlink" title="Java的调度方法"></a><em>Java的调度方法</em></h5></li><li>同优先级组成队列服务,使用<em>时间片</em>策略</li><li>对高优先级,使用<em>优先调度</em>的策略<h5 id="线程的优先级-1"><a href="#线程的优先级-1" class="headerlink" title="线程的优先级"></a><em>线程的优先级</em></h5></li><li><code>MAX_PRIORITY</code> : 10</li><li><code>NORM_PRIORITY </code>: 5—-默认优先级</li><li><code>MIN_PRIORITY</code> :  1<h5 id="如何设置线程的优先级"><a href="#如何设置线程的优先级" class="headerlink" title="如何设置线程的优先级"></a><em>如何设置线程的优先级</em></h5></li><li><code> getPriority()</code>:获取当前的线程优先级</li><li><code>setPriority()</code>:设置线程的优先级</li></ol><hr><ul><li>高优先级的线程只是<em>高概率</em>的会抢占低优先级线程的cpu执行权</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步*"></a>线程的同步*</h2><h3 id="多线程的安全问题"><a href="#多线程的安全问题" class="headerlink" title="多线程的安全问题"></a>多线程的安全问题</h3><h4 id="存在的安全问题"><a href="#存在的安全问题" class="headerlink" title="存在的安全问题"></a>存在的安全问题</h4><ol><li>多个线程执行的不确定性引起结果的不稳定</li><li>多个线程对<em>资源的共享</em>,造成操作的不完整性,会破坏数据</li><li>对资源的共享才会带来多线程的安全问题</li></ol><h4 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h4><p> 当某个线程在操作共享资源时,尚未操作完成,其他线程也参与进来</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><blockquote><p>由此引入线程的同步</p></blockquote><p>当一个线程在操作共享数据的时候,其他线程不能参与进来,知道该线程操作完成,其他线程才能够开始操作共享数据,这种情况即使该线程出现阻塞也不能被改变</p><h3 id="Java中通过同步机制来解决线程的安全问题"><a href="#Java中通过同步机制来解决线程的安全问题" class="headerlink" title="Java中通过同步机制来解决线程的安全问题"></a>Java中通过同步机制来解决线程的安全问题</h3><h4 id="synchronized-方法同步代码块"><a href="#synchronized-方法同步代码块" class="headerlink" title="synchronized()方法同步代码块"></a>synchronized()方法同步代码块</h4><h5 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//需要被同步的代码(多个线程同步操作的数据)    </span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>同步监视器必须只为一个对象</p></li><li><p>在Runnable接口中,因为对象只有一个所以同步监视器可以用this</p></li></ul><h5 id="继承Thread类-1"><a href="#继承Thread类-1" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//需要被同步的代码(多个线程同步操作的数据)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在继承Thread类中,因为每次都会new新的对象所以同步监视器不可以用this</li><li>可以用 Class.class来充当对象</li></ul><h5 id="同步代码块总结"><a href="#同步代码块总结" class="headerlink" title="同步代码块总结"></a>同步代码块总结</h5><ul><li>同步监视器:俗称锁,任何一个类的对象都可以充当一个锁</li><li>要求:多个线程必须共用同一把锁</li><li></li></ul><h4 id="synchronized-同步方法"><a href="#synchronized-同步方法" class="headerlink" title="synchronized()同步方法"></a>synchronized()同步方法</h4><p>如果操作共享数据的操作在同一个方法里面,那么可以用<code>syncchronized()</code>来创造一个方法</p><h5 id="实现Runnable接口-1"><a href="#实现Runnable接口-1" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//同步方法</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="继承Thread类-2"><a href="#继承Thread类-2" class="headerlink" title="继承Thread类"></a>继承Thread类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//需要申明为静态方法:静态方法此时的主体为当前类本身:Class.class</span>    <span class="token comment">//同步方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="同步方法总结"><a href="#同步方法总结" class="headerlink" title="同步方法总结"></a>同步方法总结</h5><ul><li><code>synchronized()</code>实现同步方法默认的锁为<code>this</code>,这在实现Runnable接口时可以直接不写,当如果是继承Thread类则必须此方法为静态方法:<em>静态方法的锁是当前类本身,也就是Class.class</em></li></ul><h4 id="Lock锁—-JDK5-0新增"><a href="#Lock锁—-JDK5-0新增" class="headerlink" title="Lock锁—-JDK5.0新增"></a>Lock锁—-JDK5.0新增</h4><h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5><ul><li><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具</li><li>ReentrantLock类实现了Lock,他拥有与synchroized相同的并发性和内存语义,在现实线程安全的控制中,比较常用的是ReentrantLock,可以显式加锁,释放锁</li><li>使用ReentrantLock:<code>import java.util.concurrent.locks.ReentrantLock;</code>引入这个包</li></ul><h5 id="Lock操作"><a href="#Lock操作" class="headerlink" title="Lock操作"></a>Lock操作</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ReentrantLock</span> lock<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// lock.lock 必须紧跟 try</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment">//同步方法   </span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token comment">// 并且 lock.unlock 要在 finally 的第一行</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="synchornized与Lock的异同"><a href="#synchornized与Lock的异同" class="headerlink" title="synchornized与Lock的异同"></a>synchornized与Lock的异同</h5><ol><li>相同:<ol><li>都是解决线程安全问题</li></ol></li><li>不同:<ol><li>synchornized执行完同步代码块或者同步方法,自动释放同步监视器</li><li>Lock同步监视器需要手动调用解锁方法<code>Lock.nulock()</code></li><li>Lock是显式锁(手动开关锁),synchronized是隐式锁,出了作用域自动释放</li><li>Lock只有代码块锁,synchronized有代码块锁和方法锁</li><li>使用Lock锁,JVM花费更少的事件来调度线程,性能更好,并且具有更好的扩展性</li></ol></li></ol><h5 id="优先使用顺序"><a href="#优先使用顺序" class="headerlink" title="优先使用顺序"></a>优先使用顺序</h5><p>Lock -&gt; 同步代码块 -&gt; 同步方法 </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>线程同步解决了线程的安全问题,但是也降低了线程的效率</p><h3 id="单例模式-饿汉式的线程安全写法"><a href="#单例模式-饿汉式的线程安全写法" class="headerlink" title="单例模式:饿汉式的线程安全写法"></a>单例模式:饿汉式的线程安全写法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><h5 id="死锁的理解"><a href="#死锁的理解" class="headerlink" title="死锁的理解"></a><em>死锁的理解</em></h5><ol><li>不同的线程分别占用对方需要的资源不放,都在等待对方先放弃自己需要的同步资源,就形成了线程的死锁</li><li>说明</li><li>出现死锁后,不会出现异常,不会出现提示,只是所有的线程处于阻塞状态,无法继续.</li><li>使用同步时要避免死锁问题.</li><li>锁相当于一种资源,以这个资源的占有权来实现同步,一个线程同步需要这个锁,那么这个锁的资源将被该线程占有,其他线程无法使用.而这里的锁是以对象来充</li></ol><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><em>解决方法</em></h5><ol><li>专门的算法,原则;</li><li>尽量减少同步资源的定义;</li><li>尽量避免嵌套同步;</li></ol><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h3 id="通信方法"><a href="#通信方法" class="headerlink" title="通信方法"></a>通信方法</h3><ol><li><p>wait()</p><p>一旦执行这个方法,当前线程就会进入堵塞状态,并释放同步监视器</p></li><li><p>notify()</p><p>一旦执行这个方法,就会唤醒被wait的一个进程,如果有多个进程被wait(),就会唤醒优先级最高的一个</p></li><li><p>notifyAll()</p><p>一旦执行这个方法,就会唤醒所有被wait的进程.</p></li></ol><p>这些方法都是在<code>java.lang.Objects</code>包中:确保任何一个类的对象充当同步监视器的时候都能够调用通信方法</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p><code>wait()</code>,<code>notify()</code>,<code>notifyAll()</code>三个方法必须使用在同步代码块或者同步方法中.</p></li><li><p><code>wait()</code>,<code>notify()</code>,<code>notifyAll()</code>三个方法的调用者必须是同步代码块或者同步方法中的同步监视器.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//等待写错误案例的报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="wait-和sleep-的异同"><a href="#wait-和sleep-的异同" class="headerlink" title="wait()和sleep()的异同"></a>wait()和sleep()的异同</h3><ol><li>异<ol><li><em>两个方法的声明位置不一样</em>;Thread类中声明<code>sleep()</code>,Object类中声明<code>wait()</code>.</li><li><em>调用的场景不同</em>;<code>sleep()</code>可以在任何场景中调用,而<code>wait()</code>只能在同步代码或者同步方法中使用.</li><li><em>关于是否释放同步监视器</em>;如果两个方法都使用在同步代码块或者同步方法中,<code>sleep()</code>不会释放同步监视器,<code>wait()</code>会释放同步监视器</li></ol></li><li>同<ol><li>一旦执行,就会让线程进入阻塞状态</li></ol></li></ol><h3 id="生产者-x2F-消费者问题—线程通信的经典例题"><a href="#生产者-x2F-消费者问题—线程通信的经典例题" class="headerlink" title="生产者/消费者问题—线程通信的经典例题"></a>生产者/消费者问题—线程通信的经典例题</h3><blockquote><p>生产者（Producer）将产品交给店员（Clerk），而消费者（Customer）从店员处取走产品，I店员一次只能持有固定数量的产品（比如：20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p></blockquote><h4 id="这里可能出现两个问题："><a href="#这里可能出现两个问题：" class="headerlink" title="这里可能出现两个问题："></a>这里可能出现两个问题：</h4><ol><li><p>生产者比消费者快时，消费者会漏掉一些数据没有取到。</p></li><li><p>消费者比生产者快时，消费者会取相同的数据。</p></li></ol><h4 id="对多线程问题的分析"><a href="#对多线程问题的分析" class="headerlink" title="对多线程问题的分析:"></a><em>对多线程问题的分析</em>:</h4><ol><li><p>是否是多线程?</p><ol><li>生产者线程—Producer</li><li>消费者线程—Customer</li></ol></li><li><p>是否有共享数据</p><ol><li>有</li><li>店员(产品)—Cleark</li></ol></li><li><p>如何解决线程的安全问题</p><ol><li>同步机制—三种方法</li></ol></li><li><p>是否涉及线程的通信</p><ol><li>是</li></ol></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span>exercises</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Test * @Author mrl * @Date 2021/12/10 11:29 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Clerk</span> clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者1号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者2号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者1号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> productCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> productMaxcount <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productCount <span class="token operator">&lt;</span> productMaxcount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            productCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始生产第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始消费第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a>JDK5.0新增线程创建方式</h2><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><h4 id="线程创建流程"><a href="#线程创建流程" class="headerlink" title="线程创建流程"></a>线程创建流程</h4><ol><li>创建一个实现Callable接口的实现类</li><li>实现<code>call()</code>方法,线程任务声明在<code>call()</code>方法里面</li><li>创建一个实现Callable接口的实现类的对象</li><li>将Callable接口的实现类的对象作为参数传递到FutureTask构造器中,创建FutureTask的对象</li><li>将FutureTask类的对象作为参数传递到Thread类的构造器中,并且调用<code>start()</code>方法.</li><li>(可有可无)获取Callable中<code>call()</code>方法的返回值:<code>FutureTask.get()</code></li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span></span><span class="token class-name">ThreadNew</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Test * @Author mrl * @Date 2021/12/10 22:48 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//3.创建一个实现Callable接口的实现类的对象</span>        <span class="token class-name">CallableNew</span> callable <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CallableNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将Callable接口的实现类的对象作为参数传递到FutureTask构造器中,创建FutureTask的对象</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.将FutureTask类的对象作为参数传递到Thread类的构造器中,并且调用`start()`方法</span>        <span class="token class-name">Thread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//6.(可有可无)获取Callable中`call()`方法的返回值:`FutureTask.get()`</span>            <span class="token class-name">Object</span> sum<span class="token operator">=</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//1.创建一个实现Callable接口的实现类</span><span class="token keyword">class</span> <span class="token class-name">CallableNew</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token comment">//2.实现`call()`方法,线程任务声明在`call()`方法里面</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Callable接口与Runnable接口的比较"><a href="#Callable接口与Runnable接口的比较" class="headerlink" title="Callable接口与Runnable接口的比较"></a>Callable接口与Runnable接口的比较</h3><ol><li><code>call()</code>可以有返回值</li><li><code>call()</code>可以抛出异常,被外面的动作捕获,获取异常的信息</li><li>Callable支持泛型</li></ol><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><h4 id="线程池的由来"><a href="#线程池的由来" class="headerlink" title="线程池的由来"></a>线程池的由来</h4><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>经常创建和销毁,使用量特别大的资源,比如并发情况下的线程,对性能的影响比较大</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>提前创建好多个线程,放入线程池,使用时直接获取,使用完放回池中,可以避免频繁的创建销毁,重复利用</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ol><li>提高响应速度(减少创建线程的事件).</li><li>降低资源消耗(重复利用线程池中线程,不需要每次都创建).</li><li>便于线程管理.<ol><li><code>corePoolSize</code>:核心池的大小.</li><li><code>maximumPoolSize</code>:最大线程数.</li><li><code>keepAliveTime</code>:线程没有任务时最多保持多长时间后会终止.</li></ol></li></ol><h4 id="线程池相关API"><a href="#线程池相关API" class="headerlink" title="线程池相关API"></a>线程池相关API</h4><p><strong>ExecutorService🥸—-接口</strong></p><ul><li>真正的线程池接口,常见之类ThreadPoolExecutor<ul><li><code>void execute(Runnable command)</code>:执行任务/命令,没有返回值,一般用来执行<code>Runnable</code>.</li><li><code>&lt;T&gt;Future&lt;T&gt;submit(Callable&lt;T&gt;task)</code>:执行任务,有返回值,一般用来执行<code>Callable</code></li></ul></li></ul><p><strong>Executors😁—–工具类</strong></p><ul><li>工具类,线程池的工厂类,用于创建并返回不同类型的线程池<ul><li><code>Executors.newCashedThreadPool()</code>:创建一个可根据需要创建新线程的线程池</li><li><code>Executors.newFixedThreadPool(n)</code>:创建一个可重用固定线程数的线程池*</li><li><code>Executors.newSingleThreadExecutor()</code>：创建一个只有一个线程的线程池</li><li><code>Executors.newScheduledThreadPol（n）</code>：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul></li></ul><h4 id="创建线程池的7个参数"><a href="#创建线程池的7个参数" class="headerlink" title="创建线程池的7个参数"></a>创建线程池的7个参数</h4><ol><li><code>corePoolSize</code> ： 线程池的核心线程数</li><li><code>maximumPoolSize</code> : 能容纳的最大线程数</li><li><code>keepAliveTime</code> : 空闲线程存活时间</li><li><code>unit</code> ： 存活的时间单位</li><li><code>workQueue</code> ： 存放提交但未执行任务的队列</li><li><code>threadFactory </code> ： 创建线程的工厂类</li><li><code>handler</code> ： 等待队列满后的拒绝策略</li></ol><h4 id="阿里巴巴java代码规范中对线程池的强制要求"><a href="#阿里巴巴java代码规范中对线程池的强制要求" class="headerlink" title="阿里巴巴java代码规范中对线程池的强制要求"></a>阿里巴巴java代码规范中对线程池的强制要求</h4><p><strong>要求</strong></p><p>项目中创建多线程时，使用常见的三种线程池创建方式，单一、可变、定长都有一定问题，原因是FixedThreadPool和SingleThreadExecutor底层都是用LinkedBlockingQueue实现的，这个队列最大长度为Integer.MAX_VALUE，容易导致OOM。所以实际生产一般自己通过ThreadPoolExecutor的7个参数，自定义线程池：</p><hr><p><img src="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/duo-xian-cheng/image-20211211112534846.png" alt="image-20211211112534846"></p><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token comment">//引入依赖包，创建线程池</span><span class="token keyword">private</span> <span class="token class-name">ThreadFactory</span> namedThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"thread-call-runner-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> taskExe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">200L</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>namedThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h4><p><strong>创建线程池流程</strong></p><ol><li>创建线程池</li><li>创建实现<code>Runnable</code>/<code>Callable接口</code>的实现类</li><li>将<code>Callable</code>\<code>Runnable</code>实现类的对象作为参数调给<code>submit()</code>\<code>execute()</code>方法</li></ol><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span>threadthree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName ThreadPool * @Author mrl * @Date 2021/12/11 11:13 * @Version 1.6 * @Description TODO **/</span><span class="token comment">//2.创建实现Runnable接口的实现类</span><span class="token keyword">class</span> <span class="token class-name">RunnbleTestCase</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//2.创建实现Callable接口的实现类</span><span class="token keyword">class</span> <span class="token class-name">CallableTestCase</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//ExecutorService只是一个接口，而实际上service所属的真正类是ThreadPoolExecutor</span>        <span class="token comment">//1.创建线程池</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span><span class="token comment">//向下转型</span>        service1<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置核心线程的数量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取该对象的所在类</span><span class="token comment">//3.将Runnable实现类的对象作为参数调给excute()方法</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunnbleTestCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//适用于Runnable</span>       <span class="token comment">//3.将Callable实现类的对象作为参数调给submit()方法 </span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallableTestCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用于Callable</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习过程问题汇总</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/java-xue-xi-wen-ti/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/java-xue-xi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="equals的用法"><a href="#equals的用法" class="headerlink" title="equals的用法"></a>equals的用法</h4><p>应该把常量写在前面,避免为空指针调用equals.</p><p>即<code>obj.equals("TOME")</code>换成 <code>"TOME".equals(obj)</code>.</p><h4 id="char"><a href="#char" class="headerlink" title="char"></a>char</h4><p>char 在java中是2字节,java采用unicode,2个字节(16位)来表示一个字符.</p><h4 id="简述java中构造方法的特点"><a href="#简述java中构造方法的特点" class="headerlink" title="简述java中构造方法的特点"></a>简述java中构造方法的特点</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><ol><li>构造方法用于创建对象和给类成员赋予初值.</li></ol><h5 id="构造方法的特点"><a href="#构造方法的特点" class="headerlink" title="构造方法的特点"></a>构造方法的特点</h5><ol><li>构造方法必须与类名相同</li><li>构造方法没有返回值类型</li><li>构造方法可以定义方法参数</li><li>使用new类名创建对象时,构造方法中代码会被执行.</li><li></li></ol><h4 id="简述java中抽象类的定义及特点"><a href="#简述java中抽象类的定义及特点" class="headerlink" title="简述java中抽象类的定义及特点"></a>简述java中抽象类的定义及特点</h4><h5 id="抽象类的定义"><a href="#抽象类的定义" class="headerlink" title="抽象类的定义"></a>抽象类的定义</h5><p>用<code>abstract</code>关键词去修饰一个类时,这个类被叫做抽象类</p><h5 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h5><ol><li>抽象类可以有抽象方法</li><li>抽象类不能用new运算符直接去创建对象</li><li>抽象类可以有构造方法</li><li>抽象类被子类继承时,抽象方法需要被子类重写.</li></ol><h4 id="简述java中静态方法的定义及特点"><a href="#简述java中静态方法的定义及特点" class="headerlink" title="简述java中静态方法的定义及特点"></a>简述java中静态方法的定义及特点</h4><h5 id="静态方法的定义"><a href="#静态方法的定义" class="headerlink" title="静态方法的定义"></a>静态方法的定义</h5><p>被<code>static</code>关键词修饰的方法叫做静态方法</p><h5 id="静态方法特点"><a href="#静态方法特点" class="headerlink" title="静态方法特点"></a>静态方法特点</h5><ol><li>静态方法可以在不调用对象的情况下调用</li><li>静态成员随着类的加载而加载</li><li>静态成员先于对象存在</li><li>静态成员被所有对象共享.</li><li></li></ol><h4 id="简述java中接口的概念及其作用"><a href="#简述java中接口的概念及其作用" class="headerlink" title="简述java中接口的概念及其作用"></a>简述java中接口的概念及其作用</h4><h5 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h5><p>用<code>interface</code>关键词修饰的类叫做接口</p><h5 id="接口的作用"><a href="#接口的作用" class="headerlink" title="接口的作用"></a>接口的作用</h5><ol><li>一个类可以实现都个接口</li><li>接口可以被实例化</li><li>实现类必须实现接口的所有方法.</li><li></li></ol><h4 id="简述java中this的作用"><a href="#简述java中this的作用" class="headerlink" title="简述java中this的作用"></a>简述java中this的作用</h4><h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p><code>this</code>关键词: 表示对当前对象的引用.</p><h5 id="this的作用"><a href="#this的作用" class="headerlink" title="this的作用"></a>this的作用</h5><ol><li>this引用类中的属性</li><li>this引用本类中的其他方法</li><li>this调用本类中的其他构造方法,调用时要放在构造方法的首行.</li><li>this代表本类的对象引用</li><li></li></ol><h4 id="简述java中继承的定义及其特性"><a href="#简述java中继承的定义及其特性" class="headerlink" title="简述java中继承的定义及其特性"></a>简述java中继承的定义及其特性</h4><h5 id="继承的定义"><a href="#继承的定义" class="headerlink" title="继承的定义"></a>继承的定义</h5><p>用<code>extends</code>关键词来表示一个类继承另一个类</p><h5 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h5><ol><li>一个类只能继承一个类</li><li>子类可以调用父类的构造函数和非private的成员和方法.</li><li></li></ol><h4 id="使用TreeSet存储Student对象"><a href="#使用TreeSet存储Student对象" class="headerlink" title="使用TreeSet存储Student对象"></a>使用TreeSet存储Student对象</h4><h5 id="代码实现–1"><a href="#代码实现–1" class="headerlink" title="代码实现–1"></a>代码实现–1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span>treeSetTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TreeSetTest01 * @Author mrl * @Date 2022/1/2 22:36 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ax"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"bx"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"cx"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"dx"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Student</span> st <span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>student<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码实现–2"><a href="#代码实现–2" class="headerlink" title="代码实现–2"></a>代码实现–2</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span>treeSetTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName TreeSetTest01 * @Author mrl * @Date 2022/1/2 22:36 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetTest01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">com</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ax"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"bx"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"cx"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"dx"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Student</span> st <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//    @Override</span><span class="token comment">//    public int compareTo(Student student) {</span><span class="token comment">//        int flag = 0;</span><span class="token comment">//        if (student != null) {</span><span class="token comment">//            if (student.score &lt; this.score) {</span><span class="token comment">//                flag = 1;</span><span class="token comment">//            } else if (student.score &gt; this.score) {</span><span class="token comment">//                flag = -1;</span><span class="token comment">//            }</span><span class="token comment">//        }</span><span class="token comment">//        return flag;</span><span class="token comment">//</span><span class="token comment">//    }</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> com <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s1<span class="token punctuation">,</span> <span class="token class-name">Student</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> s2<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">get_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断键盘输入的数据是否满足要求"><a href="#判断键盘输入的数据是否满足要求" class="headerlink" title="判断键盘输入的数据是否满足要求"></a>判断键盘输入的数据是否满足要求</h4><h5 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h5><ol><li>只包含数字和字符</li><li>总长度&gt;6</li><li>数字个数&gt;3**</li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lgx<span class="token punctuation">.</span></span><span class="token class-name">MatchesTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName solve * @Author mrl * @Date 2022/1/2 23:23 * @Version 1.6 * @Description TODO **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> solve <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> rdgex <span class="token operator">=</span><span class="token string">"[ \\d a-z A-z]+"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>rdgex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token punctuation">;</span>        s<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/ji-he/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="集合篇的学习方法"><a href="#集合篇的学习方法" class="headerlink" title="集合篇的学习方法"></a>集合篇的学习方法</h2><ol><li>根据要完成的任务数据的特点选择<code>接口</code></li><li>在根据<code>接口</code>每一个<code>实现类</code>的不同特点选择不同的<code>实现类</code></li><li>然后根据任务要求调用相应<code>实现类的方法</code></li><li>在深入一些就是了解这些<code>实现类的方法</code>的底层源码实现逻辑.</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合的概述"><a href="#集合的概述" class="headerlink" title="集合的概述"></a>集合的概述</h3><h4 id="集合与数组存储数据表述"><a href="#集合与数组存储数据表述" class="headerlink" title="集合与数组存储数据表述"></a>集合与数组存储数据表述</h4><ul><li><p>JDK提供的集合API位于<code>java.util</code>包内</p></li><li><p>集合和数组都是对多个数据进行存储的操作,简称Java容器;-</p></li><li><p>甚至可以说集合可以替代数组存储的</p></li></ul><h3 id="数组与集合的对比"><a href="#数组与集合的对比" class="headerlink" title="数组与集合的对比"></a>数组与集合的对比</h3><h4 id="数组存储的特点"><a href="#数组存储的特点" class="headerlink" title="数组存储的特点"></a>数组存储的特点</h4><ul><li>一旦初始化以后,其长度就确定了</li><li>数组一旦定义好,其元素的类型也就确定了,只能操作指定类型的数据.</li></ul><h4 id="数组存储的弊端"><a href="#数组存储的弊端" class="headerlink" title="数组存储的弊端"></a>数组存储的弊端</h4><p>一旦初始化以后,其长度就不可修改了</p><ul><li><p>数组中提供的方法有限,并且效率不高</p></li><li><p>获取数组中实际元素的个数,没有现成的属性或方法可用</p></li><li><p>数组存储数据的特点:可重复,有序;</p></li></ul><h4 id="集合存储的优点"><a href="#集合存储的优点" class="headerlink" title="集合存储的优点"></a>集合存储的优点</h4><h3 id="集合的框架"><a href="#集合的框架" class="headerlink" title="集合的框架"></a>集合的框架</h3><h4 id="Collecton"><a href="#Collecton" class="headerlink" title="Collecton"></a>Collecton</h4><p>接口:单列集合,用来存储一个一个的对象</p><h5 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a><code>List</code>接口</h5><p>存储有序的,可重复的数据———“动态”数组</p><ol><li>ArrayList</li><li>LinkedList</li><li>Vector</li></ol><h5 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a><code>Set</code>接口</h5><p>存储无序的,不可重复的数据——“集合”</p><ol><li><p>HashSet</p></li><li><p>LinkedHashSet</p></li><li><p>TresSet</p></li></ol><h5 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a><code>Map</code>接口</h5><p>双列集合,用来存储一对(key,value)的数据</p><ol><li>HashMap</li><li>LinkedHashMap</li><li>TreeMap</li><li>Hashtable</li><li>Properties</li></ol><h3 id="Collection接口方法"><a href="#Collection接口方法" class="headerlink" title="Collection接口方法"></a>Collection接口方法</h3><h5 id="Collection接口中的常用方法"><a href="#Collection接口中的常用方法" class="headerlink" title="Collection接口中的常用方法"></a>Collection接口中的常用方法</h5><ol><li><p><code>contains(Object obj)</code>: </p><ul><li>当前集合是否包含obj,判断的是内容而不是地址.</li><li>返回值为布尔类型</li></ul></li><li><p><code>equals</code> : </p><ul><li>判断内容是否相等</li><li>返回值为布尔类型</li></ul></li><li><p><code>retainAll(Collection coll)</code> </p><ul><li>获取当前集合与目标集合的交集. </li><li>返回交集的Collection</li></ul></li><li><p><code>hashCode()</code> : </p><ul><li>获取哈希值</li><li>返回数</li></ul></li><li><p><code>toArray()</code> :</p><ul><li>集合转换成数组</li><li>返回值为数组</li></ul></li><li><p><code>Arrays.asList()</code> :</p><ul><li>数组转换成集合.</li><li>返回值为List</li></ul></li><li></li></ol><h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><h4 id="lterator迭代器接口"><a href="#lterator迭代器接口" class="headerlink" title="lterator迭代器接口"></a>lterator迭代器接口</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ol><li><code>hasNext()</code> :  如果迭代具有更多元素，则返回 <code>true</code> 。指针没有移动</li><li><code>next()</code> :先是指针移动过去,然后返回迭代中的下一个元素。</li><li><code>remove()</code> : 从底层集合中移除此迭代器返回的最后一个元素（可选操作）。</li></ol><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>需要知道集合中元素的类型.</p><p>只是把集合中的元素赋值给了<code>x</code>,所以如果你改变<code>x</code>的值,并不会改变数组中的数值.</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>person x <span class="token operator">:</span> persons <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Collection子接口之一-List接口"><a href="#Collection子接口之一-List接口" class="headerlink" title="Collection子接口之一:List接口"></a>Collection子接口之一:List接口</h3><h5 id="List接口-1"><a href="#List接口-1" class="headerlink" title="List接口"></a>List接口</h5><ol><li>List集合类中元素<code>有序</code>,并且可以<code>重复</code>,集合中的每个元素都有其对应的顺序索引.</li><li>List集合类对应的<code>动态</code>数组,替换原有的数组.</li><li>List接口的实现类常用的有: <code>ArrayList</code>, <code>LinkedList</code> 和<code>Vector</code>.</li></ol><h5 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h5><ul><li><p>Collection接口: </p><ul><li><p>List接口: </p><ul><li><p>ArrayList : 作为List接口的主要实现类 ; 线程不安全,效率高,底层使用Object[] elementData存储.</p></li><li><p>LinkedList : 对于频繁的插入和删除操作效率高,底层采用双向链表存储.</p></li><li><p>Vector : 作为List接口的古老实现类; 线程安全,效率低;底层使用Object[] elementData存储.</p></li></ul></li></ul></li></ul><h5 id="ArrayList-LinkedList和Vector三者的异同"><a href="#ArrayList-LinkedList和Vector三者的异同" class="headerlink" title="ArrayList,LinkedList和Vector三者的异同"></a>ArrayList,LinkedList和Vector三者的异同</h5><ol><li>相同<ul><li>三个类都是实现了List接口,存储数据的特点相同: 存储有序的,可重复的数据.</li></ul></li><li>不相同<ul><li>ArrayList作为List接口的主要实现类 ; 线程不安全,效率高,底层使用Object[] elementData存储.</li><li>LinkedList : 对于频繁的插入和删除操作效率高,底层采用双向链表存储.</li><li>Vector : 作为List接口的古老实现类; 线程安全,效率低;底层使用Object[] elementData存储.</li></ul></li></ol><h3 id="Collection子接口之二-Set接口"><a href="#Collection子接口之二-Set接口" class="headerlink" title="Collection子接口之二: Set接口"></a>Collection子接口之二: Set接口</h3><h3 id="Map接口-1"><a href="#Map接口-1" class="headerlink" title="Map接口"></a>Map接口</h3><h4 id="map接口框架"><a href="#map接口框架" class="headerlink" title="map接口框架"></a>map接口框架</h4><ul><li>map<ul><li>Hashtable<ul><li>Properties</li></ul></li><li>HashMap<ul><li>LinkedHashMap</li></ul></li><li>SortedMap<ul><li>TreeMap</li></ul></li></ul></li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>底层采取的是哈希.</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>需要实现比较函数,能够实现排序.</p><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/fan-xing/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>2021.12.23</p></blockquote><h2 id="为什么会有泛型"><a href="#为什么会有泛型" class="headerlink" title="为什么会有泛型"></a>为什么会有泛型</h2><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h3 id="泛型的设计背景"><a href="#泛型的设计背景" class="headerlink" title="泛型的设计背景"></a>泛型的设计背景</h3><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><h3 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h3><h2 id="在集合中使用泛型"><a href="#在集合中使用泛型" class="headerlink" title="在集合中使用泛型"></a>在集合中使用泛型</h2><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h2 id="自定义泛型结构"><a href="#自定义泛型结构" class="headerlink" title="自定义泛型结构"></a>自定义泛型结构</h2><h3 id="自定义泛型举例"><a href="#自定义泛型举例" class="headerlink" title="自定义泛型举例"></a>自定义泛型举例</h3><h3 id="自定义泛型类泛型接口的注意点"><a href="#自定义泛型类泛型接口的注意点" class="headerlink" title="自定义泛型类泛型接口的注意点"></a>自定义泛型类泛型接口的注意点</h3><h3 id="自定义泛型方法举例"><a href="#自定义泛型方法举例" class="headerlink" title="自定义泛型方法举例"></a>自定义泛型方法举例</h3><h3 id="举例泛型类和泛型方法的使用情景"><a href="#举例泛型类和泛型方法的使用情景" class="headerlink" title="举例泛型类和泛型方法的使用情景"></a>举例泛型类和泛型方法的使用情景</h3><h2 id="泛型在继承上的体现-通配符"><a href="#泛型在继承上的体现-通配符" class="headerlink" title="泛型在继承上的体现[通配符]"></a>泛型在继承上的体现[通配符]</h2><h2 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h2><h2 id="泛型应用举例"><a href="#泛型应用举例" class="headerlink" title="泛型应用举例"></a>泛型应用举例</h2><h2 id="自定义泛型类练习"><a href="#自定义泛型类练习" class="headerlink" title="自定义泛型类练习"></a>自定义泛型类练习</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/io-liu/"/>
      <url>/2022/01/17/ji-suan-ji-yu-yan-lei/java-main/io-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="1、File类的使用"><a href="#1、File类的使用" class="headerlink" title="1、File类的使用"></a>1、File类的使用</h2><h3 id="1-1、File类的实例化"><a href="#1-1、File类的实例化" class="headerlink" title="1.1、File类的实例化"></a>1.1、File类的实例化</h3><h3 id="1-2、File类的常用方法1"><a href="#1-2、File类的常用方法1" class="headerlink" title="1.2、File类的常用方法1"></a>1.2、File类的常用方法1</h3><h3 id="1-3、File类的常用方法2"><a href="#1-3、File类的常用方法2" class="headerlink" title="1.3、File类的常用方法2"></a>1.3、File类的常用方法2</h3><h2 id="2、IO流原理及流的分类"><a href="#2、IO流原理及流的分类" class="headerlink" title="2、IO流原理及流的分类"></a>2、IO流原理及流的分类</h2><h3 id="2-1、IO流原理"><a href="#2-1、IO流原理" class="headerlink" title="2.1、IO流原理"></a>2.1、IO流原理</h3><h3 id="2-2、流的分类"><a href="#2-2、流的分类" class="headerlink" title="2.2、流的分类"></a>2.2、流的分类</h3><h3 id="2-3、IO-流体系"><a href="#2-3、IO-流体系" class="headerlink" title="2.3、IO 流体系"></a>2.3、IO 流体系</h3><h2 id="4、节点流-或文件流"><a href="#4、节点流-或文件流" class="headerlink" title="4、节点流(或文件流)"></a>4、节点流(或文件流)</h2><h3 id="4-1、FileReader读入数据的基本操作"><a href="#4-1、FileReader读入数据的基本操作" class="headerlink" title="4.1、FileReader读入数据的基本操作"></a>4.1、FileReader读入数据的基本操作</h3><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span>   <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//1.创建文件</span>       <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/mrl/Desktop/Myproject/MyTest/src/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//2.创建字符流</span>       <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment">//3.读取</span>           fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> data <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment">//4.输出</span>           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment">//5.关闭</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>fr<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、FileReader中使用read-char-cbuf-读入数据"><a href="#4-2、FileReader中使用read-char-cbuf-读入数据" class="headerlink" title="4.2、FileReader中使用read(char[] cbuf)读入数据"></a>4.2、FileReader中使用read(char[] cbuf)读入数据</h3><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span>   <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//1.创建文件</span>       <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/mrl/Desktop/Myproject/MyTest/src/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//2.创建字符流</span>       <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           <span class="token comment">//3.读取</span>           fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  cbuf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//4.输出</span>           <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment">//5.关闭</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>fr<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、FileWriter写出数据的操作"><a href="#4-3、FileWriter写出数据的操作" class="headerlink" title="4.3、FileWriter写出数据的操作"></a>4.3、FileWriter写出数据的操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileWriter</span><span class="token punctuation">(</span><span class="token class-name">File</span> deskPath <span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">FileWriter</span> fw<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             fw <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>deskPath<span class="token punctuation">)</span><span class="token punctuation">;</span>             fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">finally</span>         <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、使用FileReader和FileWriter实现文本文件的复制"><a href="#4-4、使用FileReader和FileWriter实现文本文件的复制" class="headerlink" title="4.4、使用FileReader和FileWriter实现文本文件的复制"></a>4.4、使用FileReader和FileWriter实现文本文件的复制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileWriterFileReader</span><span class="token punctuation">(</span><span class="token class-name">File</span> filePath <span class="token punctuation">,</span><span class="token class-name">File</span> deskPath<span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token class-name">FileReader</span> fr<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token class-name">FileWriter</span> fw<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token class-name">BufferedWriter</span> bw<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           fr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>           fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>deskPath<span class="token punctuation">)</span><span class="token punctuation">;</span>           br <span class="token operator">=</span><span class="token keyword">new</span>   <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>           bw<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  cbuf<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>br<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>bw<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>fr<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5、使用FileInputStream和FileOutputStream读写非文本文件"><a href="#4-5、使用FileInputStream和FileOutputStream读写非文本文件" class="headerlink" title="4.5、使用FileInputStream和FileOutputStream读写非文本文件"></a>4.5、使用FileInputStream和FileOutputStream读写非文本文件</h3><h3 id="4-6、使用FileInputStream和FileOutputStream复制文件的方法测试"><a href="#4-6、使用FileInputStream和FileOutputStream复制文件的方法测试" class="headerlink" title="4.6、使用FileInputStream和FileOutputStream复制文件的方法测试"></a>4.6、使用FileInputStream和FileOutputStream复制文件的方法测试</h3><h2 id="5、缓冲流"><a href="#5、缓冲流" class="headerlink" title="5、缓冲流"></a>5、缓冲流</h2><h3 id="5-1、缓冲流-字节型-实现非文本文件的复制"><a href="#5-1、缓冲流-字节型-实现非文本文件的复制" class="headerlink" title="5.1、缓冲流(字节型)实现非文本文件的复制"></a>5.1、缓冲流(字节型)实现非文本文件的复制</h3><h3 id="5-2、缓冲流与节点流读写速度对比"><a href="#5-2、缓冲流与节点流读写速度对比" class="headerlink" title="5.2、缓冲流与节点流读写速度对比"></a>5.2、缓冲流与节点流读写速度对比</h3><h3 id="5-3、缓冲流-字符型-实现文本文件的复制"><a href="#5-3、缓冲流-字符型-实现文本文件的复制" class="headerlink" title="5.3、缓冲流(字符型)实现文本文件的复制"></a>5.3、缓冲流(字符型)实现文本文件的复制</h3><h3 id="5-4、缓冲流课后练习"><a href="#5-4、缓冲流课后练习" class="headerlink" title="5.4、缓冲流课后练习"></a>5.4、缓冲流课后练习</h3><h2 id="6、转换流"><a href="#6、转换流" class="headerlink" title="6、转换流"></a>6、转换流</h2><h3 id="6-1、转换流概述与InputStreamReader的使用"><a href="#6-1、转换流概述与InputStreamReader的使用" class="headerlink" title="6.1、转换流概述与InputStreamReader的使用"></a>6.1、转换流概述与InputStreamReader的使用</h3><ul><li><p>转换流提供了在字节流和字符流之间的转换</p></li><li><p>Java API提供了两个转换流：</p><ul><li>InputStreamReader：将InputStream转换为Reader<ul><li>实现将字节的输入流按指定字符集转换为字符的输入流。</li><li>需要和InputStream“套接”。</li><li>构造器<ul><li>public InputStreamReader(InputStreamin)</li><li>public InputSreamReader(InputStreamin,StringcharsetName)</li><li>如：Reader isr= new InputStreamReader(System.in,”gbk”);</li></ul></li></ul></li><li>OutputStreamWriter：将Writer转换为OutputStream<ul><li>实现将字符的输出流按指定字符集转换为字节的输出流。</li><li>需要和OutputStream“套接”。<ul><li>构造器<ul><li>public OutputStreamWriter(OutputStreamout)</li><li>public OutputSreamWriter(OutputStreamout,StringcharsetName)</li></ul></li></ul></li></ul></li></ul></li><li><p>字节流中的数据都是字符时，转成字符流操作更高效。</p></li><li><p>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。</p></li></ul><h3 id="6-2、转换流实现文件的读入和写出"><a href="#6-2、转换流实现文件的读入和写出" class="headerlink" title="6.2、转换流实现文件的读入和写出"></a>6.2、转换流实现文件的读入和写出</h3><h3 id="6-3、多种字符编码集的说明"><a href="#6-3、多种字符编码集的说明" class="headerlink" title="6.3、多种字符编码集的说明"></a>6.3、多种字符编码集的说明</h3><h2 id="7、标准输入、输出流"><a href="#7、标准输入、输出流" class="headerlink" title="7、标准输入、输出流"></a>7、标准输入、输出流</h2><h2 id="8、打印流"><a href="#8、打印流" class="headerlink" title="8、打印流"></a>8、打印流</h2><h2 id="9、数据流"><a href="#9、数据流" class="headerlink" title="9、数据流"></a>9、数据流</h2><h2 id="10、对象流"><a href="#10、对象流" class="headerlink" title="10、对象流"></a>10、对象流</h2><h3 id="10-1、对象序列化机制的理解"><a href="#10-1、对象序列化机制的理解" class="headerlink" title="10.1、对象序列化机制的理解"></a>10.1、对象序列化机制的理解</h3><ul><li><p>ObjectInputStream和OjbectOutputSteam</p></li><li><p>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p></li><li><p>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制</p></li><li><p>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制</p></li><li><p>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</p></li><li><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p></li><li><p>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</p></li><li><p>序列化是RMI（Remote Method Invoke –远程方法调用）过程的参数和返回值都必须实现的机制，而RMI 是JavaEE的基础。因此序列化机制是JavaEE平台的基础</p></li><li><p>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出- NotSerializableException异常</p><ul><li>Serializable</li><li>Externalizable</li><li></li></ul></li></ul><h3 id="10-2、对象流序列化与反序列化字符串操作"><a href="#10-2、对象流序列化与反序列化字符串操作" class="headerlink" title="10.2、对象流序列化与反序列化字符串操作"></a>10.2、对象流序列化与反序列化字符串操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 对象流的使用 * 1.ObjectInputStream 和 ObjectOutputStream * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectTest</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去     * 使用ObjectOutputStream实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//创造流</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"object.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//制造对象</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"秦始皇陵欢迎你"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//刷新操作</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//3.关闭流</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 反序列化：将磁盘文件中的对象还原为内存中的一个java对象     * 使用ObjectInputStream来实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"object.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3、自定义类实现序列化与反序列化操作"><a href="#10-3、自定义类实现序列化与反序列化操作" class="headerlink" title="10.3、自定义类实现序列化与反序列化操作"></a>10.3、自定义类实现序列化与反序列化操作</h3><ul><li>若某个类实现了Serializable接口，该类的对象就是可序列化的：<ul><li>创建一个ObjectOutputStream</li><li>调用ObjectOutputStream对象的writeObject(对象) 方法输出可序列化对象</li><li>注意写出一次，操作flush()一次</li></ul></li><li>反序列化<ul><li>创建一个ObjectInputStream对象调用readObject() 方法读取流中的对象</li></ul></li><li>强调：如果某个类的属性不是基本数据类型或String 类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的Field 的类也不能序列化</li></ul><h5 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * Person需要满足如下的要求，方可序列化 * 1.需要实现接口：Serializable   2.定义 serialVersionUID */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">475463534532L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="xxx"><a href="#xxx" class="headerlink" title="xxx"></a>xxx</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">/** * 对象流的使用 * 1.ObjectInputStream 和 ObjectOutputStream * 2.作用：用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。 * * 3.要想一个java对象是可序列化的，需要满足相应的要求。见Person.java * * 4.序列化机制： * 对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种 * 二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。 * 当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectTest</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 序列化过程：将内存中的java对象保存到磁盘中或通过网络传输出去     * 使用ObjectOutputStream实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//创造流</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"object.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//制造对象</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"秦始皇陵欢迎你"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//刷新操作</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李时珍"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//3.关闭流</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 反序列化：将磁盘文件中的对象还原为内存中的一个java对象     * 使用ObjectInputStream来实现     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"object.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-4、serialVersionUID的理解"><a href="#10-4、serialVersionUID的理解" class="headerlink" title="10.4、serialVersionUID的理解"></a>10.4、serialVersionUID的理解</h3><ul><li>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：<ul><li>private static final long serialVersionUID;</li><li>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。</li><li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID可能发生变化。故建议，显式声明。</li></ul></li><li>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</li></ul><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token comment">/** * Person需要满足如下的要求，方可序列化 * 1.需要实现接口：Serializable * 2.当前类提供一个全局常量：serialVersionUID * 3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性 *   也必须是可序列化的。（默认情况下，基本数据类型可序列化） * * * 补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">475463534532L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、随机存取文件流"><a href="#11、随机存取文件流" class="headerlink" title="11、随机存取文件流"></a>11、随机存取文件流</h2><h3 id="11-1、RandomAccessFile实现数据的读写操作"><a href="#11-1、RandomAccessFile实现数据的读写操作" class="headerlink" title="11.1、RandomAccessFile实现数据的读写操作"></a>11.1、RandomAccessFile实现数据的读写操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span></span><span class="token punctuation">;</span><span class="token comment">/** * RandomAccessFile的使用 * 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口 * 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流 * 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。 *   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖） */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1.造流</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">RandomAccessFile</span> raf2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.读取</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">//3.关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-2、RandomAccessFile实现数据的插入操作"><a href="#11-2、RandomAccessFile实现数据的插入操作" class="headerlink" title="11.2、RandomAccessFile实现数据的插入操作"></a>11.2、RandomAccessFile实现数据的插入操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">RandomAccessFile</span></span><span class="token punctuation">;</span><span class="token comment">/** * RandomAccessFile的使用 * 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口 * 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流 * 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。 *   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖） * * 4.可以通过相关的操作，实现RandomAccessFile“插入”数据的效果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 使用RandomAccessFile实现数据的插入效果     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将指针调到角标为3的位置</span>        <span class="token comment">//保存指针3后面的所有数据到StringBuilder中</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//调回指针，写入“xyz”</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将StringBuilder中的数据写入到文件中</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、NIO-2中Path、Paths、Files类的使用"><a href="#12、NIO-2中Path、Paths、Files类的使用" class="headerlink" title="12、NIO.2中Path、Paths、Files类的使用"></a>12、NIO.2中Path、Paths、Files类的使用</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/"/>
      <url>/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h2><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><h3 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h3><h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><h3 id="编码与编制"><a href="#编码与编制" class="headerlink" title="编码与编制"></a>编码与编制</h3><h3 id="通道的极限容量"><a href="#通道的极限容量" class="headerlink" title="通道的极限容量"></a>通道的极限容量</h3><h3 id="物理层的总结"><a href="#物理层的总结" class="headerlink" title="物理层的总结"></a>物理层的总结</h3><h2 id="3-数据链路层"><a href="#3-数据链路层" class="headerlink" title="3. 数据链路层"></a>3. 数据链路层</h2><h3 id="数据链路层概述"><a href="#数据链路层概述" class="headerlink" title="数据链路层概述"></a>数据链路层概述</h3><p><code> 链路（Link）</code>就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。</p><p><code>数据链路（Data Link）</code>是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路。</p><p>数据链路层以<code>帧</code>为单位传输 和处理数据。</p><h3 id="数据链路层的重要问题"><a href="#数据链路层的重要问题" class="headerlink" title="数据链路层的重要问题"></a>数据链路层的重要问题</h3><p>使用点对点信道的数据链路层</p><ol><li>封装成帧:将上层数据封装</li><li>差错检测:通过检测码和检测算法判断误码.</li><li>可靠传输: 尽管误码是不能完全避免的，但若能实现发送方发送什么，<br>  接收方就能收到什么，就称为可靠传输。</li></ol><p>使用广播信道的数据链路层</p><ol><li>共享式以太网的媒体接入控制协议CSMA/CD </li><li>802.11局域网的媒体接入控制协议CSMA/CA</li></ol><p>数据链路层的互连设备</p><ol><li>网桥和交换机的工作原理</li><li>集线器（物理层互连设备）与交换机的区别</li></ol><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><ul><li><p><code>封装成帧</code>是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧。 </p><ul><li><p>帧头和帧尾都有重要的控制信息</p></li><li><p>帧头和帧尾的作用之一就是<code>帧定界</code>。</p></li></ul></li></ul><blockquote><p>并不是每一个协议都有帧定界标志,例如PPP帧有,而以太网V2的MAC帧没有</p></blockquote><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108210101979.png" alt="image-20220108210101979"></p><h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><ul><li><p><code>透明传输</code>是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样</p><ul><li><p>面向字节的物理链路使用字节填充（或称字符填充）的方法实现透明传输。</p><ul><li>内容等于帧定界符的前面加个转义字符来表示这是内容</li></ul></li><li><p>面向比特的物理链路使用比特填充的方法实现透明传输。</p><ul><li>高级数据链路控制协议HDLC采用帧头和帧尾中的标志字段作为帧定界符,其值为01111110;</li></ul></li></ul></li></ul><blockquote><p>HDLC为了实现“透明传输” 采用“零比特填充法”（每5个连续1后面插入一个比特0）</p></blockquote><h4 id="传输效率"><a href="#传输效率" class="headerlink" title="传输效率"></a>传输效率</h4><ol><li>为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些。</li></ol><blockquote><p>帧的数据部分长度应该 &gt; 帧头 + 帧尾</p></blockquote><ol><li>考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，</li></ol><p>  即最大传送单元MTU(Maximum Transfer Unit)</p><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><ul><li>计算机网络中如何选择采用差错检查</li></ul><p>在计算机网络中通常采用我们后续中将要讨论的<code>检错重传方式</code>来纠正传输中的差错，或者仅仅是丢弃检测到差错的帧，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</p><ul><li>比特差错</li></ul><p>实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0，而0也可能变成1。这称为比特差错。</p><ul><li>误码率BER</li></ul><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率BER（Bit Error Rate）。</p><ul><li>差错检错码</li></ul><p>使用差错检测码来检测数据在传输过程中是否产生了比特差错，感数据链路层所要解决的重要问题之一.</p><p>检错码只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此无法纠正错误。</p><p>要想纠正传输中的差错，可以使用冗余信息更多的纠错码进行前向纠错。但纠错码的开销比较大，在计算机网络中较少使用。</p><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><p>在待发送的数据后面添加1位奇偶校验位，使整个数据 （包括所添加的校验位在内）中“1”的个数为奇数（奇校验）或偶数（偶校验）</p><h4 id="循环冗余校验CRC（Cyclic-Redundancy-Check）"><a href="#循环冗余校验CRC（Cyclic-Redundancy-Check）" class="headerlink" title="循环冗余校验CRC（Cyclic Redundancy Check）"></a>循环冗余校验CRC（Cyclic Redundancy Check）</h4><ul><li>CRC的作用</li></ul><p>循环冗余校验CRC有很好的检错能力（漏检率非常低），虽然计算比较复杂，但非常易于用硬件实现，因此被广泛应用于数据链路层。</p><p><strong>CRC流程</strong></p><ol><li><p>收发双方约定好一个生成多项式G（x）；</p></li><li><p>发送方基于待发送的数据和生成多项式计算出差错检测码（冗余码）<br> 将其添加到待传输数据的后面一起传输；</p></li><li><p>接收方通过生成多项式来计算收到的数据是否产生了误码</p><ul><li><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108213610101.png" alt="image-20220108213610101"></p></li><li><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108213750482.png" alt="image-20220108213750482"></p></li></ul></li></ol><p>CRC生成多项式举例</p><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108213945177.png" alt="image-20220108213945177"></p><p>常用的生成多项式</p><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108214010908.png" alt="image-20220108214010908"></p><p><strong>发送方计算余数</strong></p><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220108214202556.png" alt="image-20220108214202556"></p><ul><li>构造被除数</li></ul><blockquote><p>待发送信息后面添加生成多项式最高次数个0</p></blockquote><ul><li>构造除数</li></ul><blockquote><p>生成多项式各项系数构成的比特串</p></blockquote><ul><li><p>做异或运算</p></li><li><p>检查余数</p></li></ul><blockquote><p>余数的位数应与生成多项式最高次数相同，如果位数不够，则在余数前补0来凑足位数。</p></blockquote><ul><li>把余数加在数据后面发送</li></ul><p><strong>接收方</strong></p><ul><li>构造被除数</li></ul><blockquote><p>接收到的信息就是被除数</p></blockquote><ul><li>构造除数</li></ul><blockquote><p>生成多项式各项系数构成的比特串</p></blockquote><ul><li><p>异或运算</p></li><li><p>检查余数</p></li></ul><blockquote><p>余数为0，可认为传输过程无误码；</p><p>余数不为0，可认为传输过程产生误码。</p></blockquote><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><h4 id="可靠传输的基本概念"><a href="#可靠传输的基本概念" class="headerlink" title="可靠传输的基本概念"></a>可靠传输的基本概念</h4><ul><li><p>比特差错只是传输差错中的一种。</p></li><li><p>从整个计算机网络体系结构来看，传输差错还包括分组丢失、分组失序以及分组重复。</p></li><li><p>分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。</p></li><li><p>可靠传输服务并不仅局限于数据链路层，其他各层均可选择实现可靠传输。</p></li><li><p>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用需求。</p></li></ul><h4 id="数据链路层向上层提供的服务类型"><a href="#数据链路层向上层提供的服务类型" class="headerlink" title="数据链路层向上层提供的服务类型"></a>数据链路层向上层提供的服务类型</h4><p>不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做；</p><p>可靠传输服务：想办法实现发送端发送什么，接收端就收到什么。</p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li><p>运输层</p><ul><li><p><code>TCP</code>向其上层提供面向连接的可靠传输服务</p></li><li><p><code>UDP</code>向其上层提供无连接、不可靠传输服务</p></li></ul></li><li><p>网际层</p><ul><li><code>IP</code>向其上层提供无连接、不可靠传输服务</li></ul></li><li><p>网络接口层</p><ul><li><p><code>802.11无线局域网</code>要求数据链路层实现可靠传输</p></li><li><p><code>以太网</code>不要求数据链路层实现可靠传输</p></li></ul></li></ul><h4 id="可靠传输的实现机制"><a href="#可靠传输的实现机制" class="headerlink" title="可靠传输的实现机制"></a>可靠传输的实现机制</h4><ol><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ol><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中。</p></blockquote><p><strong>可靠传输的实现机制–停止-等待协议SW</strong></p><table><thead><tr><th><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220315112216055.png" alt="image-20220315112216055"></th><th><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220315112223388.png" alt="image-20220315112223388"></th><th><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220315112230491.png" alt="image-20220315112230491"></th><th><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/ji-suan-ji-wang-luo/image-20220315112243039.png" alt="image-20220315112243039"></th></tr></thead></table><p><strong>可靠传输的实现机制–回退N帧协议GBN</strong></p><p> <strong>可靠传输的实现机制–选择重传SR</strong></p><h3 id="3-5-点对点协议PPP"><a href="#3-5-点对点协议PPP" class="headerlink" title="3.5.点对点协议PPP"></a>3.5.点对点协议PPP</h3><h3 id="3-6-媒体接入"><a href="#3-6-媒体接入" class="headerlink" title="3.6.媒体接入"></a>3.6.媒体接入</h3><h4 id="3-6-1-媒体接入控制的基本概念"><a href="#3-6-1-媒体接入控制的基本概念" class="headerlink" title="3.6.1.媒体接入控制的基本概念"></a>3.6.1.媒体接入控制的基本概念</h4><h4 id="3-6-2-媒体接入控制–静态划分信道"><a href="#3-6-2-媒体接入控制–静态划分信道" class="headerlink" title="3.6.2.媒体接入控制–静态划分信道"></a>3.6.2.媒体接入控制–静态划分信道</h4><h4 id="3-6-3-随机接入-—CSMA-x2F-CD协议"><a href="#3-6-3-随机接入-—CSMA-x2F-CD协议" class="headerlink" title="3.6.3. 随机接入 —CSMA/CD协议"></a>3.6.3. 随机接入 —CSMA/CD协议</h4><h4 id="3-6-4-随机接入—-CSMA-x2F-CA协议"><a href="#3-6-4-随机接入—-CSMA-x2F-CA协议" class="headerlink" title="3.6.4.随机接入— CSMA/CA协议"></a>3.6.4.随机接入— CSMA/CA协议</h4><h3 id="3-7-地址"><a href="#3-7-地址" class="headerlink" title="3.7 地址"></a>3.7 地址</h3><h4 id="3-7-1-MAC地址"><a href="#3-7-1-MAC地址" class="headerlink" title="3.7.1.MAC地址"></a>3.7.1.MAC地址</h4><h4 id="3-7-2-IP地址"><a href="#3-7-2-IP地址" class="headerlink" title="3.7.2.IP地址"></a>3.7.2.IP地址</h4><h4 id="3-7-3-ARP地址"><a href="#3-7-3-ARP地址" class="headerlink" title="3.7.3.ARP地址"></a>3.7.3.ARP地址</h4><h3 id="3-8-集线器与交换机"><a href="#3-8-集线器与交换机" class="headerlink" title="3.8.集线器与交换机"></a>3.8.集线器与交换机</h3><h4 id="3-8-1-集线器与交换机的区别"><a href="#3-8-1-集线器与交换机的区别" class="headerlink" title="3.8.1.集线器与交换机的区别"></a>3.8.1.集线器与交换机的区别</h4><h3 id="3-9-以太网交换机自学习和转发帧的流程"><a href="#3-9-以太网交换机自学习和转发帧的流程" class="headerlink" title="3.9.以太网交换机自学习和转发帧的流程"></a>3.9.以太网交换机自学习和转发帧的流程</h3><h3 id="3-10-以太网交换机的生成协议STP"><a href="#3-10-以太网交换机的生成协议STP" class="headerlink" title="3.10.以太网交换机的生成协议STP"></a>3.10.以太网交换机的生成协议STP</h3><h3 id="3-11-虚拟局域网VLAN"><a href="#3-11-虚拟局域网VLAN" class="headerlink" title="3.11.虚拟局域网VLAN"></a>3.11.虚拟局域网VLAN</h3><h4 id="3-11-1-虚拟局域网VLAN的概述"><a href="#3-11-1-虚拟局域网VLAN的概述" class="headerlink" title="3.11.1.虚拟局域网VLAN的概述"></a>3.11.1.虚拟局域网VLAN的概述</h4><h4 id="3-11-2-虚拟局域网VLAN的实现机制"><a href="#3-11-2-虚拟局域网VLAN的实现机制" class="headerlink" title="3.11.2.虚拟局域网VLAN的实现机制"></a>3.11.2.虚拟局域网VLAN的实现机制</h4><h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4. 网络层"></a>4. 网络层</h2><h3 id="4-1-网络层的概述"><a href="#4-1-网络层的概述" class="headerlink" title="4.1.网络层的概述"></a>4.1.网络层的概述</h3><h3 id="4-2-网络层提供的两种服务"><a href="#4-2-网络层提供的两种服务" class="headerlink" title="4.2.网络层提供的两种服务"></a>4.2.网络层提供的两种服务</h3><h3 id="4-3-IPv4地址"><a href="#4-3-IPv4地址" class="headerlink" title="4.3.IPv4地址"></a>4.3.IPv4地址</h3><h4 id="4-3-1-分类编址的IPv4地址"><a href="#4-3-1-分类编址的IPv4地址" class="headerlink" title="4.3.1.分类编址的IPv4地址"></a>4.3.1.分类编址的IPv4地址</h4><h4 id="4-3-2-划分子网的IPv4地址"><a href="#4-3-2-划分子网的IPv4地址" class="headerlink" title="4.3.2.划分子网的IPv4地址"></a>4.3.2.划分子网的IPv4地址</h4><h4 id="4-3-3-无分类编址的IPv4地址"><a href="#4-3-3-无分类编址的IPv4地址" class="headerlink" title="4.3.3.无分类编址的IPv4地址"></a>4.3.3.无分类编址的IPv4地址</h4><h4 id="4-3-4-IPv4地址的应用规划"><a href="#4-3-4-IPv4地址的应用规划" class="headerlink" title="4.3.4.IPv4地址的应用规划"></a>4.3.4.IPv4地址的应用规划</h4><h3 id="4-4-IP数据报发送和转发过程"><a href="#4-4-IP数据报发送和转发过程" class="headerlink" title="4.4.IP数据报发送和转发过程"></a>4.4.IP数据报发送和转发过程</h3><h3 id="4-5-静态路由配置及其可能产生的路由环路问题"><a href="#4-5-静态路由配置及其可能产生的路由环路问题" class="headerlink" title="4.5.静态路由配置及其可能产生的路由环路问题"></a>4.5.静态路由配置及其可能产生的路由环路问题</h3><h3 id="4-6-路由选择协议"><a href="#4-6-路由选择协议" class="headerlink" title="4.6.路由选择协议"></a>4.6.路由选择协议</h3><h4 id="4-6-1-路由选择协议概述"><a href="#4-6-1-路由选择协议概述" class="headerlink" title="4.6.1.路由选择协议概述"></a>4.6.1.路由选择协议概述</h4><h4 id="4-6-2-路由信息协议RIP"><a href="#4-6-2-路由信息协议RIP" class="headerlink" title="4.6.2.路由信息协议RIP"></a>4.6.2.路由信息协议RIP</h4><h4 id="4-6-3-开放最短路优先OSPF"><a href="#4-6-3-开放最短路优先OSPF" class="headerlink" title="4.6.3.开放最短路优先OSPF"></a>4.6.3.开放最短路优先OSPF</h4><h4 id="4-6-4-边界网关协议BGP"><a href="#4-6-4-边界网关协议BGP" class="headerlink" title="4.6.4.边界网关协议BGP"></a>4.6.4.边界网关协议BGP</h4><h3 id="4-7-IPv4数据报的首部格式"><a href="#4-7-IPv4数据报的首部格式" class="headerlink" title="4.7.IPv4数据报的首部格式"></a>4.7.IPv4数据报的首部格式</h3><h3 id="4-8-网际控制报文协议ICMP"><a href="#4-8-网际控制报文协议ICMP" class="headerlink" title="4.8.网际控制报文协议ICMP"></a>4.8.网际控制报文协议ICMP</h3><h3 id="4-9-虚拟专用网VPN与网络地址转换NAT"><a href="#4-9-虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="4.9.虚拟专用网VPN与网络地址转换NAT"></a>4.9.虚拟专用网VPN与网络地址转换NAT</h3><h2 id="5-运输层"><a href="#5-运输层" class="headerlink" title="5. 运输层"></a>5. 运输层</h2><h3 id="5-1-运输层概述"><a href="#5-1-运输层概述" class="headerlink" title="5.1.运输层概述"></a>5.1.运输层概述</h3><h3 id="5-2-运输层端口号-复用与分用的概念"><a href="#5-2-运输层端口号-复用与分用的概念" class="headerlink" title="5.2.运输层端口号,复用与分用的概念"></a>5.2.运输层端口号,复用与分用的概念</h3><h3 id="5-3-UDP和TCP的对比"><a href="#5-3-UDP和TCP的对比" class="headerlink" title="5.3.UDP和TCP的对比"></a>5.3.UDP和TCP的对比</h3><h3 id="5-4-TCP的流量控制"><a href="#5-4-TCP的流量控制" class="headerlink" title="5.4.TCP的流量控制"></a>5.4.TCP的流量控制</h3><h3 id="5-5-TCP的堵塞控制"><a href="#5-5-TCP的堵塞控制" class="headerlink" title="5.5.TCP的堵塞控制"></a>5.5.TCP的堵塞控制</h3><h3 id="5-6-TCP超时重传时间的选择"><a href="#5-6-TCP超时重传时间的选择" class="headerlink" title="5.6.TCP超时重传时间的选择"></a>5.6.TCP超时重传时间的选择</h3><h3 id="5-7-TCP可靠传输的实现"><a href="#5-7-TCP可靠传输的实现" class="headerlink" title="5.7.TCP可靠传输的实现"></a>5.7.TCP可靠传输的实现</h3><h3 id="5-8-TCP的运输连接管理"><a href="#5-8-TCP的运输连接管理" class="headerlink" title="5.8.TCP的运输连接管理"></a>5.8.TCP的运输连接管理</h3><h4 id="5-8-1-TCP连接建立"><a href="#5-8-1-TCP连接建立" class="headerlink" title="5.8.1.TCP连接建立"></a>5.8.1.TCP连接建立</h4><h4 id="5-8-2-TCP连接释放"><a href="#5-8-2-TCP连接释放" class="headerlink" title="5.8.2.TCP连接释放"></a>5.8.2.TCP连接释放</h4><h3 id="5-9-TCP报文段的首部格式"><a href="#5-9-TCP报文段的首部格式" class="headerlink" title="5.9.TCP报文段的首部格式"></a>5.9.TCP报文段的首部格式</h3><h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6. 应用层"></a>6. 应用层</h2><h3 id="6-1-应用层概述"><a href="#6-1-应用层概述" class="headerlink" title="6.1.应用层概述"></a>6.1.应用层概述</h3><h3 id="6-2-客户-服务器方式和对等方式"><a href="#6-2-客户-服务器方式和对等方式" class="headerlink" title="6.2.客户-服务器方式和对等方式"></a>6.2.客户-服务器方式和对等方式</h3><h3 id="6-3-动态主机配置协议DHCP"><a href="#6-3-动态主机配置协议DHCP" class="headerlink" title="6.3.动态主机配置协议DHCP"></a>6.3.动态主机配置协议DHCP</h3><h3 id="6-4-域名系统DNS"><a href="#6-4-域名系统DNS" class="headerlink" title="6.4.域名系统DNS"></a>6.4.域名系统DNS</h3><h3 id="6-5-文件传送协议FTP"><a href="#6-5-文件传送协议FTP" class="headerlink" title="6.5.文件传送协议FTP"></a>6.5.文件传送协议FTP</h3><h3 id="6-6-电子邮件"><a href="#6-6-电子邮件" class="headerlink" title="6.6.电子邮件"></a>6.6.电子邮件</h3><h3 id="6-7-万维网WWW"><a href="#6-7-万维网WWW" class="headerlink" title="6.7.万维网WWW"></a>6.7.万维网WWW</h3>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/17/templates/ti-mu-mo-ban/"/>
      <url>/2022/01/17/templates/ti-mu-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><a href=""></a></h3><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>1. </p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="output"><a href="#output" class="headerlink" title="output"></a>output</h5><pre class="line-numbers language-none"><code class="language-none">```### 思路### 代码实现```cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>马克思主义基本原理</title>
      <link href="/2022/01/17/ke-cheng-lei/ma-yuan/"/>
      <url>/2022/01/17/ke-cheng-lei/ma-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="0-导论"><a href="#0-导论" class="headerlink" title="0.导论"></a>0.导论</h2><h3 id="0-1-什么是马克思主义"><a href="#0-1-什么是马克思主义" class="headerlink" title="0.1.什么是马克思主义"></a>0.1.什么是马克思主义</h3><h5 id="马克思主义科学体系的三大组成部分"><a href="#马克思主义科学体系的三大组成部分" class="headerlink" title="马克思主义科学体系的三大组成部分"></a>马克思主义科学体系的三大组成部分</h5><ol><li>马克思主义哲学</li><li>马克思主义政治经济学</li><li>科学社会主义学说</li><li></li></ol><h3 id="0-2-马克思主义的创立与发展"><a href="#0-2-马克思主义的创立与发展" class="headerlink" title="0.2.马克思主义的创立与发展"></a>0.2.马克思主义的创立与发展</h3><h5 id="马克思主义的公开问世"><a href="#马克思主义的公开问世" class="headerlink" title="马克思主义的公开问世"></a>马克思主义的公开问世</h5><p><code>1842年2月</code> , <code>《共产主义党宣言》</code>发表,标志着马克思主义的公开问世.</p><h5 id="马克思一生两个伟大发现"><a href="#马克思一生两个伟大发现" class="headerlink" title="马克思一生两个伟大发现"></a>马克思一生两个伟大发现</h5><ol><li>唯物史观</li><li>剩余价值学说</li></ol><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><ol><li>马克思主义公开问世的标志性著作是<ul><li>哲学的贫困</li><li>共产党宣言</li></ul></li></ol><h3 id="0-3-马克思主义的鲜明特征"><a href="#0-3-马克思主义的鲜明特征" class="headerlink" title="0.3.马克思主义的鲜明特征"></a>0.3.马克思主义的鲜明特征</h3><h5 id="1-科学性"><a href="#1-科学性" class="headerlink" title="1 . 科学性"></a>1 . 科学性</h5><blockquote><p>马克思主义是在社会实践和科学发展的基础上产生的,并在自身发展过程中不断总结实践经验,吸取自然科学和社会科学发展的最新成就.</p></blockquote><h5 id="2-人民性"><a href="#2-人民性" class="headerlink" title="2. 人民性"></a>2. 人民性</h5><blockquote><p>人民至上是马克主义的政治立场,马克思主义政党把人民放在心中最高位置,一切奋斗都致力于实现最广大人民的根本利益.</p></blockquote><h5 id="3-实践性"><a href="#3-实践性" class="headerlink" title="3. 实践性"></a>3. 实践性</h5><blockquote><p>马克思主义从实践来,到实践中去,在实践中接受检验,并随实践不断发展的学说</p></blockquote><h5 id="4-发展性"><a href="#4-发展性" class="headerlink" title="4. 发展性"></a>4. 发展性</h5><blockquote><p>马克思主义是时代的产物,并随着时代,实践和科学的发展不断发展.</p></blockquote><p><strong>这些特征表示类类马克思主义的本质和使命,展现出马克思主义的理论形象.是科学性与革命性的统一</strong></p><h3 id="0-4-马克思主义的当代价值"><a href="#0-4-马克思主义的当代价值" class="headerlink" title="0.4.马克思主义的当代价值"></a>0.4.马克思主义的当代价值</h3><h3 id="0-5-直觉学习和运用马克思主义"><a href="#0-5-直觉学习和运用马克思主义" class="headerlink" title="0.5.直觉学习和运用马克思主义"></a>0.5.直觉学习和运用马克思主义</h3><h2 id="1-世界的物质性及其发展规律"><a href="#1-世界的物质性及其发展规律" class="headerlink" title="1. 世界的物质性及其发展规律"></a>1. 世界的物质性及其发展规律</h2><h3 id="1-1-世界的多样性与物质统一性"><a href="#1-1-世界的多样性与物质统一性" class="headerlink" title="1.1. 世界的多样性与物质统一性"></a>1.1. 世界的多样性与物质统一性</h3><h4 id="1-1-1-物质及其存在方式"><a href="#1-1-1-物质及其存在方式" class="headerlink" title="1.1.1.物质及其存在方式"></a>1.1.1.物质及其存在方式</h4><h5 id="哲学的物质范畴"><a href="#哲学的物质范畴" class="headerlink" title="哲学的物质范畴"></a>哲学的物质范畴</h5><ol><li><code>古代朴素唯物主义</code>用某一种或几种物质作为本原,来解释世界,在当时具有合理性和进步性</li></ol><h5 id="历史唯心主义"><a href="#历史唯心主义" class="headerlink" title="历史唯心主义"></a>历史唯心主义</h5><p>历史唯心主义有两个根本缺陷</p><ol><li>看不到<code>物质生产</code>是人们思想动机的根源</li><li>不承认<code>人民群众</code>是推动发展的决定性力量</li></ol><h4 id="1-1-2-物质与意识的辩证关系"><a href="#1-1-2-物质与意识的辩证关系" class="headerlink" title="1.1.2.物质与意识的辩证关系"></a>1.1.2.物质与意识的辩证关系</h4><h5 id="物质决定意识"><a href="#物质决定意识" class="headerlink" title="物质决定意识"></a>物质决定意识</h5><ol><li><code>意识</code>在内容上是客观的,在形式上是主观的,是<code>客观内容</code>和<code>主观形式</code>的统一</li><li><code>观念的东西</code>不外是移入人的头脑并在人的头脑中改造过的物质的东西而已</li></ol><h5 id="意识对物质具有能动作用"><a href="#意识对物质具有能动作用" class="headerlink" title="意识对物质具有能动作用"></a>意识对物质具有能动作用</h5><ul><li><p>意识对物质具有<code>能动作用</code>,意识的能动作用主要表现在</p><ol><li><p>意识具有目的性和计划性</p><ul><li><blockquote><p>马克思说过: 人在劳动过程结束时得到的结果,从这过程开始的时候就已经在劳动者的表象中存在着,即已经观念地存在着.</p></blockquote></li></ul></li><li><p>意识具有创造性</p></li><li><p>意识具有指导实践改造客观世界的作用</p><blockquote><p>列宁说过: 世界不会满足人,人决定以自己的行动来改变世界</p></blockquote></li><li><p>意识具有调控人的行为和生理活动的作用</p></li></ol></li></ul><h5 id="主观能动性和客观规律性的辩证统一"><a href="#主观能动性和客观规律性的辩证统一" class="headerlink" title="主观能动性和客观规律性的辩证统一"></a>主观能动性和客观规律性的辩证统一</h5><p><code>主观能动性</code> : 是指人们能动地认识世界,能动地改造世界的实际能力和作用</p><p><code>客观规律性</code>  : 是指事物运动过程中本身所固有的本质的联系和必然的趋势</p><p><strong>正确认识和把握物质与意识的辩证关系,还需要处理好主观能动性和客观规律性的关系</strong></p><ol><li>尊重<code>客观规律性</code>是正确发挥<code>主观能动性</code>的<code>前提</code></li><li>只有充分发挥<code>主观能动性</code>,才能正确认识和利用<code>客观规律</code>.</li><li>正确发挥人的<code>主观能动性</code>,还要依赖一定的<code>物质条件与物质手段</code>—“巧妇难为无米之炊”,没有现实的原材料,人的意识再巧也创造不出任何物质的东西来</li><li></li></ol><h4 id="1-1-3-世界的物质统一性"><a href="#1-1-3-世界的物质统一性" class="headerlink" title="1.1.3.世界的物质统一性"></a>1.1.3.世界的物质统一性</h4><h3 id="1-2-事物的普遍联系和变化发展"><a href="#1-2-事物的普遍联系和变化发展" class="headerlink" title="1.2. 事物的普遍联系和变化发展"></a>1.2. 事物的普遍联系和变化发展</h3><h4 id="1-2-1-联系和发展的普遍性"><a href="#1-2-1-联系和发展的普遍性" class="headerlink" title="1.2.1.联系和发展的普遍性"></a>1.2.1.联系和发展的普遍性</h4><p><strong>联系和发展的观点是唯物辩证法的总观点</strong></p><h5 id="联系的特点"><a href="#联系的特点" class="headerlink" title="联系的特点"></a>联系的特点</h5><ol><li><p>联系具有客观性</p></li><li><p>联系具有普遍性</p><blockquote><ol><li>任何事物都不能孤立存在,都同其他事物处于一定的联系之中</li><li>整个世界是相互联系的统一整体</li></ol></blockquote></li><li><p>联系具有多样性</p></li><li><p>联系具有条件性</p></li></ol><h4 id="1-2-2-对立统一规律是事物发展的根本规律"><a href="#1-2-2-对立统一规律是事物发展的根本规律" class="headerlink" title="1.2.2.对立统一规律是事物发展的根本规律"></a>1.2.2.对立统一规律是事物发展的根本规律</h4><p><strong>对立统一规律是唯物辩证法的实质和核心</strong></p><h5 id="矛盾的普遍性"><a href="#矛盾的普遍性" class="headerlink" title="矛盾的普遍性"></a>矛盾的普遍性</h5><p><code>矛盾普遍性</code> :  是指矛盾存在于一切事物中,存在于一切事物发展过程中.</p><blockquote><p>“矛盾无处不在,矛盾无时不有”就是对矛盾普遍性的形象表述</p></blockquote><h5 id="矛盾的特殊性"><a href="#矛盾的特殊性" class="headerlink" title="矛盾的特殊性"></a>矛盾的特殊性</h5><p><code>矛盾的特殊性</code>: 是指是指各个具体事物的矛盾,每一个矛盾的各个方面在发展的不同阶段都有其特点</p><ol><li><p><code>矛盾的特殊性</code>决定了事物的不同性质</p></li><li><p>只有<code>具体</code>的分析<code>矛盾的特殊性</code>,才能<code>认清</code>矛盾的本质和发展规律,并<code>采取</code>正确的方法和措施去解决矛盾,推动事物的发展.</p></li></ol><h4 id="1-2-3-量变质变规律和否定之否定规律"><a href="#1-2-3-量变质变规律和否定之否定规律" class="headerlink" title="1.2.3.量变质变规律和否定之否定规律"></a>1.2.3.量变质变规律和否定之否定规律</h4><h5 id="量变质变规律"><a href="#量变质变规律" class="headerlink" title="量变质变规律"></a>量变质变规律</h5><p><strong>量变质变规律体现了事物发展的渐进性和飞跃性的统一</strong></p><p><code>质</code> : 是指一事物区别于其他事物的内在规定性.</p><p><code>量</code> : 是指事物的规模,程度,速度等可以用数量关系表示的规定性.</p><ul><li>量变和质变的辩证关系<ol><li><p>量变是质变的必要准备</p><blockquote><p>任何事情的变化都有一个量变的积累过程,没有量变的积累,质变就不会发生.</p></blockquote></li><li><p>质变是量变的必然结果</p><blockquote><p>单纯的量变不会永远持续下去,量变达到一定程度必然引起质变</p></blockquote></li><li><p>量变和质变相互渗透</p></li></ol></li></ul><h4 id="1-2-4-联系与发展的基本环节"><a href="#1-2-4-联系与发展的基本环节" class="headerlink" title="1.2.4.联系与发展的基本环节"></a>1.2.4.联系与发展的基本环节</h4><h5 id="1-内容与形式"><a href="#1-内容与形式" class="headerlink" title="1.内容与形式"></a>1.内容与形式</h5><ul><li><p>内容</p><ol><li><code>内容</code>是指构成事物的一切要素的总和</li></ol></li><li><p>形式</p><ol><li><code>形式</code>是指把诸要素统一起来的结构或表现内容的方式</li></ol></li><li><p>任何事物都是内容与形式的统一</p><ol><li><p>内容是事物存在的基础,对形式具有决定的作用</p></li><li><p>形式对内容具有反作用,适合的内容的形式,对内容的发展起积极的推动作用.</p></li></ol></li><li><p>形式具有相对独立性,同一内容可以用多种形式来呈现.</p></li></ul><h5 id="2-本质与现象"><a href="#2-本质与现象" class="headerlink" title="2. 本质与现象"></a>2. 本质与现象</h5><h5 id="3-原因与结果"><a href="#3-原因与结果" class="headerlink" title="3. 原因与结果"></a>3. 原因与结果</h5><h5 id="4-必然与偶然"><a href="#4-必然与偶然" class="headerlink" title="4. 必然与偶然"></a>4. 必然与偶然</h5><h5 id="5-现实与可能"><a href="#5-现实与可能" class="headerlink" title="5. 现实与可能"></a>5. 现实与可能</h5><h3 id="1-3-唯物辩证法是认识世界和改造世界的根本方法"><a href="#1-3-唯物辩证法是认识世界和改造世界的根本方法" class="headerlink" title="1.3. 唯物辩证法是认识世界和改造世界的根本方法"></a>1.3. 唯物辩证法是认识世界和改造世界的根本方法</h3><h4 id="1-3-1-唯物辩证法的本质特征和认识功能"><a href="#1-3-1-唯物辩证法的本质特征和认识功能" class="headerlink" title="1.3.1.唯物辩证法的本质特征和认识功能"></a>1.3.1.唯物辩证法的本质特征和认识功能</h4><h5 id="唯物辩证法本质上是批判的和革命的"><a href="#唯物辩证法本质上是批判的和革命的" class="headerlink" title="唯物辩证法本质上是批判的和革命的"></a>唯物辩证法本质上是批判的和革命的</h5><ul><li><p><strong>恩格斯指出</strong></p><ol><li><p>“马克思的整个世界观不是教义,而是方法,他提供的不是现成的教条,而是进一步研究的出发点和供这种研究的方法”</p></li><li><p>“在辩证哲学面前,不存在任何最终的东西,绝对的东西,神圣的东西,他指出所有一切事物的暂时性.”</p></li><li></li></ol></li><li><p><strong>马克思指出</strong></p><ol><li><p>·“辩证法在对现存事物的肯定的理解中同时包含对现存事物的否定的理解,即对<code>现存事物的必然灭亡的理解</code>”</p></li><li><p>“辩证法对每一种现成形式都是从不断的运动中,因而也是从他的<code>暂时性</code>方面去理解”</p></li><li><p>“辩证法不崇拜任何东西,任其本质来说,他是批判的和革命的”.</p></li></ol></li></ul><h5 id="唯物辩证法是客观辩证法和主观辩证法的统一"><a href="#唯物辩证法是客观辩证法和主观辩证法的统一" class="headerlink" title="唯物辩证法是客观辩证法和主观辩证法的统一"></a>唯物辩证法是客观辩证法和主观辩证法的统一</h5><ol><li><p>在<code>马克思主义哲学</code>中,唯物论和辩证论是统一的</p></li><li><p>就<code>唯物辩证法</code>的本身来看,唯物论和辩证法的统一还体现为<code>客观辩证法</code>和<code>主观辩证法</code>的统一</p><p> 唯物辩证法即是客观辩证法,也是主观辩证法,是二者的<code>有机统一</code>.</p></li></ol><h5 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h5><ol><li>唯物辩证法的总特征是<ul><li>联系和发展的观点</li></ul></li></ol><h4 id="1-3-2-辩证思维方法与现代科学思维方法"><a href="#1-3-2-辩证思维方法与现代科学思维方法" class="headerlink" title="1.3.2.辩证思维方法与现代科学思维方法"></a>1.3.2.辩证思维方法与现代科学思维方法</h4><h5 id="辩证思维方法"><a href="#辩证思维方法" class="headerlink" title="辩证思维方法"></a>辩证思维方法</h5><ol><li>归纳</li><li>演绎</li><li>分析与综合</li><li>抽象与具体</li><li>逻辑与历史相统一</li></ol><h2 id="2-实践与认识及其发展规律"><a href="#2-实践与认识及其发展规律" class="headerlink" title="2. 实践与认识及其发展规律"></a>2. 实践与认识及其发展规律</h2><h3 id="2-1-实践与认识"><a href="#2-1-实践与认识" class="headerlink" title="2.1. 实践与认识"></a>2.1. 实践与认识</h3><h4 id="2-1-1-实践的本质与基本结构"><a href="#2-1-1-实践的本质与基本结构" class="headerlink" title="2.1.1. 实践的本质与基本结构"></a>2.1.1. 实践的本质与基本结构</h4><h5 id="实践的本质"><a href="#实践的本质" class="headerlink" title="实践的本质"></a>实践的本质</h5><p><strong>实践的定义</strong> : 实践是<code>人类</code>能动地<code>改造世界</code>的<code>社会性</code>的<code>物质活动</code></p><ul><li>实践的本质<ol><li><p>实践具有客观存在性</p><blockquote><p>实践是人类改造世界的客观物质活动</p></blockquote></li><li><p>实践具有直觉能动性</p><blockquote><p>人的实践活动是一种有意识的,有目的的活动</p></blockquote></li><li><p>实践具有社会历史性</p><blockquote><p>实践是社会性的,历史性的活动.</p></blockquote></li></ol></li></ul><h5 id="实践的基本结构"><a href="#实践的基本结构" class="headerlink" title="实践的基本结构"></a>实践的基本结构</h5><ol><li><p>实践主体</p><blockquote><p>实践主体:是指具有一定的主体能力从事现实社会实践活动的人</p></blockquote><ul><li>实践主体有三种基本形态<ol><li>个体主体</li><li>群体主体</li><li>人类主体</li></ol></li></ul></li><li><p>实践客体</p><blockquote><p>实践客体:是指实践活动所指向的对象</p></blockquote></li><li><p>实践中介</p><blockquote><p>实践中介 : 是指各种形式的工具,手段以及运用这些工具手段的程序的方法.</p></blockquote></li></ol><h5 id="实践形式的基本类型"><a href="#实践形式的基本类型" class="headerlink" title="实践形式的基本类型"></a>实践形式的基本类型</h5><ol><li><p>物质生产实践</p></li><li><p>社会政治实践</p></li><li><p>科学文化实践</p></li></ol><h5 id="实践对认识的决定作用"><a href="#实践对认识的决定作用" class="headerlink" title="实践对认识的决定作用"></a>实践对认识的决定作用</h5><p><strong>index-材料分析</strong></p><ul><li>辩证唯物主义认为:<ol><li>在实践和认识之间,实践是认识的基础,实践在认识活动中起着决定性的作用.</li><li>“实践的观点是辩证唯物论的认识论之第一和基本的观点“</li></ol></li><li><strong>实现对认识的决定作用</strong><ol><li>实践是认识的<code>来源</code></li><li>实践是认识发展的<code>动力</code></li><li>实践是认识的<code>目的</code></li><li>实践是<code>检验认识真理性的唯一标准</code>.</li></ol></li></ul><h4 id="2-1-2-认识的本质与过程"><a href="#2-1-2-认识的本质与过程" class="headerlink" title="2.1.2. 认识的本质与过程"></a>2.1.2. 认识的本质与过程</h4><h5 id="从实践到认识"><a href="#从实践到认识" class="headerlink" title="从实践到认识"></a>从实践到认识</h5><p><code>感性认识</code>:是指人们在实践的基础上,由感觉器官直接感受到的关于事物的现象,事物的外在联系,事物的各个方面的认识.</p><ul><li><p>感性认识的三种形式</p><ol><li>感觉</li><li>知觉</li><li>表象</li></ol></li></ul><p><code>理性认识</code> : 是指人们借助抽象思维,在概括整理大量的感性材料的基础上,达到关于事物的本质,全体,内部联系和事物自身规律性的认识.</p><ul><li>理性认识的三种形式<ol><li>概念</li><li>判断</li><li>推理</li></ol></li></ul><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><ol><li>感性认识是对现象的认识,理性认识是对本质的认识<ol><li>​认识的本质是主体对客体的能动反映,马克思主义认识论对认识的本质的概括</li><li><code>辩证唯物论的能动的反映论</code>与<code>旧唯物论的机械的反映论</code>的对立</li><li><code>唯物论的反映论</code>与<code>唯心论的认识</code>论对立</li><li><code>可知论</code>与<code>不可知论</code>的对立</li></ol></li></ol><h4 id="2-1-3-实践与认识的辩证运动及其规律"><a href="#2-1-3-实践与认识的辩证运动及其规律" class="headerlink" title="2.1.3. 实践与认识的辩证运动及其规律"></a>2.1.3. 实践与认识的辩证运动及其规律</h4><p><strong>index-材料分析</strong></p><p>实践与认识的辩证运动,是一个由<code>感性知识</code>到<code>理性认识</code>,再由<code>理性认识</code>到<code>实践</code>的飞跃,是实践,认识,再实践,再认识,循环往复以至无穷的<code>辩证发展过程</code>.</p><blockquote><p>这个过程是认识在实践的基础上沿着科学性方向不断深化发展的过程,也是实践在认识的指导下沿着合理性不断深入推进的过程.</p></blockquote><h3 id="2-2-真理与价值"><a href="#2-2-真理与价值" class="headerlink" title="2.2. 真理与价值"></a>2.2. 真理与价值</h3><h4 id="2-2-1-真理的客观性-绝对性和相对性"><a href="#2-2-1-真理的客观性-绝对性和相对性" class="headerlink" title="2.2.1.真理的客观性,绝对性和相对性"></a>2.2.1.真理的客观性,绝对性和相对性</h4><h4 id="2-2-2-真理的检验标准"><a href="#2-2-2-真理的检验标准" class="headerlink" title="2.2.2.真理的检验标准"></a>2.2.2.真理的检验标准</h4><h4 id="2-2-3-真理与价值的辩证统一"><a href="#2-2-3-真理与价值的辩证统一" class="headerlink" title="2.2.3.真理与价值的辩证统一"></a>2.2.3.真理与价值的辩证统一</h4><h5 id="价值的基本特性"><a href="#价值的基本特性" class="headerlink" title="价值的基本特性"></a>价值的基本特性</h5><ol><li><p>价值的<code>主体性</code></p><blockquote><p>价值的主体性: 是指价值直接与主体相联系,始终以主体为中心.</p></blockquote></li><li><p>价值的<code>客观性</code></p><blockquote><p>价值的客观性: 在一定条件下客体对于主体的意义并不依赖于主体的主观意识而存在.</p></blockquote></li><li><p>价值的<code>多维性</code></p><blockquote><p>价值的多维性: 是指每个主体的价值关系具有多样性,同一客体相对于主体的不同需要会产生不同的价值</p><p>例如钻石对于主体的不同需要来说,会产生科学研究价值,审美价值,经济价值等.</p></blockquote></li><li><p>价值的<code>社会历史性</code></p><blockquote><p>价值的社会历史性 : 是指主体和客体的不断变化决定了价值的社会历史性.</p></blockquote></li></ol><h5 id="价值评价及其特点"><a href="#价值评价及其特点" class="headerlink" title="价值评价及其特点"></a>价值评价及其特点</h5><p>价值评价要以<code>真理</code>作为根据,要有利于<code>人类主体</code>的生存和发展,与社会历史的客观发展相一致,推动<code>社会历史</code>进步,<code>以最广大人民的需要和利益为根本</code>.</p><h5 id="真理与价值的尺度"><a href="#真理与价值的尺度" class="headerlink" title="真理与价值的尺度"></a>真理与价值的尺度</h5><p><strong>人们的实践活动总是受着真理尺度和价值尺度的制约</strong></p><p><code>实践的真理尺度</code> : 是指实践中人们必须遵循正确反映客观事物本质和规律的真理</p><p><code>实践的价值尺度</code> : 是指在实践中人们都是按照自己的尺度和需要去认识世界和改造世界.</p><h3 id="2-3-认识世界和改造世界"><a href="#2-3-认识世界和改造世界" class="headerlink" title="2.3. 认识世界和改造世界"></a>2.3. 认识世界和改造世界</h3><h4 id="2-3-1-认识世界和改造世界结合"><a href="#2-3-1-认识世界和改造世界结合" class="headerlink" title="2.3.1.认识世界和改造世界结合"></a>2.3.1.认识世界和改造世界结合</h4><h5 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h5><ol><li>认识世界和改造世界是辩证统一的,表现在<ul><li>认识的任务不仅在于解释世界,更重要的在于改变世界.</li><li>要有效地改造世界,必须正确地认识世界</li><li>认识和改造客观世界的过程也是认识和改造主观世界的过程</li></ul></li></ol><h4 id="2-3-2-一切从实际出发-实事求是"><a href="#2-3-2-一切从实际出发-实事求是" class="headerlink" title="2.3.2.一切从实际出发,实事求是"></a>2.3.2.一切从实际出发,实事求是</h4><h5 id="我国社会的主要矛盾"><a href="#我国社会的主要矛盾" class="headerlink" title="我国社会的主要矛盾"></a>我国社会的主要矛盾</h5><ul><li>我国社会的主要矛盾已经转化为<ul><li>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾.</li></ul></li></ul><h4 id="2-3-3-实现理论创新和实践创新的良性循环"><a href="#2-3-3-实现理论创新和实践创新的良性循环" class="headerlink" title="2.3.3.实现理论创新和实践创新的良性循环"></a>2.3.3.实现理论创新和实践创新的良性循环</h4><h2 id="3-人类社会及其发展规律"><a href="#3-人类社会及其发展规律" class="headerlink" title="3. 人类社会及其发展规律"></a>3. 人类社会及其发展规律</h2><h3 id="3-1-人类社会的存在与发展"><a href="#3-1-人类社会的存在与发展" class="headerlink" title="3.1. 人类社会的存在与发展"></a>3.1. 人类社会的存在与发展</h3><h4 id="3-1-1-社会存在与社会意识"><a href="#3-1-1-社会存在与社会意识" class="headerlink" title="3.1.1.社会存在与社会意识"></a>3.1.1.社会存在与社会意识</h4><h5 id="社会存在"><a href="#社会存在" class="headerlink" title="社会存在"></a>社会存在</h5><p>index-名词解释</p><ul><li><code>社会存在</code>是指社会物质生活条件,是社会生活的物质方面,主要包括<code>自然地理环境</code>,<code>人口因素</code>,<code>物质生产方式</code>.<ol><li>自然地理环境</li><li>人口因素</li><li>物质生产方式 : 物质资料的生产方式才是社会发展的决定力量.</li></ol></li></ul><h5 id="社会意识"><a href="#社会意识" class="headerlink" title="社会意识"></a>社会意识</h5><p><strong>index-名词解释</strong></p><ul><li><code>社会意识</code>是社会存在的反映,是社会生活的精神方面.</li></ul><h4 id="3-1-2-社会基本矛盾及其运动规律"><a href="#3-1-2-社会基本矛盾及其运动规律" class="headerlink" title="3.1.2.社会基本矛盾及其运动规律"></a>3.1.2.社会基本矛盾及其运动规律</h4><h5 id="经济基础与上层建筑的矛盾运动及其规律"><a href="#经济基础与上层建筑的矛盾运动及其规律" class="headerlink" title="经济基础与上层建筑的矛盾运动及其规律"></a>经济基础与上层建筑的矛盾运动及其规律</h5><ul><li><p>经济基础</p><ul><li><code>经济基础</code> : 是指社会一定发展阶段的生产力所决定的<code>生产关系的总和</code></li></ul></li><li><p>上层建筑 index-名词解释</p><ul><li><code>上层建筑</code> : 是指建立在一定经济基础之上的<code>意识形态</code>以及与之相适应的制度,组织和设施.</li><li>自原始社会解体以来,上层建筑由两部分构成<ol><li>意识形态</li><li>政治法律制度及设施组织</li></ol></li></ul></li></ul><ol><li><p><strong>经济基础决定上层建筑,上层建筑反作用于经济基础,二者相互影响,相互作用.</strong></p></li><li><p><strong>任何社会的上层建筑都源于他的经济基础</strong></p></li></ol><ul><li><p>国家的实质</p><ul><li><code>国家</code>是一个阶级统治另一个阶级的工具,是经济上占支配地位的阶级为维护其根本利益而建立起来的强制性的暴力机关,以保障其在政治也为统治阶级.</li></ul></li></ul><h4 id="3-1-3-社会形态更替的一般规律及其特殊形式"><a href="#3-1-3-社会形态更替的一般规律及其特殊形式" class="headerlink" title="3.1.3.社会形态更替的一般规律及其特殊形式"></a>3.1.3.社会形态更替的一般规律及其特殊形式</h4><h5 id="社会形态的内涵"><a href="#社会形态的内涵" class="headerlink" title="社会形态的内涵"></a>社会形态的内涵</h5><ul><li><p>社会形态</p><ul><li>社会形态具有不以人的意志为转移的客观规律性</li><li><code>社会形态</code>是关于<code>社会运动的具体形式</code>,<code>发展状态</code>和<code>不同质态</code>的范畴.<br>  是同生产力发展一定阶段相适应的<code>经济基础</code>与<code>上层建筑</code>的<code>统一体</code></li></ul></li><li><p>社会形态包括如下三种形态</p><ol><li>经济形态</li><li>政治形态</li><li>意识形态</li></ol></li></ul><h3 id="3-2-社会历史发展的动力"><a href="#3-2-社会历史发展的动力" class="headerlink" title="3.2. 社会历史发展的动力"></a>3.2. 社会历史发展的动力</h3><h5 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h5><ol><li><code>阶级斗争</code>是<code>阶级社会发展</code>的<code>直接动力</code></li></ol><h4 id="3-2-1-社会基本矛盾在历史发展中的作用"><a href="#3-2-1-社会基本矛盾在历史发展中的作用" class="headerlink" title="3.2.1.社会基本矛盾在历史发展中的作用"></a>3.2.1.社会基本矛盾在历史发展中的作用</h4><h4 id="3-2-2-阶级斗争和社会革命在阶级社会发展中的作用"><a href="#3-2-2-阶级斗争和社会革命在阶级社会发展中的作用" class="headerlink" title="3.2.2.阶级斗争和社会革命在阶级社会发展中的作用"></a>3.2.2.阶级斗争和社会革命在阶级社会发展中的作用</h4><h4 id="3-2-3-改革在社会发展中的作用"><a href="#3-2-3-改革在社会发展中的作用" class="headerlink" title="3.2.3.改革在社会发展中的作用"></a>3.2.3.改革在社会发展中的作用</h4><h5 id="社会基本矛盾运动"><a href="#社会基本矛盾运动" class="headerlink" title="社会基本矛盾运动"></a>社会基本矛盾运动</h5><ul><li><code>社会基本矛盾运动</code>的结果表现为<ol><li><p>通过革命实现一种新的社会制度取代旧的社会制度</p></li><li><p>通过<code>革命</code>实现<code>社会制度</code>的自我<code>调整</code>和<code>完善</code>.</p></li></ol></li></ul><ol><li>社会主义的改革是社会主义制度的自我完善和发展</li><li></li></ol><h4 id="3-2-4-科学技术在社会发展中的作用"><a href="#3-2-4-科学技术在社会发展中的作用" class="headerlink" title="3.2.4.科学技术在社会发展中的作用"></a>3.2.4.科学技术在社会发展中的作用</h4><h5 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h5><ol><li><p>科学技术也是生产力</p><ol><li>因为他能引起劳动对象的变革,促进劳动者素质的提高</li><li>提高劳动生产率</li><li>提高管理效率</li><li>渗透在基本要素中,从而促进生产力的发展</li></ol></li><li><p>科学技术属于现代生产力系统的要素,这是因为它渗透到生产力诸要素之中并转化为现实.</p></li></ol><h3 id="3-3-人民群众在历史发展中的作用"><a href="#3-3-人民群众在历史发展中的作用" class="headerlink" title="3.3. 人民群众在历史发展中的作用"></a>3.3. 人民群众在历史发展中的作用</h3><h4 id="3-3-1-人民群众是历史的创造者"><a href="#3-3-1-人民群众是历史的创造者" class="headerlink" title="3.3.1.人民群众是历史的创造者"></a>3.3.1.人民群众是历史的创造者</h4><h5 id="人民群众在创造历史的过程中的决定作用"><a href="#人民群众在创造历史的过程中的决定作用" class="headerlink" title="人民群众在创造历史的过程中的决定作用"></a>人民群众在创造历史的过程中的决定作用</h5><ul><li><p><code>人民群众</code>是社会历史的主体,是历史的创造者,这也是<code>马克思主义最基本的观点之一</code></p></li><li><p>从质上看</p><ol><li><code>人民群众</code>是指一切对社会历史发展起推动作用的人</li><li><code>人民群众</code>是社会人口中的绝大多数</li></ol></li><li><p>在社会历史发展过程中,<code>人民群众</code>起着<code>决定性</code>的作用</p><ol><li><p>人民群众是社会历史实践的<code>主体</code></p></li><li><p>人民群众是顺应<code>生产力</code>发展要求的社会力量</p></li><li><p>人民群众是社会物质财富的创造者,<strong>人类社会赖以生存和发展的基础是物质资料的生产方式,广大的劳动群众是物质资料生产活动的主体</strong></p></li><li><p>人民群众是社会精神财富的创造者,物质生产活动的主体是广大人民群众</p></li><li><p>人民群众是社会变革的社会力量,人民群众在创造社会财富的同时也在创造并改造着社会关系</p></li></ol></li></ul><h4 id="3-3-2-个人在历史中的作用"><a href="#3-3-2-个人在历史中的作用" class="headerlink" title="3.3.2.个人在历史中的作用"></a>3.3.2.个人在历史中的作用</h4><h4 id="3-3-3-群众-阶级-政党-领袖的关系"><a href="#3-3-3-群众-阶级-政党-领袖的关系" class="headerlink" title="3.3.3.群众,阶级,政党,领袖的关系"></a>3.3.3.群众,阶级,政党,领袖的关系</h4><h2 id="4-资本主义的本质及其规律"><a href="#4-资本主义的本质及其规律" class="headerlink" title="4. 资本主义的本质及其规律"></a>4. 资本主义的本质及其规律</h2><h3 id="4-1-商品经济的价值规律"><a href="#4-1-商品经济的价值规律" class="headerlink" title="4.1. 商品经济的价值规律"></a>4.1. 商品经济的价值规律</h3><h4 id="4-1-1-商品经济的形成和发展"><a href="#4-1-1-商品经济的形成和发展" class="headerlink" title="4.1.1. 商品经济的形成和发展"></a>4.1.1. 商品经济的形成和发展</h4><h4 id="4-1-2-价值规律及其作用"><a href="#4-1-2-价值规律及其作用" class="headerlink" title="4.1.2. 价值规律及其作用"></a>4.1.2. 价值规律及其作用</h4><h5 id="价值规律的表现形式"><a href="#价值规律的表现形式" class="headerlink" title="价值规律的表现形式"></a>价值规律的表现形式</h5><p>商品的价格围绕商品的价值<code>自发波动</code>.</p><h4 id="4-1-3-以私有制为基础的商品经济的基本矛盾"><a href="#4-1-3-以私有制为基础的商品经济的基本矛盾" class="headerlink" title="4.1.3. 以私有制为基础的商品经济的基本矛盾"></a>4.1.3. 以私有制为基础的商品经济的基本矛盾</h4><h4 id="4-1-4-科学认识马克思劳动价值论"><a href="#4-1-4-科学认识马克思劳动价值论" class="headerlink" title="4.1.4. 科学认识马克思劳动价值论"></a>4.1.4. 科学认识马克思劳动价值论</h4><h3 id="4-2-资本主义经济制度的本质"><a href="#4-2-资本主义经济制度的本质" class="headerlink" title="4.2. 资本主义经济制度的本质"></a>4.2. 资本主义经济制度的本质</h3><h4 id="4-2-1-资本主义经济制度的产生"><a href="#4-2-1-资本主义经济制度的产生" class="headerlink" title="4.2.1.资本主义经济制度的产生"></a>4.2.1.资本主义经济制度的产生</h4><h4 id="4-2-2-劳动力成为商品与货币转化为资本"><a href="#4-2-2-劳动力成为商品与货币转化为资本" class="headerlink" title="4.2.2.劳动力成为商品与货币转化为资本"></a>4.2.2.劳动力成为商品与货币转化为资本</h4><h5 id="劳动力成为商品的条件"><a href="#劳动力成为商品的条件" class="headerlink" title="劳动力成为商品的条件"></a>劳动力成为商品的条件</h5><ol><li>劳动者丧失了一切生产资料,除了自身的劳动力以外一无所有</li><li>劳动者有人身自由,有权支配自身的劳动力</li><li></li></ol><h4 id="4-2-3-资本主义所有制"><a href="#4-2-3-资本主义所有制" class="headerlink" title="4.2.3.资本主义所有制"></a>4.2.3.资本主义所有制</h4><h4 id="4-2-4-生产剩余价值是资本主义生产方式的绝对规律"><a href="#4-2-4-生产剩余价值是资本主义生产方式的绝对规律" class="headerlink" title="4.2.4.生产剩余价值是资本主义生产方式的绝对规律"></a>4.2.4.生产剩余价值是资本主义生产方式的绝对规律</h4><h5 id="剩余价值生产的两种基本方法"><a href="#剩余价值生产的两种基本方法" class="headerlink" title="剩余价值生产的两种基本方法"></a>剩余价值生产的两种基本方法</h5><ol><li>绝对剩余价值的生产</li><li>相对剩余价值的生产</li></ol><p><code>相对剩余价值</code>: 是指<code>工作日长度不变</code>的条件下,通过缩短<code>必要劳动时间</code>而相对延长<code>剩余劳动时间</code>所生产的剩余价值</p><h5 id="工资与剩余价值的分配"><a href="#工资与剩余价值的分配" class="headerlink" title="工资与剩余价值的分配"></a>工资与剩余价值的分配</h5><ul><li>在资本主义制度下,<code>工人的工资</code>表现为<code>劳动力的价值或价格</code>,这是<code>资本主义工资的本质</code></li><li>不同生产部门的资本家之间必然展开激烈的<code>竞争</code>,从而导致<code>利润平均化</code></li></ul><h5 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h5><ol><li><p>相对剩余价值的获得是全社会劳动生产率普遍提高的结果</p></li><li><p>平均利润率的形成</p><ul><li>是不同生产部门的资本家之间竞争的结果</li></ul></li><li><p>资本主义社会中工人的工资是</p><ul><li>劳动力的价值或价格</li></ul></li></ol><h4 id="4-2-5-资本主义的基本矛盾与经济危机"><a href="#4-2-5-资本主义的基本矛盾与经济危机" class="headerlink" title="4.2.5.资本主义的基本矛盾与经济危机"></a>4.2.5.资本主义的基本矛盾与经济危机</h4><h3 id="4-3-资本主义政治制度和意识形态"><a href="#4-3-资本主义政治制度和意识形态" class="headerlink" title="4.3. 资本主义政治制度和意识形态"></a>4.3. 资本主义政治制度和意识形态</h3><h4 id="4-3-1-资本主义政治制度及其本质"><a href="#4-3-1-资本主义政治制度及其本质" class="headerlink" title="4.3.1.资本主义政治制度及其本质"></a>4.3.1.资本主义政治制度及其本质</h4><h4 id="4-3-2-资本主义意识形态及其本质"><a href="#4-3-2-资本主义意识形态及其本质" class="headerlink" title="4.3.2.资本主义意识形态及其本质"></a>4.3.2.资本主义意识形态及其本质</h4><h2 id="5-资本主义的发展及其趋势"><a href="#5-资本主义的发展及其趋势" class="headerlink" title="5. 资本主义的发展及其趋势"></a>5. 资本主义的发展及其趋势</h2><h3 id="5-1-垄断资本主义的形成与发展"><a href="#5-1-垄断资本主义的形成与发展" class="headerlink" title="5.1. 垄断资本主义的形成与发展"></a>5.1. 垄断资本主义的形成与发展</h3><h4 id="5-1-1-资本主义由自由竞争到垄断"><a href="#5-1-1-资本主义由自由竞争到垄断" class="headerlink" title="5.1.1.资本主义由自由竞争到垄断"></a>5.1.1.资本主义由自由竞争到垄断</h4><h5 id="金融资本和-金融寡头"><a href="#金融资本和-金融寡头" class="headerlink" title="金融资本和 金融寡头"></a>金融资本和 金融寡头</h5><p>在<code>金融资本</code>形成的基础上,形成了<code>金融寡头</code>.</p><ul><li><p><code>金融资本</code>:   是指由<code>工业垄断资本</code>和<code>银行垄断资本</code>混合在一起而形成的一种垄断资本</p></li><li><p><code>金融寡头</code> : 是指操纵国民经济命脉,并在实际上控制国家政权的少数垄断资本家或垄断资本家集团.</p><ol><li>他们支配大量的社会财富,控制整个国家的经济命脉和上层建筑,是垄断资本主义国家事实上的统治者(主宰者).</li></ol></li></ul><h5 id="垄断利润和垄断价格"><a href="#垄断利润和垄断价格" class="headerlink" title="垄断利润和垄断价格"></a>垄断利润和垄断价格</h5><p>index-名词解释</p><ul><li><code>垄断利润</code> : 是指垄断资本家凭借其在社会生产和流通中的垄断地位而获得的超过平均利润的高额利润</li><li></li></ul><h5 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h5><ol><li>垄断价格的形成和垄断利润的产生表明<ul><li>价值规律的作用形式发生了变化</li></ul></li><li>主要资本主义国家相继自由竞争阶段发展到垄断阶段的时期是<ul><li>19世纪末20世纪初</li></ul></li></ol><h4 id="5-1-2-垄断资本主义的发展"><a href="#5-1-2-垄断资本主义的发展" class="headerlink" title="5.1.2.垄断资本主义的发展"></a>5.1.2.垄断资本主义的发展</h4><h5 id="国家垄断资本主义的形成及作用"><a href="#国家垄断资本主义的形成及作用" class="headerlink" title="国家垄断资本主义的形成及作用"></a>国家垄断资本主义的形成及作用</h5><p><code>国家垄断资本主义</code>是指<code>国家政权</code>和<code>私人垄断资本</code>融合在一起的垄断资本主义</p><ul><li>国家垄断资本主义的产生,是垄断资本主义生产关系在自身范围内的部分质变,<code>标志着资本主义发展进入了新的阶段</code></li></ul><h5 id="垄断资本向世界范围的发展"><a href="#垄断资本向世界范围的发展" class="headerlink" title="垄断资本向世界范围的发展"></a>垄断资本向世界范围的发展</h5><p><code>输出资本的主体</code>来看,主要有两种</p><ol><li>私人资本输出</li></ol><ul><li>私人资本输出是为了获得高额垄断<code>利润</code>或利息,同时也是加强<code>剥削</code>和<code>控制发展中国家</code>的<code>经济手段</code></li></ul><ol start="2"><li>国家资本输出</li></ol><ul><li>一方面为<code>私人垄断资本</code>服务</li><li>一方面为维护<code>资本主义世界体系</code>服务</li></ul><h5 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h5><ol><li>资本输出的实质就是<ul><li>金融资本掠夺,剥削和奴役其他国家和人民的重要手段</li></ul></li><li></li></ol><h4 id="5-1-3-经济全球化及其影响"><a href="#5-1-3-经济全球化及其影响" class="headerlink" title="5.1.3.经济全球化及其影响"></a>5.1.3.经济全球化及其影响</h4><p><strong>index-名词解释</strong></p><p><code>经济全球化</code> 是指在<code>生产</code>不断发展,<code>科技</code>加速进步,社会和国际<code>分工</code>不断深化,生产的<code>社会化</code>和<code>国际化</code>程度不断提高的情况下,世界各国,各地区的<code>经济活动</code>越来越超出某一国际和地区的<code>范围</code>而相互<code>联系</code>,相互<code>依赖</code>的过程</p><h3 id="5-2-认识当代资本主义的变化"><a href="#5-2-认识当代资本主义的变化" class="headerlink" title="5.2. 认识当代资本主义的变化"></a>5.2. 认识当代资本主义的变化</h3><h4 id="5-2-1-第二次世界大战后资本主义的变化及其实质"><a href="#5-2-1-第二次世界大战后资本主义的变化及其实质" class="headerlink" title="5.2.1.第二次世界大战后资本主义的变化及其实质"></a>5.2.1.第二次世界大战后资本主义的变化及其实质</h4><h5 id="变化的原因及实质"><a href="#变化的原因及实质" class="headerlink" title="变化的原因及实质"></a>变化的原因及实质</h5><p><strong>index-多选</strong></p><p>第二次世界大战后,资本主义发生变化是客观事实</p><ul><li>第二次世界大战后资本主义的发生变化从<code>根本</code>上来说是<code>人类社会发展的一般规律</code>和<code>资本主义经济规律</code>作用的结果</li><li>第二次世界大战后资本主义发生的变化是<code>资本主义制度基本框架</code>内的变化,并不意味着<code>资本主义生产关系</code>的<code>根本性质</code>发生变化</li></ul><h5 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h5><ol><li>没有改变马克思主义关于资本主义的基本论断的科学性.</li></ol><h4 id="5-2-2-2008年国际金融危机以来资本主义的矛盾与冲突"><a href="#5-2-2-2008年国际金融危机以来资本主义的矛盾与冲突" class="headerlink" title="5.2.2  2008年国际金融危机以来资本主义的矛盾与冲突"></a>5.2.2  2008年国际金融危机以来资本主义的矛盾与冲突</h4><h3 id="5-3-资本主义的历史地位和发展趋势"><a href="#5-3-资本主义的历史地位和发展趋势" class="headerlink" title="5.3. 资本主义的历史地位和发展趋势"></a>5.3. 资本主义的历史地位和发展趋势</h3><h4 id="5-3-1-资本主义的历史地位"><a href="#5-3-1-资本主义的历史地位" class="headerlink" title="5.3.1.资本主义的历史地位"></a>5.3.1.资本主义的历史地位</h4><h4 id="5-3-2-资本主义为社会主义所代替的历史必然性"><a href="#5-3-2-资本主义为社会主义所代替的历史必然性" class="headerlink" title="5.3.2.资本主义为社会主义所代替的历史必然性"></a>5.3.2.资本主义为社会主义所代替的历史必然性</h4><h2 id="6-社会主义的发展及其规律"><a href="#6-社会主义的发展及其规律" class="headerlink" title="6. 社会主义的发展及其规律"></a>6. 社会主义的发展及其规律</h2><h3 id="6-1-社会主义五百年的历史进程"><a href="#6-1-社会主义五百年的历史进程" class="headerlink" title="6.1. 社会主义五百年的历史进程"></a>6.1. 社会主义五百年的历史进程</h3><h4 id="6-1-1-社会主义从空想到科学"><a href="#6-1-1-社会主义从空想到科学" class="headerlink" title="6.1.1.社会主义从空想到科学"></a>6.1.1.社会主义从空想到科学</h4><h4 id="6-1-2-社会主义从理想到现实"><a href="#6-1-2-社会主义从理想到现实" class="headerlink" title="6.1.2.社会主义从理想到现实"></a>6.1.2.社会主义从理想到现实</h4><h4 id="6-1-3-社会主义从一国到多国"><a href="#6-1-3-社会主义从一国到多国" class="headerlink" title="6.1.3.社会主义从一国到多国"></a>6.1.3.社会主义从一国到多国</h4><h4 id="6-1-4-社会主义在中国焕发出强大的活力"><a href="#6-1-4-社会主义在中国焕发出强大的活力" class="headerlink" title="6.1.4.社会主义在中国焕发出强大的活力"></a>6.1.4.社会主义在中国焕发出强大的活力</h4><h3 id="6-2-社会主义基本原则"><a href="#6-2-社会主义基本原则" class="headerlink" title="6.2. 社会主义基本原则"></a>6.2. 社会主义基本原则</h3><h4 id="6-2-1-科学社会主义的基本原则及其主要内容"><a href="#6-2-1-科学社会主义的基本原则及其主要内容" class="headerlink" title="6.2.1.科学社会主义的基本原则及其主要内容"></a>6.2.1.科学社会主义的基本原则及其主要内容</h4><h4 id="6-2-2-正确把握社会主义基本原则"><a href="#6-2-2-正确把握社会主义基本原则" class="headerlink" title="6.2.2.正确把握社会主义基本原则"></a>6.2.2.正确把握社会主义基本原则</h4><ol><li><p>必须始终坚持社会主义基本原则</p></li><li><p>善于把社会主义基本原则与本国实际相结合,创造性地回答和解决社会主义革命中的问题.</p></li><li><p>紧跟时代和实践的发展,不断总结新鲜经验进一步丰富和发展社会主义基本原则</p><h5 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h5><ol><li><code>科学社会主义基本原则</code>揭示了资本主义生产方式的<code>基本矛盾</code>,阐明了社会主义代替资本主义的历史<code>必然性</code>,为社会主义的发展<code>指明道路</code></li><li></li></ol></li></ol><h4 id="6-2-3-社会主义基本原则与中国特色社会主义"><a href="#6-2-3-社会主义基本原则与中国特色社会主义" class="headerlink" title="6.2.3.社会主义基本原则与中国特色社会主义"></a>6.2.3.社会主义基本原则与中国特色社会主义</h4><h3 id="6-3-实践中探索现实社会主义的发展规律"><a href="#6-3-实践中探索现实社会主义的发展规律" class="headerlink" title="6.3. 实践中探索现实社会主义的发展规律"></a>6.3. 实践中探索现实社会主义的发展规律</h3><h4 id="6-3-1-经济文化相对落后国家建设社会主义的长期性"><a href="#6-3-1-经济文化相对落后国家建设社会主义的长期性" class="headerlink" title="6.3.1.经济文化相对落后国家建设社会主义的长期性"></a>6.3.1.经济文化相对落后国家建设社会主义的长期性</h4><h4 id="6-3-2-社会主义发展道路的多样性"><a href="#6-3-2-社会主义发展道路的多样性" class="headerlink" title="6.3.2.社会主义发展道路的多样性"></a>6.3.2.社会主义发展道路的多样性</h4><h5 id="探索适合本国国情的发展道路"><a href="#探索适合本国国情的发展道路" class="headerlink" title="探索适合本国国情的发展道路"></a>探索适合本国国情的发展道路</h5><p><strong>index-多选</strong></p><ol><li>必须坚持对待马克思主义的科学态度,坚持以马克思主义为指导</li><li>立足本国国情,走自己的路</li><li>必须充分吸收人类一切文明成果</li></ol><h5 id="社会主义发展道路的多样性"><a href="#社会主义发展道路的多样性" class="headerlink" title="社会主义发展道路的多样性"></a>社会主义发展道路的多样性</h5><p>社会主义发展道路的多样性的原因是</p><ol><li><p>各个国家的<code>生产力</code>发展状况和<code>社会</code>发展阶段决定了社会主义发展道路具有不同的<code>特点</code></p></li><li><p><code>历史文化传统的差异</code>是造成不同社会主义国家发展道路多样性的<code>重要条件</code></p></li><li><p><code>时代和实践</code>的不断发展是造成社会主义发展道路多样性的<code>现实原因</code>.</p></li><li><p><code>国际环境</code></p></li></ol><h4 id="6-3-3-社会主义在实践开拓前进"><a href="#6-3-3-社会主义在实践开拓前进" class="headerlink" title="6.3.3.社会主义在实践开拓前进"></a>6.3.3.社会主义在实践开拓前进</h4><h2 id="7-共产主义崇高理想及其最终实现"><a href="#7-共产主义崇高理想及其最终实现" class="headerlink" title="7. 共产主义崇高理想及其最终实现"></a>7. 共产主义崇高理想及其最终实现</h2><h5 id="党的最高纲领"><a href="#党的最高纲领" class="headerlink" title="党的最高纲领"></a>党的最高纲领</h5><p><strong>实现共产主义的社会制度</strong></p><h3 id="7-1-展望未来共产主义新社会"><a href="#7-1-展望未来共产主义新社会" class="headerlink" title="7.1. 展望未来共产主义新社会"></a>7.1. 展望未来共产主义新社会</h3><h4 id="7-1-1-遇见未来社会的方法论原则"><a href="#7-1-1-遇见未来社会的方法论原则" class="headerlink" title="7.1.1.遇见未来社会的方法论原则"></a>7.1.1.遇见未来社会的方法论原则</h4><h4 id="7-1-2-共产主义社会的基本特征"><a href="#7-1-2-共产主义社会的基本特征" class="headerlink" title="7.1.2.共产主义社会的基本特征"></a>7.1.2.共产主义社会的基本特征</h4><h3 id="7-2-实现共产主义是历史发展的必然趋势"><a href="#7-2-实现共产主义是历史发展的必然趋势" class="headerlink" title="7.2. 实现共产主义是历史发展的必然趋势"></a>7.2. 实现共产主义是历史发展的必然趋势</h3><h4 id="7-2-1-实现共产主义是历史发展的必然性"><a href="#7-2-1-实现共产主义是历史发展的必然性" class="headerlink" title="7.2.1.实现共产主义是历史发展的必然性"></a>7.2.1.实现共产主义是历史发展的必然性</h4><h4 id="7-2-2-实现共产主义是长期的历史过程"><a href="#7-2-2-实现共产主义是长期的历史过程" class="headerlink" title="7.2.2.实现共产主义是长期的历史过程"></a>7.2.2.实现共产主义是长期的历史过程</h4><h3 id="7-3-共产主义远大理想与中国特色社会主义共同理想"><a href="#7-3-共产主义远大理想与中国特色社会主义共同理想" class="headerlink" title="7.3. 共产主义远大理想与中国特色社会主义共同理想"></a>7.3. 共产主义远大理想与中国特色社会主义共同理想</h3><h4 id="7-3-1-坚持远大的理想与共同理想的辩证统一"><a href="#7-3-1-坚持远大的理想与共同理想的辩证统一" class="headerlink" title="7.3.1.坚持远大的理想与共同理想的辩证统一"></a>7.3.1.坚持远大的理想与共同理想的辩证统一</h4><h4 id="7-3-2-坚定理想信念-投身新时代中国特色社会主义伟大事业"><a href="#7-3-2-坚定理想信念-投身新时代中国特色社会主义伟大事业" class="headerlink" title="7.3.2.坚定理想信念,投身新时代中国特色社会主义伟大事业"></a>7.3.2.坚定理想信念,投身新时代中国特色社会主义伟大事业</h4>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/"/>
      <url>/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h3><h4 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h4><p>数据结构是研讨数据的<code>逻辑结构</code>和<code>存储结构</code>,以及他们之间的相互关系,并对与这种结构定义相应的<code>操作</code>,设计出相应的<code>算法</code>.</p><h4 id="数据结构的逻辑结构"><a href="#数据结构的逻辑结构" class="headerlink" title="数据结构的逻辑结构"></a>数据结构的逻辑结构</h4><p><code>数据的逻辑结构</code>是指数据的各数据元素之间的逻辑关系</p><ul><li><p>数据的逻辑结构分为两大类</p><ol><li><p>线性结构</p></li><li><p>非线形结构</p><ul><li>树形结构</li></ul></li></ol></li></ul><h4 id="数据结构的物理结构"><a href="#数据结构的物理结构" class="headerlink" title="数据结构的物理结构"></a>数据结构的物理结构</h4><p><code>数据的物理结构</code>是指数据在计算机内的实际存储形式。</p><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>数值型数据</li><li>非数值型数据</li></ul><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><ul><li><code>数据</code>的基本单位<ul><li>一个数据元素可由若干个<code>数据项</code>组成</li><li><code>数据项</code>是数据不可分割的最小单位</li></ul></li></ul><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><ul><li><code>数据</code>的子集<ul><li>具有相同性质的<code>数据元素集合</code></li></ul></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><code>数据结构</code>是相互间存在一种或多种特定关系的数据元素集合<ul><li>结构:数据元素相互之间的关系</li><li>特定关系<ul><li><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211221203339581.png" alt="image-20211221203339581"></li></ul></li><li>数据结构按逻辑结构可以分为两大类<ul><li>线性结构</li><li>非线性结构</li></ul></li></ul></li></ul><h4 id="数据结构的形式定义"><a href="#数据结构的形式定义" class="headerlink" title="数据结构的形式定义"></a>数据结构的形式定义</h4><ul><li>二元组: DS=(D,S)<ul><li>D : 数据元素的有限集合</li><li>S : 定义在D上的关系的有限集合</li></ul></li></ul><h4 id="数据的物理结构-存储结构"><a href="#数据的物理结构-存储结构" class="headerlink" title="数据的物理结构(存储结构)"></a>数据的物理结构(存储结构)</h4><ul><li>数据元素之间关系的表示<ul><li>顺序映像:<ul><li>借助元素在存储器的相对位置表示数据元素之间的逻辑关系.对应于顺序存储结构</li></ul></li><li>非顺序映像:<ul><li>利用指示元素存储地址的指针表示数据元素间的逻辑关系对应于<ul><li>链式存储结构</li><li>索引树</li><li>散列表</li></ul></li></ul></li></ul></li></ul><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h5 id="算法原地工作"><a href="#算法原地工作" class="headerlink" title="算法原地工作"></a>算法原地工作</h5><p>算法原地工作: 是指算法所需辅助空间是常量，即O(1)。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义与特点"><a href="#线性表的定义与特点" class="headerlink" title="线性表的定义与特点"></a>线性表的定义与特点</h3><h4 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h4><p><code>线性表</code>是<code>n</code>个数据元素的<code>有限序列</code></p><h4 id="线性表的特性"><a href="#线性表的特性" class="headerlink" title="线性表的特性"></a>线性表的特性</h4><ul><li>元素间关系是线性的</li><li>同一线性表中的元素必定具有相同特性</li></ul><h3 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h3><h4 id="顺序表的表示"><a href="#顺序表的表示" class="headerlink" title="顺序表的表示"></a>顺序表的表示</h4><p><code>线性表的顺序表示</code>: 指的是一组地址连续的存储单元依次存储线性表的数据元素.</p><p>这种表示又称为<code>顺序存储结构</code>或<code>顺序映像</code>,通常称这种存储结构的线性表为<code>顺序表</code></p><ul><li>顺序存储定义:<ul><li>把逻辑上相邻的数据元素存储在物理上相邻的存储单元中的存储结构</li><li>简言之,逻辑上相邻,物理上也相邻</li></ul></li><li>顺序存储方法:<ul><li>用一组地址连续的存储单元依次存储线性表的元素，可通过<code>数组</code>来实现</li></ul></li></ul><h4 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h4><ol><li>插入</li></ol>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//数组 a 中有 lenght 个元素,在数组第 index 个元素前插入 value</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> lenght<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p>删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//数组 a 中有 lenght 个元素,删除数组的第 index 个元素</span><span class="token keyword">int</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span>  length<span class="token punctuation">,</span><span class="token keyword">int</span> intdex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查找</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//在数组 a 中,查找 value</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>排序</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将数组 a 排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//将数组 a 中,第 index 个元素改成 value</span><span class="token keyword">int</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="顺序表的运算效率分析"><a href="#顺序表的运算效率分析" class="headerlink" title="顺序表的运算效率分析"></a>顺序表的运算效率分析</h4><blockquote><p>插入时间复杂度</p></blockquote><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211221202500977.png" alt="image-20211221202500977"></p><blockquote><p>删除时间复杂度</p></blockquote><p>​     <img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211221202536209.png" alt="image-20211221202536209"></p><blockquote><p>查找时间复杂度</p></blockquote><p>时间复杂度:$O(n)$</p><blockquote><p>排序时间复杂度</p></blockquote><p>时间复杂度:$O(nlog_2n)$</p><blockquote><p>修改时间复杂度</p></blockquote><p>时间复杂度:$O(n)$</p><h4 id="线性表顺序存储结构优劣"><a href="#线性表顺序存储结构优劣" class="headerlink" title="线性表顺序存储结构优劣"></a>线性表顺序存储结构优劣</h4><h5 id="优"><a href="#优" class="headerlink" title="优"></a>优</h5><ol><li>可以随机存取,时间复杂度为$O(1)$</li><li></li></ol><h5 id="劣"><a href="#劣" class="headerlink" title="劣"></a>劣</h5><ol><li><p>在<code>插入</code>,<code>删除</code>某一元素时,需要移动大量元素;O(n)</p></li><li><p>预先分配空间需按照最大空间分配,利用不充分;表容量难以扩充</p></li></ol><h3 id="线性表的链式表示和实现"><a href="#线性表的链式表示和实现" class="headerlink" title="线性表的链式表示和实现"></a>线性表的链式表示和实现</h3><h4 id="链式存储的术语"><a href="#链式存储的术语" class="headerlink" title="链式存储的术语"></a>链式存储的术语</h4><h5 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h5><p>数据元素的存储映像,由<code>数据域</code>和<code>指针域</code>组成.</p><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><p><code>n</code>个结点由<code>指针链</code>组成一个链表,他是线性表的<code>链式存储映像</code>,称为线性表的链式存储结构</p><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><p>结点只有一个指针域的链表,称为<code>单链表</code>或<code>线形链表</code>.</p><h5 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h5><p>有两个指针域的链表</p><h5 id="多链表"><a href="#多链表" class="headerlink" title="多链表"></a>多链表</h5><p>有多个指针域的链表</p><h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><p><code>循环链表</code>是首尾相接的链表</p><h5 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h5><p><code>头指针</code>是指向链表中第一个结点的指针</p><p><code>单链表</code>可由一个<code>头指针</code>唯一确定</p><h5 id="头结点"><a href="#头结点" class="headerlink" title="头结点"></a>头结点</h5><p><code>头结点</code>是在链表的<code>首元结点</code>之前附设的一个结点,数据域内只放空表标志和表长等信息.</p><h5 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h5><blockquote><ol><li>在链表中设置头结点有什么好处</li></ol></blockquote><ol><li>头结点是在链表的首元结点之前附设的一个结点,作用是对链表进行操作时,可以对空表,非空表的情况以及对首元结点进行统一处理,编程更方便</li></ol><blockquote><ol start="2"><li>如何表示空表</li></ol></blockquote><ol><li>无头结点时,当<code>头指针</code>的值为空时表示空表.</li><li>有头结点时,当<code>头结点</code>的指针域为空时表示空表</li></ol><h4 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h4><p><code>n</code>个结点由<code>指针链</code>组成一个链表,他是线性表的<code>链式存储映像</code>,称为线性表的<code>链式存储结构</code></p><h5 id="链式存储结构-1"><a href="#链式存储结构-1" class="headerlink" title="链式存储结构"></a>链式存储结构</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span> ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token punctuation">}</span>node<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链式存储结构的优劣"><a href="#链式存储结构的优劣" class="headerlink" title="链式存储结构的优劣"></a>链式存储结构的优劣</h4><h5 id="优-1"><a href="#优-1" class="headerlink" title="优"></a>优</h5><ol><li>可以动态申请空间,不受表长度的影响</li><li>插入和删除的时间复杂度为O(1)</li></ol><h5 id="劣-1"><a href="#劣-1" class="headerlink" title="劣"></a>劣</h5><h4 id="单链表的排序"><a href="#单链表的排序" class="headerlink" title="单链表的排序"></a>单链表的排序</h4><p>归并排序</p><p>时间复杂度：O（nlogn）</p><p>空间复杂度：O（logn）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-04-19 13:10:43 * @LastEditTime: 2022-04-19 14:54:55 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF_32</span> <span class="token expression"><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span></span></span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">eps</span> <span class="token expression"><span class="token number">1e-8</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">IOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/*    对链表采用归并排序时间复杂度O(nlogn) ，空间复杂度O(1)或O(logn)?    1.对于链表如何找到中间位置        1.第一次遍历获取节点个数，第二次遍历获取中点        2.用快指针和慢指针进行遍历，快指针一直走两步，满指针一次走一步，            当快指针走到尾的时候，满指针也恰好到中点    2.归并排序，递归到最底层，然后依次回溯对左右子部分进行排序*/</span><span class="token comment">/*    合并左右子部分并且排序*/</span>ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>left<span class="token punctuation">,</span>ListNode <span class="token operator">*</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode <span class="token operator">*</span> head<span class="token operator">=</span> <span class="token keyword">new</span> ListNode<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">-&gt;</span>data <span class="token operator">&lt;</span> right <span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            h<span class="token operator">-&gt;</span>next <span class="token operator">=</span> left<span class="token punctuation">;</span>            left <span class="token operator">=</span> left <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            h<span class="token operator">-&gt;</span>next <span class="token operator">=</span> right <span class="token punctuation">;</span>            right <span class="token operator">=</span> right <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h<span class="token operator">=</span>h<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    h<span class="token operator">-&gt;</span>next <span class="token operator">=</span> left <span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">?</span>right <span class="token operator">:</span>left<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token operator">-&gt;</span>next <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*    通过快慢指针找中点*/</span>ListNode<span class="token operator">*</span>  <span class="token function">findMid</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode <span class="token operator">*</span> slow <span class="token operator">=</span>head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span> fast <span class="token operator">=</span>head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-&gt;</span>next <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//右部分的头节点</span>    ListNode <span class="token operator">*</span>right <span class="token operator">=</span>slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">//左部分的头节点</span>    ListNode <span class="token operator">*</span>left <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">//切断两部分的连接点</span>    slow<span class="token operator">-&gt;</span> next <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    right <span class="token operator">=</span> <span class="token function">findMid</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> <span class="token function">findMid</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode<span class="token operator">*</span>  <span class="token function">mergeSort</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> head<span class="token operator">-&gt;</span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">findMid</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-串-数组和广义表"><a href="#2-串-数组和广义表" class="headerlink" title="2.串,数组和广义表"></a>2.串,数组和广义表</h2><h3 id="串的定义"><a href="#串的定义" class="headerlink" title="串的定义"></a>串的定义</h3><p>串是一种特殊的线性表，其<code>特殊性</code>体现在数据元素是一个字符</p><ul><li><code>空串</code> : 不包含任何字符(长度为0)的串称为空串</li><li><code>空白串</code> : 由一个或者多个空格(仅由空格符)组成的串称为空白串</li><li><code>子串</code> : 串中任意个连续字符串组成的子序列称为该串的子串</li><li></li></ul><h3 id="串的类型定义-存储结构及其运算"><a href="#串的类型定义-存储结构及其运算" class="headerlink" title="串的类型定义,存储结构及其运算"></a>串的类型定义,存储结构及其运算</h3><h4 id="串的抽象类型定义"><a href="#串的抽象类型定义" class="headerlink" title="串的抽象类型定义"></a>串的抽象类型定义</h4><h4 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h4><h5 id="串的顺序存储"><a href="#串的顺序存储" class="headerlink" title="串的顺序存储"></a>串的顺序存储</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span>MAXLEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>SString<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="串的链式存储"><a href="#串的链式存储" class="headerlink" title="串的链式存储"></a>串的链式存储</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">;</span>       <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>HString<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="串的模式串匹配"><a href="#串的模式串匹配" class="headerlink" title="串的模式串匹配"></a>串的模式串匹配</h4><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组的类型定义"><a href="#数组的类型定义" class="headerlink" title="数组的类型定义"></a>数组的类型定义</h4><h4 id="数组的顺序类型"><a href="#数组的顺序类型" class="headerlink" title="数组的顺序类型"></a>数组的顺序类型</h4><h4 id="特殊矩阵的压缩存储"><a href="#特殊矩阵的压缩存储" class="headerlink" title="特殊矩阵的压缩存储"></a>特殊矩阵的压缩存储</h4><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><h4 id="广义表的定义"><a href="#广义表的定义" class="headerlink" title="广义表的定义"></a>广义表的定义</h4><ul><li><p><code>深度</code> : 从前往后数,左括号的数量就是广义表的深度</p></li><li><p><code>长度</code> : 表中数据元素的数量,数据元素之间用逗号隔开.</p></li><li><p>取表头<code>GetHead(LS)</code> : 取出的表头为非空广义表的第一个元素,他可以是一个单原子,也可以是一个子表.</p><ul><li>Head返回的是元素(去掉最外层括号)</li></ul></li><li><p>取表尾<code>GetTail(LS)</code> : 取出的表尾为除去表头之外,由其余元素构成的表,即表尾一定是一个广义表.</p><ul><li>Tail返回的是集合(保留括号)。</li></ul></li></ul><h4 id="广义表的存储结构"><a href="#广义表的存储结构" class="headerlink" title="广义表的存储结构"></a>广义表的存储结构</h4><h2 id="3-栈与队列"><a href="#3-栈与队列" class="headerlink" title="3.栈与队列"></a>3.栈与队列</h2><p>栈和队列都是特殊的线性表(即栈和队列是删除和插入运算被限制的线性表).</p><h3 id="栈的定义和特点"><a href="#栈的定义和特点" class="headerlink" title="栈的定义和特点"></a>栈的定义和特点</h3><p>栈是逻辑结构的概念</p><h3 id="队列的定义和特点"><a href="#队列的定义和特点" class="headerlink" title="队列的定义和特点"></a>队列的定义和特点</h3><h3 id="栈的表示和操作的实现"><a href="#栈的表示和操作的实现" class="headerlink" title="栈的表示和操作的实现"></a>栈的表示和操作的实现</h3><h4 id="栈的类型定义"><a href="#栈的类型定义" class="headerlink" title="栈的类型定义"></a>栈的类型定义</h4><h4 id="顺序栈的表示和实现"><a href="#顺序栈的表示和实现" class="headerlink" title="顺序栈的表示和实现"></a>顺序栈的表示和实现</h4><h4 id="链栈的表示和实现"><a href="#链栈的表示和实现" class="headerlink" title="链栈的表示和实现"></a>链栈的表示和实现</h4><h3 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h3><h3 id="队列的表示和操作的实现"><a href="#队列的表示和操作的实现" class="headerlink" title="队列的表示和操作的实现"></a>队列的表示和操作的实现</h3><h4 id="队列的类型定义"><a href="#队列的类型定义" class="headerlink" title="队列的类型定义"></a>队列的类型定义</h4><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>判断一个队列q,元素个数为x.</p><ol><li><p>队空的条件: $q.front=q.rear$</p></li><li><p>队满的条件:</p><ul><li>$(q.rear+1)\mod MAXSIZE == q.front$ </li><li>$q.rear - q.front =x $</li></ul></li><li><p>入队操作</p><ul><li>$q.rear = (q.rear +1 )\mod MAXSIZE$</li></ul></li><li><p>出队操作</p><ul><li>$q.front = (q.front+1 )\mod MAXSIZE$</li></ul></li><li><p>求循环队列的长度</p><ul><li>$(q.rear - q.front + MAXSIZE) \mod MAXSIZE$</li></ul></li></ol><h4 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h4><h4 id="队列的知识点"><a href="#队列的知识点" class="headerlink" title="队列的知识点"></a>队列的知识点</h4><blockquote><ol><li>问题一:判断一个队列(元素个数为x)为满队列和空队列的条件是</li></ol></blockquote><p>答:满队列: q-&gt;rear - q-&gt;front == x || ( q-&gt;rear +1 ) %x == q-&gt;front;</p><p>​ 空队列: q -&gt;front == q-&gt;rear ; </p><h2 id="4-树"><a href="#4-树" class="headerlink" title="4.树"></a>4.树</h2><h3 id="4-1-树的基本概念"><a href="#4-1-树的基本概念" class="headerlink" title="4.1.树的基本概念"></a>4.1.树的基本概念</h3><h5 id="叶子结点"><a href="#叶子结点" class="headerlink" title="叶子结点"></a>叶子结点</h5><p>叶子结点也叫终端结点</p><h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><ol><li>结点总数为<code>n = n0 + n1 + n2 + n3 + n·····</code></li><li>分支总数为<code>B=n+1</code></li></ol><h3 id="树的存储形式"><a href="#树的存储形式" class="headerlink" title="树的存储形式"></a>树的存储形式</h3><ol><li>双亲表示法</li><li>孩子表示法</li><li>孩子兄弟表示法—常用,任何一棵树都能通过孩子兄弟表示法转换为二叉树进行存储.</li><li></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title=".二叉树"></a>.二叉树</h3><h4 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h4><blockquote><p> 二叉树的定义</p></blockquote><ol><li>有且仅有一个根结点</li><li>每个结点至多有两棵子树(即二叉树中不存在度大于 2 的点).</li><li>二叉树的子树有左右之分,且次序不能随便颠倒.</li></ol><blockquote><p> 二叉树的存储结构</p></blockquote><blockquote><p>二叉树的性质</p></blockquote><ol><li><p>在二叉树的第<code>i</code>层上至多有 $2^{i-1}$ 个结点$(i&gt;=1)$</p></li><li><p>深度为<code>k</code>的二叉树至多有 $2^{k}-1$ 个结点$(k&gt;=1)$</p></li><li><p>对于任何一颗二叉树<code>T</code>,如果其终端结点数为<code>n0</code>,度为2的结点数为<code>n2</code>,则会有<code>n0 = n2 + 1</code>.</p></li><li><p>设<code>n1</code>为二叉树中T中<code>度为 1</code> 的结点树,因为二叉树中的所有结点的度均小于或者等于 2 ,所以其结点总数为<code>n = n0 + n1 + n2</code></p><p> —设<code>B</code>为分支总数,那么有<code>n=B+1</code>,由于这些分支是由度为<code>1</code>或<code>2</code>的结点射出的,</p><p> 所有又有<code>B = n1 + 2n2</code></p><p> —结合<code>n = B + 1</code>和<code>B = n1 + 2n2</code>的结论</p></li></ol><p>​ 可以得到<code>n = n1 + 2n2 + 1</code></p><p>​ 整合又可以得<code>n0 = n2 + 1</code>.</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><blockquote><p> 基本概念</p></blockquote><p><code>完全二叉树</code>  : 是由满二叉树而引出来的，若设二叉树的深度为<code>h</code>,有<code>n</code>个结点，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数(即1~h-1层为一个满二叉树)，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树</p><blockquote><p>完全二叉树的性质</p></blockquote><ol><li><p>具有<code>n</code>个结点的完全二叉树的深度为$log_2n+1$(向下取整)</p><blockquote><p>由二叉树的性质以及完全二叉树的定义可得</p><p>$2^{k-1}-1&lt;n\le2^{k}-1$</p><p>或者得</p><p>$2^{k-1}\le n &lt; 2^k$</p><p>取对数得到</p><p>$k-1\le lox_2n &lt; k$</p><p>因为k是整数,所以</p><p>$k=log_2n+1$</p></blockquote></li></ol><p>构造</p><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><blockquote><ol><li>问题一: <strong>一个具有n个节点的完全二叉树,其叶子节点的个数为多少？</strong></li></ol></blockquote><p>$n=n_0+n_1+n_2$</p><p>二叉树性质有</p><p>$n_0=n_2+1$</p><p>所以得到</p><p>$n_0=(n+1-n_1)/2$</p><p>因为由完全二叉树可知,$n_1=1或n_1=0$</p><p>所以得到</p><ol><li>$n_0=(n+1)/2$ .即n为奇数时</li><li>$n_0=n/2$ .即n为偶数时</li></ol><h4 id="二叉排序树（二叉查找树）"><a href="#二叉排序树（二叉查找树）" class="headerlink" title="二叉排序树（二叉查找树）"></a>二叉排序树（二叉查找树）</h4><blockquote><p>定义</p></blockquote><p>新结点插入二叉排序树，先查找插入位置</p><ul><li>如果等于树根，不再插入</li><li>如果小于树根，递归在左子树找位置</li><li>如果大于树根，递归在右子树找位置</li></ul><p>因此新结点总是以叶子的方式加入树。</p><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><h4 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h4><blockquote><ol><li>若<code>X</code>是一个二叉中序线索树的一个有左孩子的结点,且<code>X</code>不为根,那么X的前驱为:::<code>X的左子树中的最右结点</code></li></ol></blockquote><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211216202401961.png" alt="image-20211216202401961"></p><p>1. </p><h4 id="二叉树的顺序存储结构和链式存储结构"><a href="#二叉树的顺序存储结构和链式存储结构" class="headerlink" title="二叉树的顺序存储结构和链式存储结构"></a>二叉树的顺序存储结构和链式存储结构</h4><blockquote><p> 顺序存储结构</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ElemType</span> <span class="token expression"><span class="token keyword">int</span> </span></span><span class="token keyword">typedef</span> ElemType BinaryTreeArr<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>BinaryTreeArr bt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>链式存储结构</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">{</span>ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BianryTreeNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span><span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BinaryTreeNode<span class="token punctuation">,</span><span class="token operator">*</span>BinaryTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二叉树的遍历-递归和非递归"><a href="#二叉树的遍历-递归和非递归" class="headerlink" title="二叉树的遍历(递归和非递归)"></a>二叉树的遍历(递归和非递归)</h4><h5 id="先序"><a href="#先序" class="headerlink" title="先序"></a>先序</h5><p>1.递归方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.递归写法</span><span class="token keyword">void</span> <span class="token function">front</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span> pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>pRoot<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">front</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">front</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 2.非递归写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h5><p>1.递归方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.递归写法</span><span class="token keyword">void</span> <span class="token function">mid</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">mid</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>pRoot<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">mid</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 2.非递归写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h5><p>1.递归方法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.递归写法</span><span class="token keyword">void</span> <span class="token function">back</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">back</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">back</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>pRoot<span class="token operator">-&gt;</span>data<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 2.非递归写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><blockquote><p>平衡二叉树的定义</p></blockquote><ul><li>对于每一个节点而言，左右子树的深度之差&lt;=1</li></ul><blockquote><p> 如何判断一个二叉树为平衡二叉树</p></blockquote><p>1.分别求左右子树的深度，再进行判断、递归。（此方法会遍历一个节点多次，效率不高。）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BinaryTreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">BinaryTreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BinaryTreeNode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//1.分别求左右子树的深度，再进行判断、递归。（此方法会遍历一个节点多次，效率不高。）</span><span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">IsBalanced_solve</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token function">IsBalanced_solve</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsBalanced_solve</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.用后序遍历的方式遍历二叉树的每一个节点，在遍历到一个节点之前我们就已经遍历了它的左右子树。只要在遍历每个节点的时候记录深度，就可以一边遍历一边判断每个节点是不是平衡的。（更高效的方法）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//2.用后序遍历的方式遍历二叉树的每一个节点，在遍历到一个节点之前我们就已经遍历了它的左右子树。只要在遍历每个节点的时候记录深度，就可以一边遍历一边判断每个节点是不是平衡的。（更高效的方法）</span><span class="token keyword">bool</span> <span class="token function">IsBalanced_solve2</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">IsBanlanced</span><span class="token punctuation">(</span>pRoot<span class="token punctuation">,</span><span class="token operator">&amp;</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">IsBanlanced</span><span class="token punctuation">(</span>BinaryTreeNode <span class="token operator">*</span>pRoot <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> depth<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pRoot<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token operator">*</span>depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsBanlanced</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span><span class="token operator">&amp;</span>left<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">IsBanlanced</span><span class="token punctuation">(</span>pRoot<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span><span class="token operator">&amp;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> diff <span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>diff<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">*</span>depth<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h3><h4 id="森林的基本概念"><a href="#森林的基本概念" class="headerlink" title="森林的基本概念"></a>森林的基本概念</h4><h4 id="森林-树与二叉树的转换"><a href="#森林-树与二叉树的转换" class="headerlink" title="森林,树与二叉树的转换"></a>森林,树与二叉树的转换</h4><h5 id="树与二叉树的转换"><a href="#树与二叉树的转换" class="headerlink" title="树与二叉树的转换"></a>树与二叉树的转换</h5><h5 id="森林与二叉树的转换"><a href="#森林与二叉树的转换" class="headerlink" title="森林与二叉树的转换"></a>森林与二叉树的转换</h5><h5 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h5><blockquote><ol><li>已知一棵有2011个结点的树，其叶结点个数为116，该树对应的二叉树中无右孩子的结点个数是</li></ol></blockquote><p><strong>二叉树中没有右指针的节点数量 = 树中非叶节点数量 + 一个根节点</strong></p><h4 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h4><h4 id="问题汇总-1"><a href="#问题汇总-1" class="headerlink" title="问题汇总"></a>问题汇总</h4><ol><li><p>设<code>F</code>是一个森林,<code>B</code>是由<code>F</code>变换得的二叉树,若<code>F</code>中有<code>n</code>个非终端端点,若<code>B</code>中右指针域为空的结点有::::<code>n+1</code>::::个</p><p> <img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211216202756282.png" alt="image-20211216202756282"></p><p> <img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211216202811805.png" alt="image-20211216202811805"></p></li></ol><p><img src="/2022/01/17/ji-suan-ji-ji-chu-lei/shu-ju-jie-gou/image-20211216202825313.png" alt="image-20211216202825313"></p><h3 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3><h4 id="哈夫曼树的基本概念"><a href="#哈夫曼树的基本概念" class="headerlink" title="哈夫曼树的基本概念"></a>哈夫曼树的基本概念</h4><h4 id="哈夫曼树的性质"><a href="#哈夫曼树的性质" class="headerlink" title="哈夫曼树的性质"></a>哈夫曼树的性质</h4><ol><li>哈夫曼树没有度为 <code>1</code> 的结点</li><li></li></ol><h4 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a>哈夫曼树的构造</h4><h5 id="哈夫曼树的存储表示"><a href="#哈夫曼树的存储表示" class="headerlink" title="哈夫曼树的存储表示"></a>哈夫曼树的存储表示</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">int</span> weight<span class="token punctuation">;</span>       <span class="token keyword">int</span> parent<span class="token punctuation">,</span>lchild<span class="token punctuation">,</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>HTNode<span class="token punctuation">,</span><span class="token operator">*</span>HTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="构造哈夫曼树算法"><a href="#构造哈夫曼树算法" class="headerlink" title="构造哈夫曼树算法"></a>构造哈夫曼树算法</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一颗有<code>n</code>个叶子结点的哈夫曼树共<code>2n-1</code>个结点.</p><h4 id="哈夫曼树的编码"><a href="#哈夫曼树的编码" class="headerlink" title="哈夫曼树的编码"></a>哈夫曼树的编码</h4><h2 id="5-图"><a href="#5-图" class="headerlink" title="5.图"></a>5.图</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ul><li><p><code>图(G)</code> : 是由两个集合<code>V</code>和<code>E</code>组成,标记为G=(V,E);</p><ul><li><blockquote><p>V(G)表示图G的顶点集合</p><p>E(G)表示图G的边集合</p></blockquote></li></ul></li><li><p><code>有向图</code>: 对于图(G),如果E(G)为有向边的集合,那么G就是有向图</p><ul><li><code>有向完全图</code> : 对于有向图,如果具有<code>n(n-1)</code>条边(即任意两个顶点之间有边),那么就称为有向完全图</li></ul></li><li><p><code>无向图</code>: 对于图(G),如果E(G)为无向边的集合,那么G就是无向图.</p><ul><li><code>无向完全图</code> : 对于无向图,如果具有<code>n(n-1)/2</code>条边(即任何两个顶点公共边),那么就称为无向完全图</li></ul></li><li><p><code>稀疏图和稠密图</code> : 对于很少条边$(e&lt;nlog_2n)$的图称为稀疏图,反之为稠密图</p></li><li><p><code>连通</code>: 在无向图G中,如果从顶点$V$到顶点$V^{‘}$有路径,那么就称$V$和$V^{‘}$连通</p></li><li><p><code>连通图</code>: 如果对于任意两个顶点$v_i,v_j\in V,v_i和v_j$都是连通的,那么就称G是连通图</p><ul><li><code>强连通图</code> :</li></ul></li><li><p><code>连通分量</code> : </p><ul><li><code>强连通分量</code></li></ul></li></ul><h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><h4 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h4><h4 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h4><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><h3 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h3><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><h4 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h4><h2 id="6-查找"><a href="#6-查找" class="headerlink" title="6.查找"></a>6.查找</h2><h3 id="6-1-线性表的查找"><a href="#6-1-线性表的查找" class="headerlink" title="6.1.线性表的查找"></a>6.1.线性表的查找</h3><h4 id="6-1-1顺序查找"><a href="#6-1-1顺序查找" class="headerlink" title="6.1.1顺序查找"></a>6.1.1顺序查找</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>在 线性表的尾部插入要查找的key(哨兵),这样就可以缩短代码量和判断逻辑</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-12-11 16:14:50 * @LastEditTime: 2021-12-11 22:56:52 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numberCount<span class="token punctuation">;</span><span class="token punctuation">}</span> Array<span class="token punctuation">;</span>Array arr<span class="token punctuation">;</span><span class="token comment">//查找操作</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> number<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 读入数据</span>    cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 读入查找</span>    <span class="token keyword">int</span> count<span class="token punctuation">,</span> number<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找失败,不存在这个数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找成功,下标为"</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2-折半查找"><a href="#6-1-2-折半查找" class="headerlink" title="6.1.2.折半查找"></a>6.1.2.折半查找</h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>二分查找每次都是取区间的中点来比较<code>mid=(l+r)/2=(l+r)&gt;&gt;1</code></p><p>递归左右区间</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-12-11 16:14:57 * @LastEditTime: 2021-12-11 22:58:09 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numberCount<span class="token punctuation">;</span><span class="token punctuation">}</span> Array<span class="token punctuation">;</span>Array arr<span class="token punctuation">;</span><span class="token comment">//快速排序</span><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span>Array<span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ls <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rs <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;</span> ls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span>            ls<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>ls<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>            rs<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>rs<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ls <span class="token operator">&lt;</span> rs<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//二分查找</span><span class="token keyword">int</span> <span class="token function">binaryFind</span><span class="token punctuation">(</span>Array<span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> number<span class="token punctuation">)</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//读入数据</span>    cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//读入查找</span>    <span class="token keyword">int</span> count<span class="token punctuation">,</span> findNumber<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> count <span class="token operator">&gt;&gt;</span> findNumber<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> findNumber<span class="token punctuation">;</span>        <span class="token comment">//实现查找操作</span>        arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">]</span> <span class="token operator">=</span> findNumber<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binaryFind</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> findNumber<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>numberCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找失败,不存在这个数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找成功,下标:"</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> index <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3分块查找"><a href="#6-1-3分块查找" class="headerlink" title="6.1.3分块查找"></a>6.1.3分块查找</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><h3 id="6-2-树的查找"><a href="#6-2-树的查找" class="headerlink" title="6.2.树的查找"></a>6.2.树的查找</h3><h4 id="6-2-1-二叉排序树"><a href="#6-2-1-二叉排序树" class="headerlink" title="6.2.1.二叉排序树"></a>6.2.1.二叉排序树</h4><h5 id="二叉排序树的定义"><a href="#二叉排序树的定义" class="headerlink" title="二叉排序树的定义"></a>二叉排序树的定义</h5><ol><li>如果左子树不空,则左子树的所有结点的值均小于他的根结点的值</li><li>如果右子树不空,则右子树的所有结点的值均小于他的根结点的值,</li><li>他的左右子树已分别为二叉排序树.</li></ol><h5 id="二叉排序树性能"><a href="#二叉排序树性能" class="headerlink" title="二叉排序树性能"></a>二叉排序树性能</h5><p>时间复杂度平均而言和$O(log_2n)$同数量级.</p><h5 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h5><p>对一个结点而言</p><ol><li>左儿子小于父结点</li><li>右儿子大于父结点</li></ol><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-12-11 16:15:06 * @LastEditTime: 2021-12-11 18:27:44 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BSTNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BSTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span> BSTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BSTree<span class="token punctuation">;</span>BSTree tree<span class="token punctuation">;</span><span class="token comment">//插入操作</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>BSTree<span class="token operator">&amp;</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BSTree s <span class="token operator">=</span> <span class="token keyword">new</span> BSTNode<span class="token punctuation">;</span>        s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> number<span class="token punctuation">;</span>        s<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> s<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        T <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&gt;</span> T<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>            <span class="token function">insert</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> T<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>            <span class="token function">insert</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//中序遍历</span><span class="token keyword">void</span> <span class="token function">midList</span><span class="token punctuation">(</span>BSTree<span class="token operator">&amp;</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">midList</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">midList</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//创建操作</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span>BSTree<span class="token operator">&amp;</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>    T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//查找操作</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span>BSTree<span class="token operator">&amp;</span> T<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">==</span> number<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> number<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>data <span class="token operator">&lt;</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">build</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">midList</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">,</span> number<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="平衡二叉树-1"><a href="#平衡二叉树-1" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p><code>平衡因子</code>: 某一节点的平衡因子等于该节点左子树深度-右子树深度。</p><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><h4 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h4><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><h4 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h4><h5 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h5><h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><h3 id="6-3-散列表的查找"><a href="#6-3-散列表的查找" class="headerlink" title="6.3.散列表的查找"></a>6.3.散列表的查找</h3><h4 id="散列表的基本概念"><a href="#散列表的基本概念" class="headerlink" title="散列表的基本概念"></a>散列表的基本概念</h4><h4 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h4><h5 id="构造“好”的散列函数遵循原则"><a href="#构造“好”的散列函数遵循原则" class="headerlink" title="构造“好”的散列函数遵循原则"></a>构造“好”的散列函数遵循原则</h5><ol><li>函数计算要简单,每一个关键词只能有一个散列地址与之对应;</li><li>函数的值域在表长的范围内,计算出的散列地址应该分布均匀,减少冲突.</li></ol><h5 id="散列函数构造方法"><a href="#散列函数构造方法" class="headerlink" title="散列函数构造方法"></a>散列函数构造方法</h5><ol><li><p>数字分析法</p></li><li><p>平方取中法</p></li><li><p>折叠法</p></li><li><p>除留余数法(最常用)</p><blockquote><p>$H(key)=key \mod p$</p><p>这个方法的关键是选取适当的p,一般情况下p应该选取为小于表长的最大质数.</p></blockquote></li></ol><h4 id="处理冲突的方法"><a href="#处理冲突的方法" class="headerlink" title="处理冲突的方法"></a>处理冲突的方法</h4><h5 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h5><ol><li>线性探测法</li><li>二次探测法</li><li>伪随机探测法</li></ol><h5 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h5><h4 id="散列表的查找"><a href="#散列表的查找" class="headerlink" title="散列表的查找"></a>散列表的查找</h4><h5 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h5><ol><li>给定待查找的关键词<code>key</code>,根据散列函数转换成散列下标$H_0=H(key)$</li><li>如果$Hash[H_0]$为空,那么所查元素不存在</li><li>如果$Hash[H_0]中的元素的关键词为key$,那么查找成功</li><li>否则重复下述过程解决冲突<ul><li>按照处理冲突的方法,计算下一个散列下标$H_i$;</li><li>如果$Hash[H_i]为空$,那么所查的元素不存在</li><li>如果$Hash[H_i]==ke y$,则查找成功</li></ul></li></ol><h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">H</span><span class="token punctuation">(</span>Elemtype key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">searchHash</span><span class="token punctuation">(</span>Hashtable<span class="token operator">&amp;</span> hash<span class="token punctuation">,</span> Elemtype key<span class="token punctuation">)</span><span class="token punctuation">{</span>    index <span class="token operator">=</span> <span class="token function">H</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next_index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>next_index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>next_index<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>                <span class="token keyword">return</span> next_index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-排序"><a href="#7-排序" class="headerlink" title="7.排序"></a>7.排序</h2><h3 id="基本概念和排序方法概述"><a href="#基本概念和排序方法概述" class="headerlink" title="基本概念和排序方法概述"></a>基本概念和排序方法概述</h3><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h5 id="插入排序的基本思想"><a href="#插入排序的基本思想" class="headerlink" title="插入排序的基本思想"></a>插入排序的基本思想</h5><p><code>插入排序的基本思想</code> : 每一趟将待排序的记录,按其关键词的大小插入到已经排序好的一组记录的适当位置上.直到所有待排序记录全部插入为止.</p><p>例如打扑克牌排序.</p><p>一边筛选一边丢进去.</p><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><h4 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h4><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><ul><li>不稳定排序</li></ul><h5 id="希尔排序思想"><a href="#希尔排序思想" class="headerlink" title="希尔排序思想"></a>希尔排序思想</h5><p>希尔排序又叫做“缩小增量排序”</p><p><code>希尔排序的思想</code> :  采用分组插入的方法,把整个待排序记录分割成几组,分别对每组进行直接插入排序,然后增加每组的数据量,重新分组.</p><h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h5 id="交换排序的基本思想"><a href="#交换排序的基本思想" class="headerlink" title="交换排序的基本思想"></a>交换排序的基本思想</h5><p><code>交换排序的基本思想</code>: 两两比较待排序的关键词,一旦发现两个记录不满足次序要求时则进行交换,直到整个序列全部满足要求为止.</p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ul><li>稳定排序</li></ul><h5 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h5><ol><li>稳定排序</li><li>可用于链式结构</li><li>移动记录较多,算法平均时间性能比直接插入排序差,当初始记录无序,n较大时,此算法不宜采用</li></ol><h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span> SqList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">BbSort</span><span class="token punctuation">(</span>SqList a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">--</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><ul><li>不稳定排序</li></ul><h5 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h5><p>在冒牌排序过程中,只对相邻的两个记录进行比较,因此每次交换两个相邻记录只能消除一个逆序,如果能通过两个不相邻的记录的一次交换,消除多个逆序,则会大大加快排序的速度.</p><p>快速排序的一次交换可以消除多个逆序.</p><h5 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span>SqList arr<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ls <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rs <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;</span> ls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span>            ls<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>ls<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>            rs<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>rs<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ls <span class="token operator">&lt;</span> rs<span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>ls<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>rs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> l<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> rs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>不稳定排序</li></ul><h5 id="选择排序的基本思想"><a href="#选择排序的基本思想" class="headerlink" title="选择排序的基本思想"></a>选择排序的基本思想</h5><p><code>选择排序的基本思想</code> : 每一趟从待排序的记录中选出关键词最小的记录,按顺序放在已排序的记录序列(起始为空)末端</p><p>先筛选然后丢进去</p><h4 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h4><h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-12-28 11:36:23 * @LastEditTime: 2021-12-28 11:42:39 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">simple_select_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>                index <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>count <span class="token operator">&lt;&lt;</span> <span class="token string">"趟 "</span><span class="token operator">&lt;&lt;</span> <span class="token string">" : "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="树形选择排序"><a href="#树形选择排序" class="headerlink" title="树形选择排序"></a>树形选择排序</h4><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h5 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h5><p>首先把无序序列建成堆(大根堆或者小根堆)</p><p>反复交换堆顶元素和最后一个元素,在调整为堆(大根堆或者小根堆)</p><p>保证每次都是一个当前最大的数有序,类似于冒泡排序</p><h5 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h5><p>堆排序不稳定,但是最坏的情况下,其时间复杂度也为$O(nlog_2n)$</p><p>平均性能接近最坏性能.</p><p>仅需要一个记录大小供交换用的辅助存储空间,所以空间复杂度为O((1).</p><h5 id="算法特点-1"><a href="#算法特点-1" class="headerlink" title="算法特点"></a>算法特点</h5><ol><li>是不稳定排序</li><li>只能用于顺序结构,不能用于链式结构</li><li>建初始堆所需要的比较次数较多,当记录数较少时不宜采用,当记录数较多,相较于快速排序的最差情况的$O(n^2)$,其最差情况也是$O(nlog_2n)$较为高校.</li></ol><h5 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">CreatHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> number<span class="token operator">=</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换堆顶元素和最后一个元素</span>        arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">.</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">.</span>vaue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>        <span class="token function">HeapAdjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重新调整为堆</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li>稳定排序</li><li></li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ul><li>稳定排序</li></ul><h4 id="多关键字的排序"><a href="#多关键字的排序" class="headerlink" title="多关键字的排序"></a>多关键字的排序</h4><h4 id="链式基数排序"><a href="#链式基数排序" class="headerlink" title="链式基数排序"></a>链式基数排序</h4><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><h4 id="外部排序的基本方法"><a href="#外部排序的基本方法" class="headerlink" title="外部排序的基本方法"></a>外部排序的基本方法</h4><h4 id="多路平衡归并的竖线"><a href="#多路平衡归并的竖线" class="headerlink" title="多路平衡归并的竖线"></a>多路平衡归并的竖线</h4><h4 id="置换-选择排序"><a href="#置换-选择排序" class="headerlink" title="置换-选择排序"></a>置换-选择排序</h4><h4 id="最佳归并树"><a href="#最佳归并树" class="headerlink" title="最佳归并树"></a>最佳归并树</h4><hr>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/2022/01/17/ke-cheng-lei/xian-xing-dai-shu/"/>
      <url>/2022/01/17/ke-cheng-lei/xian-xing-dai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-行列式"><a href="#1-行列式" class="headerlink" title="1. 行列式"></a>1. 行列式</h2><h3 id="1-1-行列式的定义"><a href="#1-1-行列式的定义" class="headerlink" title="1.1.行列式的定义"></a>1.1.行列式的定义</h3><h3 id="1-2-行列式的性质"><a href="#1-2-行列式的性质" class="headerlink" title="1.2.行列式的性质"></a>1.2.行列式的性质</h3><ol><li>$D=D^T$</li><li>交换行列式两行或者两列,行列式改变符号. </li><li>行列式某一行(列)的各元素有公因子,则可提到行列式符号的外面</li><li>行列式某一行(列)的所以元素乘以一同一个数<code>k</code>,等于用数<code>k</code>乘此行列式</li><li>若行列式的某一行(列)的元素是都是<code>两数之和</code>,那么可以拆分成两个行列式<code>相加</code></li><li>行列式的某一行(列)的各元素乘以同一个数<code>k</code>后加到另一行(列)对应的元素上去,行列式的值不变</li><li>行列式等于他任一行(列)的各元素与其<code>代数余子式</code>的乘积之和.</li><li>行列式任一行的的元素与另一行的对应元素的<code>代数余子式</code>乘积之和等于零.</li></ol><h3 id="1-3-克莱姆法则"><a href="#1-3-克莱姆法则" class="headerlink" title="1.3.克莱姆法则"></a>1.3.克莱姆法则</h3><h2 id="2-矩阵"><a href="#2-矩阵" class="headerlink" title="2. 矩阵"></a>2. 矩阵</h2><h3 id="矩阵的概念"><a href="#矩阵的概念" class="headerlink" title="矩阵的概念"></a>矩阵的概念</h3><h3 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h3><h4 id="方阵运算"><a href="#方阵运算" class="headerlink" title="方阵运算"></a>方阵运算</h4><ol><li>$(AB)^2=AB\cdot AB$,如果<code>AB=BA</code>,那么$(AB)^2=AB\cdot BA=AA\cdot  BB=A^2B^2$,由此推广到<code>n阶</code>,前提是<code>AB=BA</code>,那么就由如下式子$(AB)^n=A^nB^n$</li></ol><h4 id="方阵行列式计算"><a href="#方阵行列式计算" class="headerlink" title="方阵行列式计算"></a>方阵行列式计算</h4><h4 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h4><blockquote><p>矩阵的转置的定义</p></blockquote><blockquote><p>矩阵的转置的性质</p></blockquote><ol><li>$(AB)^T=B^TA^T$</li><li>$(\lambda A)^T=\lambda A^T$</li></ol><blockquote><p>对称阵的定义</p></blockquote><p><strong>定义</strong> : 设<code>A</code>为n阶矩阵,如果满足. $A^T=A$  ,即. $a_{ij}=a_{ji}(i,j=1,2,\dots,n)$  那么就称A是<code>对称阵</code> </p><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><h4 id="命题-x2F-性质"><a href="#命题-x2F-性质" class="headerlink" title="命题/性质"></a>命题/性质</h4><ol><li>$若A,B同阶,且A,B可逆\Rightarrow AB可逆$.</li></ol><blockquote><p>问题一 : 如何判断一个矩阵<code>A</code>的可逆和不可逆</p></blockquote><p>​判断是否存在是否存在B使得$A\cdot B=E$</p><h4 id="求逆矩阵"><a href="#求逆矩阵" class="headerlink" title="求逆矩阵"></a>求逆矩阵</h4><blockquote><p>公式</p></blockquote><p>$$ A^{-1}= \cfrac{1}{|A|}A^* $$</p><blockquote><p>A*,伴随矩阵</p></blockquote><h3 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h3><h3 id="矩阵的秩与矩阵的初等变换"><a href="#矩阵的秩与矩阵的初等变换" class="headerlink" title="矩阵的秩与矩阵的初等变换"></a>矩阵的秩与矩阵的初等变换</h3><h4 id="秩"><a href="#秩" class="headerlink" title="秩"></a>秩</h4><blockquote><p>定义</p></blockquote><p>矩阵<code>A</code>中存在至少一个不为零的子式的最高阶数<code>x</code>称为矩阵<code>A</code>的秩记为<code>r(A)=x</code> </p><blockquote><p>秩和行列式的关系</p></blockquote><p>对于一个<code>n</code>阶矩阵<code>A</code>,因为总是可以化简为行最简式即可以通过主对角线算出$|A|$</p><ol><li>所以如果说如果一个行列式的秩$r(A)&lt;n$,那么必然存在几行是全为0,由对角线计算可以得$|A|$=0.而$|A|$=0的矩阵又被称为<code>奇异方阵</code>=<code>降秩方阵</code>.</li><li>换句话说,只有$r(A)==n$时,才会有$\vert A\vert \ne 0$,而$|A|\ne 0$的矩阵又被称为<code>非奇异方阵</code>==<code>满秩矩阵</code>==<code>可逆方阵</code></li></ol><h2 id="n维向量组与线性方程组"><a href="#n维向量组与线性方程组" class="headerlink" title="n维向量组与线性方程组"></a>n维向量组与线性方程组</h2><h3 id="向量组的线性相关性"><a href="#向量组的线性相关性" class="headerlink" title="向量组的线性相关性"></a>向量组的线性相关性</h3><h4 id="线性相关"><a href="#线性相关" class="headerlink" title="线性相关"></a>线性相关</h4><blockquote><p>定义</p></blockquote><ol><li><p><code>向量组a!=0</code>时,存在一组<code>不全为零</code>的$k_1,k_2,\dots k_m$,使得$B=k_1a_1+k_2a_2+k_3a_3+···k_ma_m$那么就说<code>B</code>可以由向量组$a_1,a_2,\dots,a_n$线性表示</p></li><li><p>存在一组不全为0的$k_1,k_2,···k_m$,使得$k_1a_1+k_2a_2+···k_ma_m=0$,</p></li></ol><p>那么向量组$a_1,a_2,···,a_n$线性相关</p><blockquote><p> 线性相关的条件</p></blockquote><ol><li><em>充分必要条件</em><ol><li>向量组$a_1,a_2\dots ,a_n$(m&gt;=2)中至少有一个向量可由其余<code>m-1</code>个向量线性表示</li><li>向量组$a_1,a_2,\dots ,a_n$所组成的矩阵A的<code>秩</code>小于<code>向量组的个数</code>,即$r(A)&lt;n$</li></ol></li></ol><blockquote><p> 线性相关的定理</p></blockquote><ol><li>如果向量组中<code>部分组</code>线性相关,那么<code>整个向量组</code>线性相关—部分相关-&gt;整体相关</li><li>如果向量组中<code>整个向量组</code>线性无关,那么任何<code>部分组</code>线性无关—整体无关-&gt;部分无关</li></ol><h3 id="向量组的最大无关组和秩"><a href="#向量组的最大无关组和秩" class="headerlink" title="向量组的最大无关组和秩"></a>向量组的最大无关组和秩</h3><h3 id="线性方程组解的结构"><a href="#线性方程组解的结构" class="headerlink" title="线性方程组解的结构"></a>线性方程组解的结构</h3><h4 id="齐次方程组"><a href="#齐次方程组" class="headerlink" title="齐次方程组"></a>齐次方程组</h4><blockquote><p>齐次方程组的解</p></blockquote><ol><li><code>n</code>元齐次线性方程组$Ax=0$存在<code>非零解的充分必要条件</code>是$r(A)&lt;n$</li><li><code>n</code>元齐次线性方程组$Ax=0$<code>只有零解的充分必要条件</code>是$r(A)=n$</li></ol><blockquote><p>齐次方程组的基础解系解向量的个数</p></blockquote><p><code>n</code>元齐次线性方程组$Ax=0$的基础解系<code>解向量的个数</code> : $x- r(A)$</p><p>n元代表着有n个未知数</p><blockquote><p>齐次线性方程的解性质</p></blockquote><ol><li>设n1,n2,n3为齐次线性方程组$AX=0$的一个基础解系,那么如果存在</li></ol><p>  a1=n1+n2+n3,<br>  a2=n2-n3,<br>  a3=n2+n3,</p><p>  <code>问</code>:那么a1,a2,a3是不是方程组的基础解系?</p><p>  <code>解</code>:a1,a2,a3显然也是方程组$AX=0$的解,所以只需要判断a1,a2,a3是否线性无关··<br>  证得(省略)线性无关—-所以a1,a2,a3为$AX=0$的基础解系.</p><ol start="2"><li><p>齐次方程组的任意两个解之和还是它的解</p></li><li><p>齐次方程组的解的任意倍数还是它的解</p></li></ol><h4 id="知识问题"><a href="#知识问题" class="headerlink" title="知识问题"></a>知识问题</h4><blockquote><ol><li>问题一 : 齐次方程组的非零解如何求?</li></ol></blockquote><p>​因为存在非零解的充分必要条件是$r(A)&lt;n$,所以就是要求系数矩阵$\vert A \vert =0$</p><blockquote><ol start="2"><li>问题二:如何求齐次方程组的通解</li></ol></blockquote><ol><li>通过初等矩阵变换,化成行最简式子</li></ol><p>​</p><h4 id="非齐次方程组"><a href="#非齐次方程组" class="headerlink" title="非齐次方程组"></a>非齐次方程组</h4><blockquote><p>通解</p></blockquote><p>如果非齐次方程组  $Ax=b$  有解,那么其通解为  $x=S+B$</p><p>其中<code>S</code>为导出组$Ax=0$的解,<code>B</code>为$Ax=b$的一个特解.</p><blockquote><p>性质</p></blockquote><ol><li><p>如果<code>n</code>是非齐次方程组$Ax=b$的解,<code>t</code>是其导出组$Ax=0$的解,那么<code>n+t</code>仍然为 $Ax=b$ 的解.</p><ul><li><blockquote><p>$A(n+t)=An+At=b+0=b$</p></blockquote></li></ul></li></ol><h4 id="知识问题-1"><a href="#知识问题-1" class="headerlink" title="知识问题"></a>知识问题</h4><blockquote><ol><li>问题一 : 如何求出非齐次方程组的导出组$Ax=0$的解</li></ol></blockquote><p>设<code>n1</code>,<code>n2</code>为非齐次线性方程组的解,那么 <code>n1-n2</code>——就是对应的齐次线性方程的导出组的解</p><blockquote><ol start="2"><li>问题二:非齐次方程组如何为无解?如何为无穷多解?如何为唯一解?</li></ol></blockquote><p>设A为系数矩阵,B为增广矩阵</p><ol><li><p>当系数矩阵的值不等于0,即————–$\vert A\vert!=0$———方程有唯一解(零解)也即是对应$r(A)=n$</p></li><li><p>当系数矩阵的秩大于增广矩阵的秩,即–$r(A)&gt;=r(B)$——–方程有无穷多解</p></li><li><p>当系数矩阵的秩小于增广矩阵的秩,即–$r(A)&lt;r(B)$———方程无解</p></li></ol><h3 id="向量空间"><a href="#向量空间" class="headerlink" title="向量空间"></a>向量空间</h3><h4 id="向量空间的定义"><a href="#向量空间的定义" class="headerlink" title="向量空间的定义"></a>向量空间的定义</h4><p>设<code>V</code>是非空的n维向量的集合,若V对向量的<code>加法</code>以及向量的<code>乘法</code>这两种运算<code>封闭</code>,那么就称V是一个<code>向量空间</code></p><blockquote><p>问题一:如何求一个向量在基上的坐标</p></blockquote><p>将这个向量用基上的向量线性表示出来</p><h2 id="4-矩阵对角化"><a href="#4-矩阵对角化" class="headerlink" title="4.矩阵对角化"></a>4.矩阵对角化</h2><h3 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h3><h4 id="特征值与特征向量-1"><a href="#特征值与特征向量-1" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h4><blockquote><p>特征值和特征向量的定义</p></blockquote><p>设<code>A</code>是一个n阶方阵,如果存在一个数<code>y</code>和一个<code>非零向量x</code>使得关系式<br>                                                    $$Ax=yx$$</p><p>成立,那么<code>y</code>就是方阵<code>A</code>的<code>特征值</code>,<code>非零向量x</code>就称为<code>A</code>的对应于特征值<code>y</code>的<code>特征向量</code>.</p><blockquote><p>特征值和特征向量的基本性质</p></blockquote><ol><li><p>n阶矩阵$A$与她的逆矩阵$A^{-1}$<code>特征值互为倒数</code>.</p></li><li><p>n阶矩阵$A$与他的转置矩阵$A^T$<code>有相同的特征值</code></p></li><li><p>如果$y$是方阵$A$的特征值,$x$是对应于$y$的特征向量,则</p></li><li><p>$uy$是$uA$的特征值,$x$是对应于$uy$的特征向量(u是常数).</p></li><li><p>$y^m$是$A^m$的特征值,$x$是对应于$y^m$的特征向量.</p></li><li><p>设<code>n</code>阶矩阵$A=(a_{ij})_{n\cdot n}$的n个特征值为$\lambda_1 +\lambda_2 +···+\lambda_n$则有如下</p><ul><li><p>$\lambda_1 +\lambda_2 +···+\lambda_n=a_{11}+a_{22}···+a_{nn}=t rA$</p></li><li><p>$\lambda_1\lambda_2 \lambda_3 ···· \lambda_n=\vert A \vert $</p></li></ul></li><li><p>n阶矩阵A属于互不相同的特征值$\lambda_1,\lambda_2 ····+ \lambda_m$的特征向量$a_1,a_2,····,a_m$线性无关.</p></li><li></li></ol><h4 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h4><blockquote><p>问题一:如何求特征值和特征向量🤨</p></blockquote><ol><li><p>特征值</p><p> 有非零解的充分必要条件是系数行列式$\vert A-yE\vert =0$</p><p> $Ax=yx$等价于$(A-yE)x=0$,所以解这个<code>行列式方程</code>$\vert A-yE\vert =0$可以得到<code>y</code>的值即特征值</p></li><li><p>特征向量</p><p> 将求得的特征值<code>y</code>代入$(A-yE)$<code>矩阵</code>中求基础解系.其就是特征向量.</p></li></ol><h3 id="相似矩阵和矩阵的对角化"><a href="#相似矩阵和矩阵的对角化" class="headerlink" title="相似矩阵和矩阵的对角化"></a>相似矩阵和矩阵的对角化</h3><h4 id="相似矩阵"><a href="#相似矩阵" class="headerlink" title="相似矩阵"></a>相似矩阵</h4><blockquote><p>相似矩阵的定义</p></blockquote><p>设<code>A</code>,<code>B</code>都是<code>n</code>阶方阵,如果存在一个可逆方阵<code>P</code>,使得</p><p>$P^{-1}AP=B$.</p><p>那么就称<code>A</code>与<code>B</code>相似.</p><p>如果A和B有相同的特征多项式,那么矩阵A与B相似.</p><blockquote><p>相似矩阵的性质</p></blockquote><ol><li>相似矩阵具有相同的特征多项式</li><li>相似矩阵如果可逆,则逆矩阵也相似</li></ol><h4 id="矩阵的对角化"><a href="#矩阵的对角化" class="headerlink" title="矩阵的对角化"></a>矩阵的对角化</h4><blockquote><p>矩阵的对角化的定义</p></blockquote><p>n阶矩阵<code>A</code>与<code>对角矩阵</code>相似,那么这就称作<code>矩阵的对角化</code></p><blockquote><p><strong>n阶矩阵A对角化的充分必要条件</strong></p></blockquote><ol><li>A有 n 个线性无关的特征向量.</li></ol><h4 id="问题解答-1"><a href="#问题解答-1" class="headerlink" title="问题解答"></a>问题解答</h4><blockquote><ol><li>问题一 : n阶矩阵<code>A</code>与对角矩阵相似(对角化),求 B 以及可逆方阵 P</li></ol></blockquote><ol><li><p>根据$\vert A-\lambda E\vert =0$求<code>A</code>的所有<code>特征值</code></p></li><li><p>看<code>特征值</code>的数量</p></li></ol><ul><li>如果小于n,说明A不能相似于对角矩阵</li></ul><ol start="3"><li><p>反之,对角矩阵<code>B</code>就是由<code>特征值</code>组成的对角矩阵.</p></li><li><p>根据<code>特征值</code>求出<code>特征向量</code>.</p></li><li><p>可逆矩阵<code>P</code>就是由<code>特征向量</code>按列组成的矩阵</p></li></ol><p>​</p><p>​</p><h3 id="4-3实对称矩阵的对角化"><a href="#4-3实对称矩阵的对角化" class="headerlink" title="4.3实对称矩阵的对角化"></a>4.3实对称矩阵的对角化</h3><h4 id="向量的内积"><a href="#向量的内积" class="headerlink" title="向量的内积"></a>向量的内积</h4><h5 id="向量的内积的定义"><a href="#向量的内积的定义" class="headerlink" title="向量的内积的定义"></a>向量的内积的定义</h5><p>**定义 **: 设n维<code>实向量</code>$a=\begin{bmatrix}a_1\a_2\a_3\\vdots\a_n \end{bmatrix}$,$b=\begin{bmatrix}b_1\b_2\b_3\\vdots\b_n \end{bmatrix}$,称实数$a_1b_1+a_2b_2+a_3b_3···+a_nb_n$</p><p>为向量<code>a</code>与<code>b</code>的内积记作<code>[a,b]</code>.</p><ul><li><p>$[a,b]=0,那么a和b的夹角为\cfrac{\pi}{2}$</p></li><li><p>内积是向量的一种运算,其结果是一个<code>数</code>.</p></li><li><p>用矩阵形式表示,有<br>  $\big[a,b\big]=[a_1,\dots,a_n]\begin{bmatrix} b_1\b_2\\vdots \ \ b_n\end{bmatrix} =a^Tb$</p></li></ul><h5 id="向量的内积的性质"><a href="#向量的内积的性质" class="headerlink" title="向量的内积的性质"></a>向量的内积的性质</h5><ol><li><p><code>对称性</code> :$ [a,b]=[b,a]$</p></li><li><p><code>线性性</code>: </p></li><li><p>$[a+b , x] = [a , x] + [b , x].$</p><ul><li><p>证明</p><p>  $[a+b,x]=(a_1+b_1)x+(a_2+b_2)x+\dots(a_n+b_n)x$</p></li></ul><p> ​   $=a_1x+b_1x+a_2x+b_2x+\dots a_nx+b_nx$</p><p> ​$=[a,x]+[b,x]$ </p><pre><code>证毕</code></pre></li><li><p>$[ka , b] = k[a , b]$</p></li><li><p><code>正定性</code></p><p>$[a , a]\ge0$,当且仅当$a\ne0$时,$[a,a]\gt 0$</p></li></ol><h4 id="向量的长度"><a href="#向量的长度" class="headerlink" title="向量的长度"></a>向量的长度</h4><h5 id="向量长度的概念"><a href="#向量长度的概念" class="headerlink" title="向量长度的概念"></a>向量长度的概念</h5><p><strong>定义</strong> : 令$||a||=\sqrt{[a,a]}=\sqrt{a_1^2+a_2^2+\dots a_n^2}$为n维向量<code>a</code>的长度(模或范数).</p><ul><li><p>特别的长度为1的向量称为<code>单位向量</code>.</p></li><li><p>$当a\ne 0 时,a^0=\cfrac{1}{||a||}a$是a的单位向量.</p></li><li><p>由<code>非零向量a</code>得到单位向量$a^0=\cfrac{1}{||a||}a$的过程称为<code>把a单位化</code>.</p></li></ul><h5 id="向量长度的性质"><a href="#向量长度的性质" class="headerlink" title="向量长度的性质"></a>向量长度的性质</h5><ol><li>(非负性)<code>正定性</code> : $||a||\ge 0,且a=0 \Leftrightarrow ||a|| = 0$.</li><li><code>齐次性</code>: $||ka||=|k|\cdot ||a||$.</li><li><code>三角不等式 </code>: $||a+b|| \le ||a|| + ||b||$</li></ol><h5 id="柯西-施瓦茨-Cauchy-Schwarz-不等式"><a href="#柯西-施瓦茨-Cauchy-Schwarz-不等式" class="headerlink" title="柯西-施瓦茨(Cauchy-Schwarz)不等式"></a>柯西-施瓦茨(Cauchy-Schwarz)不等式</h5><p>$[a,b]^2\le ||a||^2||b||^2$<br>即$[a,b]^2\le[a,a][b,b]$</p><p>当且仅当<code>a</code>与<code>b</code>线性相关时,等号成立.</p><h4 id="向量的夹角"><a href="#向量的夹角" class="headerlink" title="向量的夹角"></a>向量的夹角</h4><h5 id="向量之间的夹角定义"><a href="#向量之间的夹角定义" class="headerlink" title="向量之间的夹角定义"></a>向量之间的夹角定义</h5><p>设<code>a</code>与<code>b</code>为n维空间的两个非零向量,<code>a</code>与<code>b</code>的<code>夹角余弦</code>为$\cos\theta=\cfrac{[a,b]}{||a||||b||}$</p><p>因此<code>a</code>与<code>b</code>的<code>夹角</code>为$\theta=\arccos\cfrac{a,b}{||a||||b||},0\le\theta\le \pi$</p><h4 id="向量的正交化相关定义"><a href="#向量的正交化相关定义" class="headerlink" title="向量的正交化相关定义"></a>向量的正交化相关定义</h4><h5 id="向量的正交化的定义"><a href="#向量的正交化的定义" class="headerlink" title="向量的正交化的定义"></a>向量的正交化的定义</h5><p>**定义 **: 当$[a,b]=0$,那么就称<code>a</code>与<code>b</code>是正交.记作$a\perp b$.</p><p><strong>注</strong>  $\perp 为正交符号$</p><ul><li><p>若<code>a = 0</code>,那么<code>a</code>与任何向量都正交</p></li><li><p>$a\perp a \Leftrightarrow a=0$</p></li><li><p>对于<code>非零向量a与b</code>, $a\perp b\Leftrightarrow\angle(a,b)=\cfrac{\pi}{2}$.</p></li></ul><h5 id="正交向量组的定义"><a href="#正交向量组的定义" class="headerlink" title="正交向量组的定义"></a>正交向量组的定义</h5><p><strong>定义</strong>:如果向量组中的向量<code>两两正交</code>,且均为<code>非零向量</code>,那么这个向量组就称为正交向量组,简称为<code>正交组</code>.</p><h5 id="规范正交组的定义"><a href="#规范正交组的定义" class="headerlink" title="规范正交组的定义"></a>规范正交组的定义</h5><p><strong>定义</strong>:由<code>单位向量</code>组成的<code>正交组</code>称为<code>规范正交组</code>.</p><ul><li>例如$e_1=\begin{bmatrix}1\0\0\end{bmatrix},e_2=\begin{bmatrix} 0\1\0\end{bmatrix},e_3=\begin{bmatrix}0\0\1\end{bmatrix}$就是一个规范正交组</li></ul><h5 id="正交基的定义"><a href="#正交基的定义" class="headerlink" title="正交基的定义"></a>正交基的定义</h5><p><strong>定义</strong> : 如果<code>正交向量组</code>$a_1,a_2,\dots a_n$为向量空间<code>V</code>上的一个基,那么就称$a_1,a_2,\dots a_n$为向量空间<code>V</code>上的一个<code>正交基</code></p><h5 id="规范正交基定义"><a href="#规范正交基定义" class="headerlink" title="规范正交基定义"></a>规范正交基定义</h5><p><strong>定义</strong>:如果<code>规范正交组</code>$b_1,b_2\dots ,b_n$为向量空间<code>V</code>上的一个基,那么就称$b_1,b_2\dots ,b_n$为向量空间<code>V</code>上的一个<code>规范正交基</code>.</p><h5 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h5><ol><li><p>若n维向量$a_1,a_2\dots,a_n$是一组<code>两两正交</code>的<code>非零向量</code>,则$a_1,a_2,\dots ,a_n$,<code>线性无关</code>.</p><ul><li><blockquote><p>证明</p></blockquote></li></ul></li></ol><blockquote><p>设有$\lambda_1,\lambda_2,\dots ,\lambda_n$使得<br>$\lambda_1 a_1 + \lambda_2 a_2 + \dots +\lambda_r a_r = 0$<br>以$a_1$与上述两端作内积,由向量内积的<code>线性性</code>性质得<br>$\lambda_1[a_1,a_1]+\lambda_2[a_1,a_2]+\dots + \lambda_r[a_1,a_r]=0$<br>因为$a_1\ne 0$,由向量内积的<code>正定性</code>性质得<br>$[a_1,a_1]=||a_1||^2\ge 0$,而$\lambda_1[a_1,a_1]=0$<br>所以就可以知道$\lambda_1=0$,同理可证$\lambda_2=0,\lambda_3=0\dots ,\lambda_r=0$<br>所以,向量组$a_1,a_2\dots ,a_n$线性无关.<br>证毕</p></blockquote><p>2. </p><h4 id="向量的正交化"><a href="#向量的正交化" class="headerlink" title="向量的正交化"></a>向量的正交化</h4><h5 id="向量在规范正交基中的坐标的计算公式"><a href="#向量在规范正交基中的坐标的计算公式" class="headerlink" title="向量在规范正交基中的坐标的计算公式"></a>向量在规范正交基中的坐标的计算公式</h5><p>设$e_1,e_2,e_3\dots ,e_r$是向量空间<code>V</code>得一个规范正交基</p><p>$\forall a \in V,a=\lambda_1e_1+\dots+\lambda_re_r$</p><p>用$e_i^T$对左右两边做内积,得</p><p>$e_i^Ta=\lambda_1e_i^Te_1+\dots+\lambda_i e_i^Te_i+\dots \lambda_re_i^Te_r$</p><p>因为$e_1,e_2,e_3,\dots ,e_r$是规范正交基,得任意$[e_i,e_j]$等于0,所以</p><p>$e_i^Ta=\lambda_ie_i^Te_i=\lambda_i$</p><p>即$\lambda_i=e_i^Ta=[a,e_i]$</p><p><strong>这个公式可以方便的求得向量的坐标.</strong></p><h4 id="施密特-Schmidt-正交化法"><a href="#施密特-Schmidt-正交化法" class="headerlink" title="施密特(Schmidt)正交化法"></a>施密特(Schmidt)正交化法</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>设$a_1,a_2,\dots ,a_n$是向量空间<code>V</code>的一个基,要求向量空间V的一个<code>规范正交基</code>.</p><p>也就是要找一组两两正交的单位向量$b_1,b_2,\dots , b_n$,使$b_1,b_2,\dots ,b_n$与$a_1,a_2,\dots ,a_n$等价.</p><p>此问题称为把$a_1,a_2,\dots ,a_n$<strong>规范正交化</strong></p><h5 id="Schmidt正交化法"><a href="#Schmidt正交化法" class="headerlink" title="Schmidt正交化法"></a>Schmidt正交化法</h5><ol><li><p>正交化</p><p> 对 $b_i映射到a_i上 = \cfrac{[b_i,a_i]}{[b_i,b_i]}$</p><p> $令b_1=a_1$<br> $b_2=a_2-\cfrac{[b_1,a_2]}{[b_1,b_1]}b_1$</p><p> $b_3=a_3-\cfrac{[b_1,a_3]}{[b_1,b_1]}b_1-\cfrac{[b_2,a_3]}{[b_2,b_2]}b_2$</p><p> $b_r =a_r-\cfrac{[b_1,a_r]}{[b_1,b_1]}b1-\cfrac{[b_2,a_r]}{[b_2,b_2]}b2-\dots - \cfrac{[b_{r-1},a_r]}{[b_{r-1},b_{r-1}]}br$</p></li></ol><p>​</p><ol start="2"><li>规范化</li></ol><p>​      $c_1=\cfrac{1}{||b_1||}b_1$</p><p>​  $c_2=\cfrac{1}{||b_2||}b_2$</p><p>​  $c_r=\cfrac{1}{||b_r||}b_r$</p><p>就得到<code>V</code>的一个规范正交基</p><p><strong>注</strong> 上述方法中的两个向量组对任意的 $1\le k \le r$,</p><p>$c_1,c_2,\dots ,c_r$与$a_1,a_2,\dots a_r$都是等价的</p><h4 id="正交矩阵"><a href="#正交矩阵" class="headerlink" title="正交矩阵"></a>正交矩阵</h4><h5 id="正交矩阵的定义"><a href="#正交矩阵的定义" class="headerlink" title="正交矩阵的定义"></a>正交矩阵的定义</h5><p>如果n阶方阵<code>A</code>满足</p><p>$A^TA=E(即A^{-1}=A^T)$</p><p>那么就称A为<code>正交矩阵</code></p><blockquote><p>同对称矩阵做区分: 对称矩阵是满足$A^T=A$的矩阵称为对称矩阵</p></blockquote><h5 id="正交矩阵的性质"><a href="#正交矩阵的性质" class="headerlink" title="正交矩阵的性质"></a>正交矩阵的性质</h5><p>设A,B都是n阶正交矩阵,那么</p><ol><li>$\vert A \vert =\pm 1$</li><li>A的列(行)向量组是两两正交的单位向量.</li><li></li></ol><blockquote><ol><li>问题一:如何求正交矩阵</li></ol></blockquote><ol><li><p>根据$\vert A-\lambda E\vert$算出特征值</p></li><li><p>算出特征向量</p></li><li><p>运用施密特正交化规范化</p></li><li><p>单位化</p></li></ol><h2 id="5-二次型"><a href="#5-二次型" class="headerlink" title="5.二次型"></a>5.二次型</h2><h3 id="5-1-二次型及其矩阵表示"><a href="#5-1-二次型及其矩阵表示" class="headerlink" title="5.1.二次型及其矩阵表示"></a>5.1.二次型及其矩阵表示</h3><h3 id="5-2-二次型的标准形"><a href="#5-2-二次型的标准形" class="headerlink" title="5.2.二次型的标准形"></a>5.2.二次型的标准形</h3><h3 id="5-3-正定二次型"><a href="#5-3-正定二次型" class="headerlink" title="5.3.正定二次型"></a>5.3.正定二次型</h3><h2 id="6-线性空间与线性交换"><a href="#6-线性空间与线性交换" class="headerlink" title="6.线性空间与线性交换"></a>6.线性空间与线性交换</h2><h3 id="6-1-线性空间的基本概念"><a href="#6-1-线性空间的基本概念" class="headerlink" title="6.1.线性空间的基本概念"></a>6.1.线性空间的基本概念</h3><h3 id="6-2-线性变换"><a href="#6-2-线性变换" class="headerlink" title="6.2.线性变换"></a>6.2.线性变换</h3>]]></content>
      
      
      <categories>
          
          <category> course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Not Assigning</title>
      <link href="/2022/01/17/summary/codeforces/20220115-766d2/1627c.not-assigning/"/>
      <url>/2022/01/17/summary/codeforces/20220115-766d2/1627c.not-assigning/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/**** * 1627C. Not Assigning * https://codeforces.com/contest/1627/problem/C * 题目描述: *   求构造一个素数树,即要求权重为素数,任意一条或者两条路径权重之和为素数 * Tag: *  1.染色二分图 *  2.dfs * 思路: *  1.因为每条边权重都是素数,所以一个点的度不能大于等于三,因为不存在这样的三个素数使得每个两两相加为素数 *  2.所以对于存在度大于等于三那么就是输出-1 *  3.否则就是对每条边进行编号,然后用dfs进行权重为2或3进行交替染色, * 问题: *  1.然后我用邻接表的时候遇到了Memory limit 所以该用结构体然后过了(待以后看看为啥) *  *  */</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> e<span class="token punctuation">,</span> id<span class="token punctuation">,</span> ne<span class="token punctuation">;</span><span class="token punctuation">}</span> value<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    value<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">,</span> value<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>e <span class="token operator">=</span> b<span class="token punctuation">,</span> value<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>ne <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> fa<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ne<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> fa<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> x<span class="token punctuation">,</span> c <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">des</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        des<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> des<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>des<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>des<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/14/templates/ac/"/>
      <url>/2021/12/14/templates/ac/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/14/templates/bo-ke-de-wang-ye-ge-shi/"/>
      <url>/2021/12/14/templates/bo-ke-de-wang-ye-ge-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/14/templates/cf/"/>
      <url>/2021/12/14/templates/cf/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4195.线段覆盖</title>
      <link href="/2021/12/13/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/4195.xian-duan-fu-gai/"/>
      <url>/2021/12/13/summary/acwing/2022-nian-han-jia-mei-ri-yi-ti/4195.xian-duan-fu-gai/</url>
      
        <content type="html"><![CDATA[<h3 id="线段覆盖"><a href="#线段覆盖" class="headerlink" title="线段覆盖"></a><a href="https://www.acwing.com/problem/content/4198/">线段覆盖</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个坐标轴上有  n 条线段。</p><p>每条线段的每个端点的坐标都为整数。</p><p>可能存在退化成点的线段。</p><p>线段之间可以相互交叉、嵌套甚至重合。</p><p>请你计算，对于每个 $k∈{1,2,…,n},k∈{1,2,…,n}$，坐标轴中共有多少个<strong>整数坐标</strong>的点满足恰好被 kk 条线段覆盖。</p><p>注意，左右端点分别为 $li,ri$ 的线段覆盖点 x 当且仅当 $li≤x≤ri$。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含整数 n.</p><p>接下来 n 行，每行包含两个整数 li,ri，表示一条线段的左右端点。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行 n个整数，其中第 i 个整数表示坐标轴中满足恰好被 i 条线段覆盖的<strong>整数坐标</strong>的点的数量。</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>所有测试点满足$ 1≤n≤n≤2×10^5，0≤li≤ri≤10^{18}$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>数据范围很大,所以用map存储差分,每个端点的差分值<code>v</code>求前缀和<code>sum</code>后:<br><code>sum</code>表示当前端点之后到下一个端点之间的每个点的个数都为<code>sum</code>.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-12-11 19:07:51 * @LastEditTime: 2021-12-13 13:49:42 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>LL<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>LL ans<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//sum:当前边的重叠数目</span>    <span class="token comment">//last:上一个顶点下标</span>    LL sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">+=</span> k <span class="token operator">-</span> last<span class="token punctuation">;</span> <span class="token comment">//如果不是边界问题,那么就计算两个端点之间的长度</span>        <span class="token comment">//  sum=sum+v,表示在 k 点到 k+1 点之内边的重叠数目为sum</span>        sum <span class="token operator">+=</span> v<span class="token punctuation">;</span>        last <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="/2021/12/04/web/django/"/>
      <url>/2021/12/04/web/django/</url>
      
        <content type="html"><![CDATA[<h2 id="Django理解"><a href="#Django理解" class="headerlink" title="Django理解"></a>Django理解</h2><h3 id="什么是Django"><a href="#什么是Django" class="headerlink" title="什么是Django?"></a>什么是Django?</h3><ol><li>Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模版T</li></ol><p>自带管理后台，只需几行简单代码的设置，就可以让目标网站拥有一个强大的管理后台，轻松对内容进行增加、删除、修改与查找，并且能很方便地定制搜索、过滤等操作。</p><p>灵活的路由系统，可以定义优雅的访问地址，按需定义，毫无障碍。</p><p>强大的数据库 ORM，拥有强大的数据库操作接口(QuerySet API)，可以轻松执行原生 SQL。</p><p>易用的模板系统，自带强大、易扩展的模板系统。</p><h4 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4><p>将一个应用程序分解成三个组成部分:</p><ol><li><code>model</code>–(模型)—M–管理应用程序的状态(通常存储到数据库中)</li><li><code>view</code>–(视图)—V–负责把数据格式化后呈现给用户</li><li><code>controller</code>–(控制器)–C–接受外部用户的操作,根据操作访问<code>model</code>获取数据,调用<code>view</code>呈现给用户,<code>controller</code>将<code>model</code>和<code>view</code>隔离并成为两者的纽带</li></ol><h4 id="django的运行模式"><a href="#django的运行模式" class="headerlink" title="django的运行模式"></a>django的运行模式</h4><p>其实django也是一个MVC模式,但是在django中,<code>控制器</code>接受用户输入的部分由框架执行处理,所以django更关注的是</p><ol><li><p><code>model</code>–(模型)–M,即数据存储层,这里处理与数据有关所有事件;</p></li><li><p><code>template</code>–(模板)-T,即表现层,该层处理与表现相关的决定;</p></li><li><p><code>view</code>–(视图)-V,即业务逻辑层,该层包含存储<code>model</code>以及调取<code>template</code>的相关逻辑,也可以说是<code>template</code>和<code>model</code>之间的桥梁</p></li></ol><h3 id="Django的作用"><a href="#Django的作用" class="headerlink" title="Django的作用?"></a>Django的作用?</h3><ol><li><code>Django</code>可用于创建<code>动态</code>的<code>高安全</code>性<code>web应用程序</code>。也就是说，通常由数据库支持的软件，包括某种通过浏览器操作的交互性。框架为这种软件的开发提供了一种结构和常用的方法。</li><li></li></ol><h3 id="为什么要用Django"><a href="#为什么要用Django" class="headerlink" title="为什么要用Django?"></a>为什么要用Django?</h3><h3 id="Django的实现逻辑"><a href="#Django的实现逻辑" class="headerlink" title="Django的实现逻辑?"></a>Django的实现逻辑?</h3><h2 id="1-项目框架"><a href="#1-项目框架" class="headerlink" title="1. 项目框架"></a>1. 项目框架</h2><h3 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h3><ol><li><code>Tempaltes</code> 目录,管理HTML文件</li><li><code>urls</code> 目录,管理路由,链接和函数的对应关系</li><li><code>views</code>目录,管理<code>http</code>函数</li><li><code>models</code>目录,管理数据库数据</li><li><code>static</code>目录,管理静态文件比如:<ul><li><code>css</code>对象格式</li><li><code>js</code>对象逻辑</li><li><code>image</code>图片</li><li><code>audio</code>声音</li></ul></li><li><code>consumers</code>目录,管理<code>websocket</code>函数</li></ol><hr><h3 id="项目板块"><a href="#项目板块" class="headerlink" title="项目板块"></a>项目板块</h3><ol><li><code>menu</code></li><li><code>playground</code></li><li><code>settings</code></li></ol><h3 id="整理项目结构"><a href="#整理项目结构" class="headerlink" title="整理项目结构"></a>整理项目结构</h3><p>为了防止<code>urls.py</code>和<code>views.py</code>太长,因为删掉单个文件,改用<code>moudle</code>,如果是<code>moudle</code>的话,需要有<code>__init__.py</code>来帮助pyhon来认定这个文件夹是一个`moudle</p><h4 id="django工作流程"><a href="#django工作流程" class="headerlink" title="django工作流程"></a>django工作流程</h4><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">title: django工作流程总urls -&gt; urls  :链接跳转urls --&gt;总urls:返回视图给总路由urls -&gt; views  :链接跳转views--&gt;urls:返回html函数views-&gt;model:调用数据model--&gt;views:返回数据views -&gt; template:调用html函数template--&gt; views:返回html文件template-&gt;static:调用css,js,audio,imagestatic--&gt;template:返回上述文件汇总的game.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">static-&gt;Game:调用游戏对象Game(id)Game--&gt; static:返回汇总的game.jsGame -&gt; GameMenu:调用菜单对象GameMenu(Game)GameMenu --&gt;Game:返回zbase.jsGame-&gt;Settings:调用设置对象Settings(Game)Settings--&gt;Game:返回zbase.jsGame-&gt; GamePlayground:调用游戏界面对象GamePlayground(Game)GamePlayground --&gt;Game:返回zbse.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GamePlayground类"><a href="#GamePlayground类" class="headerlink" title="GamePlayground类"></a>GamePlayground类</h4><p>游戏画面基于帧的刷新来进行移动和攻击等等,那么就需要一个类来实现画面的刷新<code>GameObject</code>,那么所有需要刷新的物体都应该继承这个类<code>GameObject</code>.</p><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">GamePlayground-&gt;Enemy:调用敌人对象Enemy(GamePlayground)Enemy--&gt;GamePlayground:返回zbase.jsGamePlayground-&gt;Player:调用玩家对象Player(GamePlayground)Player--&gt;GamePlayground:返回zbase.jsGamePlayground-&gt;Map:调用地图对象GameMap(GamePlayground)Map--&gt;GamePlayground:返回zbase.jsGamePlayground-&gt;Skill:调用技能对象Fireball(GamePlayground)Skill-&gt;GamePlayground:返回zbase.jsSkill-&gt;GameObject:继承Enemy-&gt;GameObject:继承Map-&gt;GameObject:继承Player-&gt;GameObject:继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>####待处理更新</p><h2 id="2-创建菜单界面"><a href="#2-创建菜单界面" class="headerlink" title="2.创建菜单界面"></a>2.创建菜单界面</h2><h3 id="修改全局设置"><a href="#修改全局设置" class="headerlink" title="修改全局设置"></a>修改全局设置</h3><h4 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h4><p><code>app/app/settings.py</code>文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'UTC'</span><span class="token operator">+</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="添加app"><a href="#添加app" class="headerlink" title="添加app"></a>添加app</h4><p><code>app/app/settings.py</code>文件中</p><p><img src="/2021/12/04/web/django/image-20211215004001233.png" alt="image-20211215004001233"></p><h4 id="设置静态文件路径"><a href="#设置静态文件路径" class="headerlink" title="设置静态文件路径"></a>设置静态文件路径</h4><p><code>app/app/settings.py</code>文件中</p><p><img src="/2021/12/04/web/django/image-20211215004220077.png" alt="image-20211215004220077"></p><h4 id="打包js的shell脚本"><a href="#打包js的shell脚本" class="headerlink" title="打包js的shell脚本"></a>打包<code>js</code>的shell脚本</h4><p>可以在<code>app</code>的根路径上创建一个<code>script</code>文件夹</p><p>用<code>shell</code>命令手写一个打包程序,将<code>src</code>的所有<code>js</code>文件汇总成一个<code>js</code>放到<code>dist</code>文件夹下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">JS_PATH</span><span class="token operator">=</span>/home/acs/acapp/game/static/js/<span class="token assign-left variable">JS_PATH_DIST</span><span class="token operator">=</span><span class="token variable">${JS_PATH}</span>dist/<span class="token assign-left variable">JS_PATH_SRC</span><span class="token operator">=</span><span class="token variable">${JS_PATH}</span>src/<span class="token function">find</span> <span class="token variable">$JS_PATH_SRC</span> -type f -name <span class="token string">'*.js'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token variable">${JS_PATH_DIST}</span>game.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>js</code>文件命令为<code>zbase</code>是因为这个自己写的打包函数是按照字典序排,为了避免存在<code>先使用后定义的情况</code>—(z的字典序最小)</p><p>​</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><code>start()</code>:初始化属性</p><p><code>update()</code>:更新</p><p><code>destroy()</code>:删除</p><h3 id="菜单界面"><a href="#菜单界面" class="headerlink" title="菜单界面"></a>菜单界面</h3><h4 id="web-html"><a href="#web-html" class="headerlink" title="web.html"></a>web.html</h4><p>因为可能要支持多个平台所以在<code>game/templates/</code>下创建一个<code>multiPlatform</code>文件夹</p><p>创建一个<code>web.html</code>用来实现网页端,这里导入一个<code>jquery</code>的接口方法:之后的<code>show()</code>和<code>hide()</code>方法等.</p><p>这里有一个要注释的点就是<code>js</code>要在<code>css</code>之前导入;</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">{% load static  %}<span class="token comment">&lt;!--    js should be introduced before css---&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    &lt;link rel="stylesheet" href="{% static 'css/game.css' %}"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 0 </span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>                                                                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>game_000<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//引入改成全局变量</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Game<span class="token punctuation">}</span> <span class="token keyword">from</span>  <span class="token string">"{% 'js/dist/game.js' %}"</span>  <span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Create a Game <span class="token keyword">class</span><span class="token punctuation">,</span> the parameter is id<span class="token operator">--</span> <span class="token operator">&gt;</span>               <span class="token keyword">let</span> game<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token string">"game_000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>game/static/js/src/</code>目录下的<code>zbase.js</code>实现在<code>web.html</code>中申明的<code>Game</code>类.</p><h4 id="Game类"><a href="#Game类" class="headerlink" title="Game类"></a>Game类</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$game_id<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//In the Game class, there is a menu attribute corresponding to a GameMenu class, and the id of the Game class is passed in as a parameter</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//                           </span>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>       <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​在<code>Game</code>类中有一个<code>menu</code>的属性<code>GameMenu</code>类,然后就是在<code>game/static/js/src/menu/</code>目录下创建一个<code>zbase.js</code>文件写菜单界面也就是写一个<code>GameMenu</code>类</p><h4 id="GameMenu类"><a href="#GameMenu类" class="headerlink" title="GameMenu类"></a>GameMenu类</h4><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">GameMenu</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="game-menu"&gt;    &lt;div class="game-menu-field"&gt;        &lt;div class ="game-menu-field-item  game-menu-field-item-singleplayer"&gt;                    singleplayer        &lt;/div&gt;        &lt;br&gt;        &lt;div class ="game-menu-field-item game-menu-field-item-mutiplayer"&gt;        mutiplayer        &lt;/div&gt;        &lt;br&gt;        &lt;div class="game-menu-field-item game-menu-field-item-settings"&gt;        settings        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向Game类的id所在的位置(div="game_000")添加menu</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span>$game_id<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//通过find可以查找class的所在的模块:前面有个'.'</span>               <span class="token comment">//把singleplayer属性存储下来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$singleplayer<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".game-menu-field-item-singleplayer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把multiplayer属性存储下来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$multiplayer<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".game-menu-field-item-mutiplayer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把settings属性存储下来</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$settings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".game-menu-field-item-settings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//start()函数</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add_listening_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                          <span class="token punctuation">}</span>    <span class="token comment">//添加监听鼠标事件</span>    <span class="token function">add_listening_events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> outer<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$singleplayer<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"singleplayer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>$multiplayer<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"multiplayer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$settings<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//隐藏菜单界面</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Display menu interface</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示菜单界面</span>    <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Hide menu interface</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$menu<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是在<code>game/static/css/</code>目录下的<code>game.css</code>写菜单界面的css</p><h4 id="game-css"><a href="#game-css" class="headerlink" title="game.css"></a>game.css</h4><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.game-menu</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/static/image/menu/background.gif"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 100%<span class="token punctuation">;</span>    <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.game-menu-field</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> 7vh<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 30vh<span class="token punctuation">;</span>                                                                                <span class="token property">left</span><span class="token punctuation">:</span> 19vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.game-menu-field-item</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 7vh<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 40vh<span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> intalic<span class="token punctuation">;</span> <span class="token comment">/*font is italic*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 6vh<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 2vh<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>39<span class="token punctuation">,</span>21<span class="token punctuation">,</span>28<span class="token punctuation">,</span>0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0.5vh<span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.game-menu-field-item:hover</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建游戏界面"><a href="#3-创建游戏界面" class="headerlink" title="3.创建游戏界面"></a>3.创建游戏界面</h2><h3 id="完善js的导入"><a href="#完善js的导入" class="headerlink" title="完善js的导入"></a>完善js的导入</h3><p>在<code>static/css/game.css</code>中将<code>js</code>的传入指定为特定的文件,而不是所有的类</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>以<code>module</code>的形式导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span><span class="token operator">&gt;</span>        <span class="token keyword">import</span> <span class="token punctuation">{</span>Game<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"{% static 'js/dist/game.js' %}"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script <span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时在<code>Game</code>类要将他<code>export</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">{</span>     <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$game_id<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="游戏界面—GamePlayground类"><a href="#游戏界面—GamePlayground类" class="headerlink" title="游戏界面—GamePlayground类"></a>游戏界面—GamePlayground类</h3><p>在<code>GamePlayground</code>中添加<code>GameMap</code>和<code>Player</code>的对象</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">GamePlayground</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="game-playground"&gt;game playground&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span>$game_id<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gameMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>players<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.05</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$playground<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="游戏地图—GameMap类"><a href="#游戏地图—GameMap类" class="headerlink" title="游戏地图—GameMap类"></a>游戏地图—GameMap类</h3><p>简单实现了地图的框架,<code>css</code>中有一个<code>canvas</code>的API可以实现画布</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">GameMap</span> <span class="token keyword">extends</span> <span class="token class-name">GameObject</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">playground</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playground <span class="token operator">=</span> playground<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$canvas <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;canvas&gt; &lt;/canvas&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//语法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$canvas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用ctx存储</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>playground<span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>playground<span class="token punctuation">.</span>height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playground<span class="token punctuation">.</span>$playground<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//Render this background color</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"rgba(0,0,0,0.2)"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="玩家—Player类"><a href="#玩家—Player类" class="headerlink" title="玩家—Player类"></a>玩家—Player类</h3><p>简单实现了玩家的框架</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">GameObject</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">playground<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> color<span class="token punctuation">,</span> move_speed<span class="token punctuation">,</span> is_me</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playground<span class="token operator">=</span>playground<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>playground<span class="token punctuation">.</span>gameMap<span class="token punctuation">.</span>ctx<span class="token punctuation">;</span><span class="token comment">//Map canvas</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token comment">//Radius of the circle</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token comment">//player color</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>move_speed <span class="token operator">=</span> move_speed<span class="token punctuation">;</span><span class="token comment">//Player movement speed</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>is_me <span class="token operator">=</span> is_me<span class="token punctuation">;</span><span class="token comment">// Judge if it's yourself</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>eps <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span> <span class="token comment">//Radius judgment deviation</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//x increment</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vy<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//y increment</span>            <span class="token punctuation">}</span>    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>vx<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>vy<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Render the screen</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span> ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span> ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="技能—FireBall类"><a href="#技能—FireBall类" class="headerlink" title="技能—FireBall类"></a>技能—FireBall类</h3><p>实现的玩家技能,玩家能够发射炮弹</p><h3 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h3><ol><li>当玩家和玩家之间的距离小于两圆心之间的距离时,这时形成碰撞</li><li>当玩家的技能和其他玩家碰撞的时候,这时形成碰撞</li><li>当玩家到达地图边缘时,这时形成碰撞</li></ol><h4 id="需要实现的地方"><a href="#需要实现的地方" class="headerlink" title="需要实现的地方"></a>需要实现的地方</h4><ol><li>在<code>Player</code>类实现<code>is_attacked</code>函数,实现<code>碰撞时的粒子效果</code>和<code>碰撞时的短暂击退效果</code></li><li>在<code>Player</code>类实现<code>is_collision</code>函数,实现玩家和玩家的碰撞检测</li><li>在<code>FireBall</code>类实现<code>is_collision</code>函数,实现火球和玩家的碰撞检测<ol><li>在<code>FireBall</code>类实现<code>attack</code>函数,实现求火球碰撞玩家的角度以及火球的消亡,同时调用该玩家的<code>is_attacked</code>函数</li></ol></li></ol><h5 id="火球的is-collsion函数"><a href="#火球的is-collsion函数" class="headerlink" title="火球的is_collsion函数"></a>火球的is_collsion函数</h5><h5 id="火球的attack函数"><a href="#火球的attack函数" class="headerlink" title="火球的attack函数"></a>火球的attack函数</h5><h5 id="玩家的is-attacked函数"><a href="#玩家的is-attacked函数" class="headerlink" title="玩家的is_attacked函数"></a>玩家的is_attacked函数</h5><p>粒子效果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>短暂击退效果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">##### 玩家的is_collision函数## 4. 部署nginx与对接acapp## docker 命令##### 删除镜像</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>shelldocker rmi <span class="token punctuation">[</span><span class="token constant">IMAGE</span> <span class="token constant">ID</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>CONTAINER ID/CONTIANER NAME<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示已经运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> -a<span class="token comment"># 参数</span><span class="token comment"># -a 显示所有的容器（包括没有运行的容器）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="显示镜像"><a href="#显示镜像" class="headerlink" title="显示镜像"></a>显示镜像</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -p <span class="token number">20000</span>:22 -p <span class="token number">8000</span>:8000 -p <span class="token number">80</span>:80 -p <span class="token number">443</span>:443 --name CONTAINER_NAME -itd django_lesson:1.1<span class="token comment">#参数</span><span class="token comment"># -p 指定运行容器开放的端口</span><span class="token comment"># -name 指定容器的名字</span><span class="token comment"># -itd 指定容器对应的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="保存和下载镜像"><a href="#保存和下载镜像" class="headerlink" title="保存和下载镜像"></a>保存和下载镜像</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#1.export/import :会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</span><span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token function">docker</span> <span class="token function">import</span> <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token comment">#2.save/load会保存完整记录，体积更大</span><span class="token function">docker</span> save <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span class="token function">docker</span> load <span class="token punctuation">[</span>NAME<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="django命令"><a href="#django命令" class="headerlink" title="django命令"></a>django命令</h2><h5 id="运行调试端口：8000"><a href="#运行调试端口：8000" class="headerlink" title="运行调试端口：8000"></a>运行调试端口：8000</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 manage<span class="token punctuation">.</span>py runserver <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token punctuation">:</span><span class="token number">8000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><blockquote><p>Jquery的类显示没有定义</p></blockquote><p>解决问题:在导入Jquery的时候应该js在css之前导入</p><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><blockquote><p>Django的函数修改了但是在网页按12查看并没有同步更改</p></blockquote><p>解决问题:清理一下浏览器的缓存</p><h4 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h4><blockquote><p>设置没有生效</p></blockquote><p>问题所在:很多关键词拼错了,并且在终端也没有提示,所以就很难去找</p><h4 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h4><blockquote><p>创建了空的文件夹上传git发现并没有</p></blockquote><p>解决问题:git不会上传空的文件夹,只有当文件夹里面有文件时才会上传</p><h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><blockquote><p>在打包的时候父类会跑到继承类之前去导致错误</p></blockquote><p>解决问题:将父类的文件夹前面加个’a’,然后文件夹会按照字典序来排序</p><h4 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h4><blockquote><p>GameMap的update函数是如何被一直调用的</p></blockquote><h4 id="问题7"><a href="#问题7" class="headerlink" title="问题7"></a>问题7</h4><blockquote><p>移动的模糊产生?</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> acwing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/03/ji-suan-ji-yu-yan-lei/java-main/cheng-xu-she-ji-mo-shi/"/>
      <url>/2021/12/03/ji-suan-ji-yu-yan-lei/java-main/cheng-xu-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h2><ul><li>大话设计模式</li></ul><h2 id="1-singleton"><a href="#1-singleton" class="headerlink" title="1.singleton"></a>1.singleton</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>优点</p></blockquote><ol><li>提前加载对象</li><li><blockquote><p>缺点</p></blockquote></li></ol><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><blockquote><p>优点<br>​延迟建立对象</p></blockquote><blockquote><p>缺点</p></blockquote><p>容易造成多线程的不安全</p><h4 id="懒汉式创建方法"><a href="#懒汉式创建方法" class="headerlink" title="懒汉式创建方法"></a>懒汉式创建方法</h4><h5 id="普通懒汉式代码实现"><a href="#普通懒汉式代码实现" class="headerlink" title="普通懒汉式代码实现"></a>普通懒汉式代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多线程安全懒汉式代码实现"><a href="#多线程安全懒汉式代码实现" class="headerlink" title="多线程安全懒汉式代码实现"></a>多线程安全懒汉式代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多重背包问题II</title>
      <link href="/2021/11/02/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/duo-chong-bei-bao-wen-ti-ii/"/>
      <url>/2021/11/02/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/duo-chong-bei-bao-wen-ti-ii/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>题目</code><br>有 N 种物品和一个容量是 V 的背包。<br>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p></blockquote><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$0&lt;N≤1000$<br>$0&lt;V≤2000$<br>$0&lt;v_i,w_i,s_i≤2000$</p><blockquote><p>因为时间复杂度很大,所以不能采用多重背包问题I中的三次for循环的暴力做法</p></blockquote><blockquote><p><code>时间优化思路</code><br>采用二进制优化<br><code>多重背包</code>可以被拆分成多份转换成求<code>01背包问题</code><br>对于一个一个的拆分时间复杂度太高,可以借助<code>2</code>的幂次<br>对于<code>7</code>而言可以拆分成<br><code>1,2,4</code>:可以组合出任意7里面的数(1,2,3···,7)<br>对于10而言拆分成<br><code>1,2,4,8</code>:由于再多一个8那么就会存在组合出10以上的数<br>所以对于多出来的部分就直接插入差值即<br>对于10而言拆分成<br><code>1,2,4,3</code><br>而不是<br><code>1,2,4,8</code></p></blockquote><h5 id="对于物品的数量v可以被拆分成log-v-份"><a href="#对于物品的数量v可以被拆分成log-v-份" class="headerlink" title="对于物品的数量v可以被拆分成log(v)份"></a>对于物品的数量<code>v</code>可以被拆分成<code>log(v)</code>份</h5><h5 id="所以时间复杂度变成了"><a href="#所以时间复杂度变成了" class="headerlink" title="所以时间复杂度变成了"></a>所以时间复杂度变成了</h5><p>$O(n\cdot s\cdot log(v) )$</p><p><code>二进制优化多重背包问题代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-11-02 00:38:28 * @LastEditTime: 2021-11-02 00:41:06 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">2200</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">22000</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> vs<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> vs <span class="token operator">&gt;&gt;</span> ws <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//拆分多重背包</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">*</span> vs<span class="token punctuation">;</span>            w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">*</span> ws<span class="token punctuation">;</span>            s <span class="token operator">-=</span> k<span class="token punctuation">;</span>            k <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> s <span class="token operator">*</span> vs<span class="token punctuation">;</span>        w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> s <span class="token operator">*</span> ws<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 模版 </tag>
            
            <tag> 多重背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多重背包问题I</title>
      <link href="/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/duo-chong-bei-bao-wen-ti-i/"/>
      <url>/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/duo-chong-bei-bao-wen-ti-i/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目<br> N 种物品和一个容量是 V 的背包。<br>第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p></blockquote><p><code>模式</code></p><blockquote><p><code>状态表示</code><br><code>f[i][j]</code>表示前i个物品,背包容量为j的最大价值<br><code>状态转移</code></p><ol><li>第<code>i</code>个物品选择<code>0</code>个</li><li>第<code>i</code>个物品选择<code>1</code>个<br>···</li><li>第<code>i</code>个物品选择<code>s[i]</code>个</li></ol><p>状态转移方程:<code>f[i][j]=Max(f[i-1][j-k*v[i]]+k*w[i])</code> $k\in [0,1,···,s[i]] $</p><p><code>状态属性</code><br>  Max</p></blockquote><p><code>数据范围</code><br>$0&lt;N,V≤100$<br>$0&lt;v_i,w_i,s_i≤100$</p><h4 id="参考数据范围很小所有可以采用三重for循环"><a href="#参考数据范围很小所有可以采用三重for循环" class="headerlink" title="参考数据范围很小所有可以采用三重for循环"></a>参考数据范围很小所有可以采用三重for循环</h4><p><code>时间复杂度</code><br>$O(nmk)$<br><code>多重背包暴力代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-11-01 23:33:33 * @LastEditTime: 2021-11-01 23:48:32 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1050</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">w</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//dp</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">/</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>空间优化思路</code><br>类似于01背包的优化<br>当前层<code>i</code>的信息<code>f[i][j]</code>是由上一层<code>i-1</code>的信息<code>f[i-1][j-v]</code>转移过来<br>去掉<code>i</code>进行等效替代用滚动数组<br>所以我们可以把<code>j</code>从<code>m</code>到<code>v[i]</code>进行枚举,确保<code>j-v[i]</code>是上一层的信息</p></blockquote><p><code>空间优化后代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//dp</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">/</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>经过空间优化后多重背包问题I代码如下</p></blockquote><p><code>代码</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-11-01 23:33:33 * @LastEditTime: 2021-11-02 00:07:40 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1050</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">w</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//dp</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">/</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 模版 </tag>
            
            <tag> 多重背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全背包问题</title>
      <link href="/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/wan-quan-bei-bao-wen-ti/"/>
      <url>/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/wan-quan-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p><code>题目</code></p><blockquote><p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。<br>第 i 种物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p></blockquote><p><code>模式</code></p><blockquote><p><code>状态表示</code><br><code>f[i][j]</code>表示前i个物品,背包容量为j的最大价值<br><code>状态转移</code></p><ol><li>第<code>i</code>个物品选择<code>0</code>个</li><li>第<code>i</code>个物品选择<code>1</code>个<br>···</li><li>第<code>i</code>个物品选择<code>k</code>个</li></ol><p>状态转移方程:<code>f[i][j]=Max(f[i-1][j-k*v[i]]+k*w[i])</code> $k\in [0,1,2,3···k] $</p><p><code>状态属性</code><br>  Max</p></blockquote><p><code>时间复杂度</code><br>$O(nvk)$<br><code>暴力完全背包代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">w</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//dp</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//不用判断j&gt;=v[i],因为k*v[i]&lt;=j已经判断过了</span>            <span class="token comment">//包括f[i][j]=f[i-1][j]包含在k=0的情况之中</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k <span class="token operator">*</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> k <span class="token operator">*</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>时间复杂度优化思路</code><br><code>f[i][j]=Max(f[i-1][j],f[i-1][j-v]+w,f[i-1][j-2v]+2w,f[i-1][j-3v]+3w····f[i-1][j-kv]+kw)</code><br>上述第二项开始对应下述第一项<br><code>f[i][j-v]=Max(f[i-1][j-v],f[i-1][j-2v]+w,f[i-1][j-3v]+2w····,f[i-1][j-kv]+(k-1)w)</code><br>很显然的等价替换发现<br><code>f[i][j]=Max(f[i-1][j],f[i][j-v]+w)</code><br>所以有了这一层关系,那么我们就不需要去循环<code>k</code>次<br>于是就可以优化了时间复杂度</p></blockquote><p><code>时间复杂度</code><br>$O(nv)$</p><p><code>时间优化后代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token comment">//dp</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>空间复杂度优化思路</code><br>同01背包优化的思路<br>我们同样本层的信息<code>f[i][j]</code>由本层的信息<code>f[i][j]</code>和本层的<code>f[i][j-v[i]</code>转移过来<br>参考01背包的<br><code>f[i][j]=max(f[i][j],f[i-1][j-v[i]]+w[i]</code><br>完全背包<br><code>f[i][j]=max(f[i][j],f[i][j-v[i]]+w[i])</code><br>可以很明显的发现只有后面有一处是不同<br>类似01背包的优化<br>与01背包的不同的是</p><ol><li>01背包优化的<code>j</code>从<code>m</code>枚举到<code>v[i]</code></li><li>完全背包优化的<code>j</code>从<code>v[i]</code>枚举到<code>m</code>;</li></ol><p>因为01背包的状态是本层<code>i</code>是由上一层<code>i-1</code>转移过来的,而完全背包是本层<code>i</code>是由本层<code>i</code>转移过来.所以<code>j</code>从小到大枚举,确保<code>j-v[i]</code>是被本层修改后的信息</p></blockquote><p><code>空间优化后代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//dp</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//与01背包不同的是从v[i]枚举到m</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>经过时间和空间优化后的完全背包</p></blockquote><p><code>代码如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">w</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 模版 </tag>
            
            <tag> 完全背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包</title>
      <link href="/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/01-bei-bao-wen-ti/"/>
      <url>/2021/11/01/summary/acwing/suan-fa-ji-chu/dong-tai-gui-hua/01-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。<br>第 i 件物品的体积是 vi，价值是 wi。<br>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p></blockquote><p><code>模式</code></p><ol><li>状态的定义</li><li>状态的划分(集合的角度)</li><li>状态的属性</li></ol><p><code>朴素01背包思路</code></p><blockquote><h5 id="状态定义"><a href="#状态定义" class="headerlink" title="状态定义"></a>状态定义</h5><p>$f[i][j]$定义:前i个物品,背包容量为j的最大价值</p><h5 id="状态划分"><a href="#状态划分" class="headerlink" title="状态划分"></a>状态划分</h5><p>(一)当前背包容量不够(<code>j&lt;v[i]</code>),没有选择的余地</p><ol><li>那么前<code>i</code>个物品的最大价值就是前<code>i-1</code>个物品的最大价值<br><code>f[i][j]=f[i-1][j]</code></li></ol><p>(二)当前的背包容量可以选(<code>j&gt;=v[i]</code>)<br>也就意味着保证你选上<code>v[i]</code>后总体积仍然小于等于总体积<code>j</code>(<code>j-v[i]</code>)<br>那么就存在选和不选两种情况</p><ol><li>选:<code>f[i][j]=f[i-1][j-v[i]]+w[i]</code></li><li>不选:<code>f[i][j]=f[i-1][j]</code></li></ol><h5 id="状态属性"><a href="#状态属性" class="headerlink" title="状态属性"></a>状态属性</h5><p>MAX<br>最终当前情况的最大价值就由上述两种情况取MAX得到.</p></blockquote><p><code>朴素01背包代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-11-01 00:58:13 * @LastEditTime: 2021-11-01 13:29:11 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1500</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>对空间上进行优化</code><br>优化为一维数组用滚动数组<br>每次更新当前层<code>f[i][j]</code>的信息只需要由上一层<code>f[i-1][j-v[i]]</code>的信息转移过来<br>所以可以去掉<code>i</code>,把<code>j</code>从大到小进行循环<br>此时我们更新需要用到<code>[j-v[i]]</code>来更新当前<code>j</code>的信息<br>又因为我们是从大到小枚举的<code>j</code>所以<code>[j-v[i]]</code>对应的必然是上一层的信息</p></blockquote><p><code>滚动数组01背包代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 01背包 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆元</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/ni-yuan/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/ni-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><blockquote><p>乘法逆元的定义<br>若整数 <code>b</code>，<code>q</code> 互质，并且对于任意的整数 <code>a</code>，如果满足 <code>b|a</code>等价于<code>a</code>是<code>b</code>的倍数,则存在一个整数 <code>x</code>，使得 <code>a/b≡a·x(mod q)</code>，则称 <code>x</code> 为 <code>b</code> 的模 <code>m</code> 乘法逆元，记为 $b^{-1}$(mod m)。<br>b 存在乘法逆元的充要条件是 <code>b</code> 与模数 <code>q</code> 互质。当模数 <code>q</code> 为质数时，$b^{q−2}$ 即为 <code>b</code> 的乘法逆元。<br><code>推导过程</code><br>设 $\cfrac{a}{b}\equiv a\cdot x(mod\quad  q)$<br>两边同时乘b得<br>$a\equiv a\cdot b\cdot x(mod\quad q)$<br>即<br>$1\equiv b\cdot x(mod\quad q)$<br>等价于<br>$b\cdot x\equiv 1(mod\quad q)$<br>由<a href="https://zver-plena.github.io/2021/10/29/ckvex8yzm0000m0yz0cpq77c4/">费马小定理</a>得:   $b^{q-1}\equiv 1(mod\quad q)$<br>等价于<br>$b\cdot b^{q-2}\equiv 1(mod\quad q)$<br>所以<br>$x=b^{p-2}$<br>即 $b%q$ 的乘法逆元 $x=b^{p-2}$<br>$x=b^{p-2}$<br>证毕</p></blockquote><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>求 a%p 的乘法逆元.</p></blockquote><p><code>求逆元代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>q<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果a和p不互质,那么不存在逆元</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">qmi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分图的最大匹配</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/er-fen-tu-de-zui-da-pi-pei/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/er-fen-tu-de-zui-da-pi-pei/</url>
      
        <content type="html"><![CDATA[<h3 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a>二分图的最大匹配</h3><p><code>二分图的匹配的定义</code></p><blockquote><p>给定一个二分图 G，在 G 的一个子图 M 中，M 的边集 {E} 中的任意两条边都不依附于同一个顶点，则称 M 是一个匹配。</p></blockquote><p><code>二分图的最大匹配的定义</code></p><blockquote><p>所有匹配中包含边数最多的一组匹配被称为二分图的最大匹配，其边数即为最大匹配数。</p></blockquote><p><code>思路</code></p><blockquote><p>可以任取二分图中的任意边,对其中所有的点进行出边的遍历.</p></blockquote><p><code>假设</code> </p><blockquote><p>x -&gt; b<br>x -&gt; c<br>a -&gt; b</p><ol><li>如果说<code>b</code>没有匹配,那么就让<code>a</code>与<code>b</code>进行匹配.</li><li>如果说<code>b</code>已经匹配,那么就去找和<code>b</code>匹配的数<code>x</code>有没有其他的下家可以转换,使得<code>x</code>存在其他匹配的数腾出<code>b</code>使得<code>a</code>和<code>b</code>得以匹配.</li></ol></blockquote><p><code>代码实现如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-10-31 18:54:28 * @LastEditTime: 2021-10-31 21:15:15 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> girl<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//当前j未被匹配或者说匹配j的那个y可以找到下家,那么当前数x和j匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>girl<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">find</span><span class="token punctuation">(</span>girl<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 girl<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n1 <span class="token operator">&gt;&gt;</span> n2 <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kruskal</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/kruskal/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/kruskal/</url>
      
        <content type="html"><![CDATA[<h4 id="2-Kruskal"><a href="#2-Kruskal" class="headerlink" title="2.Kruskal"></a>2.Kruskal</h4><p><code>思路</code></p><blockquote><p>略带贪心<br>对边的权值进行排序,按边权从小到大合并每两个点,直到所有的点连通</p></blockquote><p><code>不合法条件</code></p><blockquote><p>如果存在<code>n</code>个点,最终所连接的边的数量&lt;<code>n-1</code>说明不能够连接所有的点连通.<br>因为当连接的边数为<code>n-1</code>时的最少点数量为<code>n</code></p></blockquote><p><code>时间复杂度</code><br>$O(MlogM)$<br><code>Kruskal实现代码</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>edge<span class="token punctuation">,</span>edge<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//初始化并查集</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>w<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         a<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>         b<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>         w<span class="token operator">=</span>edge<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>            sum<span class="token operator">+=</span>w<span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"impossible"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prim</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/prim/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/prim/</url>
      
        <content type="html"><![CDATA[<h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p><code>思路</code></p><blockquote><p>同<code>dijk</code>的写法和思路大致相同,区别在与<code>Prim</code>求的是到集合的最短距离,而<code>dijk</code>求的是到起始点的最短距离.<br><code>dis[n]</code>表示的是<code>n</code>到<code>集合</code>的距离;<br>容易知道可以从任意一个点出发,存在唯一解,且第一次寻找是特殊的;<br>任意从一个点出发加入到集合之中,遍历他的所有出边且更新到集合的最小距离<code>dis[n]</code>,然后找出距离集合最近的点加入集合之中同时作为下一个扩展点继续扩展.<br>如果集合中至少有两个点且存在离集合最近的点的距离<code>dis[x]</code>等于正无穷大,说明不能扩展到这个点,那么就无法构造出最小生成树.</p></blockquote><p><code>时间复杂度</code><br>$O(nm)$<br><code>Prim代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//采用邻接矩阵,初始化为0x3f</span><span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            ans <span class="token operator">+=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//与dijk不同的地方是</span>        <span class="token comment">//Prim是一个点到集合的最短距离</span>        <span class="token comment">//而dijk是一个点到起始点的最小值,能否通过 t 缩小</span>        <span class="token comment">//dijk: dis[j]=min(dis[j],dis[t]+g[t][j]);</span>        <span class="token comment">//Prim: dis[j]=min(dis[j],g[t][j]);</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/floyd/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/floyd/</url>
      
        <content type="html"><![CDATA[<h3 id="多源最短路"><a href="#多源最短路" class="headerlink" title="多源最短路"></a>多源最短路</h3><h4 id="1-Floyd"><a href="#1-Floyd" class="headerlink" title="1.Floyd"></a>1.Floyd</h4><p><code>思路</code></p><blockquote><p>对于任意两个点之间的距离<code>i</code>和<code>j</code>能否通过第三方点<code>k</code>来松弛</p></blockquote><p><code>时间复杂度</code><br>$O(n^3)$</p><p><code>Floyd代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0x3f3f3f</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"impossible"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spfa</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/spfa/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/spfa/</url>
      
        <content type="html"><![CDATA[<h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><p>思路</p><blockquote><p>对Bellan算法的优化<br><code>dis[n]</code>表示的是<code>起点</code>到<code>n</code>的最短距离<br>对于一条边a-&gt;b<br>如果对于点<code>a</code>可以优化<code>dis[b]</code>的距离,那么<code>a</code>就可能优化<code>1</code>到<code>a的所有出边</code>的距离.<br>所以对于可以优化<code>dis[b]</code>距离的点<code>a</code>,就让他入队去缩短<code>1</code>到<code>a的出边</code>的距离,并且标记队列中已经存在这个点.</p></blockquote><p>支持负权边</p><blockquote><p>判断负权边<br>创造一个cnt数组,存储的对每个可以松弛的点的次数.<br>如果可以存在松弛的边&gt;=<code>n</code>个点,那么必定存在一个环且这个环的权值为负值<br>因为如果存在<code>n</code>条边那么至少会有<code>n+1</code>个点.</p></blockquote><p><code>时间复杂度</code><br>$一般O(m),最坏O(nm)$<br><code>spfa代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> w<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bellman-Ford算法模版</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/bellman-ford/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/tu-lun/bellman-ford/</url>
      
        <content type="html"><![CDATA[<h3 id="Bellman-fork"><a href="#Bellman-fork" class="headerlink" title="Bellman-fork"></a>Bellman-fork</h3><p><code>思路</code></p><blockquote><p>在有限制的操作次数内,对所有的边尝试能否通过其余边来松弛<code>1</code>到<code>n</code>的最短距离</p></blockquote><p><code>关于dis[n]的判断</code></p><blockquote><p>Bellman_ford算法里最后的判断条件写的<code>dist[n]&gt;0x3f3f3f3f/2;</code><br>其原因在于Bellman_ford算法会遍历所有的边，因此不管是不是和源点连通的边它都会得到更新.</p></blockquote><p><code>支持负权边</code></p><blockquote><p>判断负环<br>如果 n 次松弛之后再执行一次还能松弛,说明存在负权边.</p></blockquote><p><code>时间复杂度</code><br>$O(nm)$</p><p><code>Bellman-ford代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span><span class="token punctuation">}</span> edge<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>back<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Bellan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//确保每次转移的 dis 是上一次的dis的值,而不是这一次可能已经被修改的 dis 值</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>back<span class="token punctuation">,</span> dis<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历 m 条边</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">,</span> w <span class="token operator">=</span> edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>            dis<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> back<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/chai-fen/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/chai-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="1-一维差分"><a href="#1-一维差分" class="headerlink" title="1. 一维差分"></a>1. 一维差分</h3><p>对一个数组<br>$a[1],a[2]···a[n]$<br>对应的差分值为<br>$b[1],b[2]···b[n]$<br>差分值的计算为<br>$b[i]=a[i]-a[i-1]$<br>可易得<br>$a[i]=a[i-1]+b[i]$<br>所以我们可以对于区间操作标记在<code>b数组</code>中<br>最后统一对<code>a数组</code>进行操作</p><p>对差分数组<code>b[n]</code>求前缀和<code>sum[1,i]</code>算得是<code>a[i]</code></p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>输入一个长度为 n 的整数序列。<br>接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-10-31 18:54:28 * @LastEditTime: 2021-10-31 19:10:38 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> num<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">;</span>        b<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二维差分"><a href="#2-二维差分" class="headerlink" title="2.二维差分"></a>2.二维差分</h3><p>二维差分求和</p><p>由一维差分的性质可得<br>对差分数组<code>b[n]</code>求前缀和<code>sum[1,i]</code>算得是<code>a[i]</code><br>所以对于二维差分数组<code>g[i][j]</code>求前缀和,得到的是<code>a[i][j]</code></p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>输入一个 n 行 m 列的整数矩阵，再输入 q 个操作，每个操作包含五个整数 x1,y1,x2,y2,c，其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。<br>每个操作都要将选中的子矩阵中的每个元素的值加上 c。<br>请你将进行完所有操作后的矩阵输出。</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token comment">//构造二维差分数组</span><span class="token punctuation">{</span>    g<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">;</span>    g<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> num<span class="token punctuation">;</span>    g<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">-=</span> num<span class="token punctuation">;</span>    g<span class="token punctuation">[</span>x2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">init</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         cin <span class="token operator">&gt;&gt;</span> x1 <span class="token operator">&gt;&gt;</span> y1 <span class="token operator">&gt;&gt;</span> x2 <span class="token operator">&gt;&gt;</span> y2 <span class="token operator">&gt;&gt;</span> num<span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//求前缀和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 差分 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/er-fen/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/er-fen/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目的具有单调的性质,那么就可以考虑用二分来搜索或者枚举答案<br>一般来说二分的模式有以下三种.</p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><h4 id="1-求出小于等于-num-的最大的数"><a href="#1-求出小于等于-num-的最大的数" class="headerlink" title="1.求出小于等于 num 的最大的数"></a>1.求出小于等于 num 的最大的数</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span>               l <span class="token operator">=</span> mid<span class="token punctuation">;</span>           <span class="token keyword">else</span>               r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-求出大于等于-num-的最小的数"><a href="#2-求出大于等于-num-的最小的数" class="headerlink" title="2.求出大于等于 num 的最小的数"></a>2.求出大于等于 num 的最小的数</h4><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> num<span class="token punctuation">)</span>               r <span class="token operator">=</span> mid<span class="token punctuation">;</span>           <span class="token keyword">else</span>               l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>其中<code>eps</code>为精度,一般为$1e^{-6}$以下</p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>           l <span class="token operator">=</span> mid<span class="token punctuation">;</span>       <span class="token keyword">else</span>           r <span class="token operator">=</span> mid<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 二分 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度减法</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-jian-fa/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/gao-jing-du-jian-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sub</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//默认a的长度大于b的长度</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t <span class="token operator">-=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//去除前导0        </span>    c<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 高精度减法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/pai-xu/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/pai-xu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-快排排序"><a href="#1-快排排序" class="headerlink" title="1.快排排序"></a>1.快排排序</h4><p><code>思路</code><br>先排序后递归,确保递归后的右区间的每个数都大于左区间的每个数,<br><code>平均时间复杂度</code><br>$O(nlogn)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2.归并排序"></a>2.归并排序</h4><p>先递归后排序<br><code>平均时间复杂度</code><br>$O(nlogn)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数</title>
      <link href="/2021/10/31/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zu-he-shu/zu-he-shu/"/>
      <url>/2021/10/31/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zu-he-shu/zu-he-shu/</url>
      
        <content type="html"><![CDATA[<p>组合计数问题根据题目的数据范围来选择用哪一种求法</p><h2 id="1-组合数I"><a href="#1-组合数I" class="headerlink" title="1.组合数I"></a>1.组合数I</h2><p>$C_a^b$</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>$1\le b \le a \le 2000$</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(a^2)$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a><strong>递推式</strong></h4><p>$$<br>C_a^b=C_{a-1}^{b-1}+C_{a-1}^{b}<br>$$</p><blockquote><p>解释</p><blockquote><p>$C_a^b$:等价于在从<code>a</code>个物品中选出<code>b</code>个物品的方案数<br>从<code>a</code>个物品中选出<code>b</code>个物品方案数的情况有以下两种</p><ol><li>如果此时我选择了一个物品,剩下只需要从<code>a-1</code>个总物品中选出<code>b-1</code>个物品</li><li>如果此时我没有选择物品,剩下就需要从<code>a-1</code>个种物品中选出<code>b</code>个物品<br>由此就能得到上述等价的递推式</li></ol></blockquote></blockquote><h3 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h3><p>$C_a^{0}=1$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//规定等于 1</span>            <span class="token keyword">else</span>                g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-组合数II"><a href="#2-组合数II" class="headerlink" title="2.组合数II"></a>2.组合数II</h2><p>$C_a^b$</p><h3 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h3><p>$1\le b \le a \le10^{5}$<br>$p=10^9$</p><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$O(a\cdot log(p))$</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>根据逆元进行优化<br>不清楚逆元可以参考-&gt;<a href="https://zver-plena.github.io/2021/10/23/ckv6t8uc7000y7aywdmz06hhv/">逆元</a><br>由基本定义得如下公式<br>$$C_a^b=\cfrac{a\cdot (a-1)\cdot ···\cdot (a-b+1) }{b\cdot (b-1)\cdot (b-2)···\cdot 1}$$<br>等价于<br>$$C_a^b=\cfrac{a!}{b!\cdot (a-b)!}$$<br>由逆元可得等价于<br>$$C_a^b=\cfrac{a!}{b!\cdot (a-b)!}\equiv a!\cdot x(\mod p)$$<br>由逆元公式可知<br>$$x是(b!\cdot (a-b)!)的逆元$$</p><p>且</p><p>$$x=(b!\cdot (a-b)!)^{p-2}$$<br>等价于<br>$$x=(b!)^{p-2}\cdot ((a-b)!)^{p-2}$$<br>所有我们只需要用两个数组</p><ol><li>一个数组<code>fact[i]</code>用来存$i!$</li><li>一个数组<code>infact[i]</code>用来存 $(i!)^{p-2}$</li></ol><p>由此可以得出<br>$$C_a^b=fact[a]\cdot infact[b] \cdot infact[a-b]$$</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-10-29 21:41:29 * @LastEditTime: 2021-10-31 15:05:30 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//预处理infact和fact.</span><span class="token punctuation">{</span>    fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">qm</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">*</span> infact<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">*</span> infact<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">%</span> mod <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-组合数III"><a href="#3-组合数III" class="headerlink" title="3.组合数III"></a>3.组合数III</h2><p>$C_a^b$</p><h3 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h3><p>$1\le b\le a\le 10^{18}$<br>$1\le p\le 10^{5}$</p><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>$o(p∗logp^a∗logp)$</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><h4 id="Lucas定理结论"><a href="#Lucas定理结论" class="headerlink" title="Lucas定理结论"></a>Lucas定理结论</h4><p>$$C_a^b\equiv C_{a/p}^{b/p}\cdot C_{a\mod p}^{b\mod p}(\mod p)$$</p><blockquote><p>分析</p><blockquote><p>通过Lucas定理就可以递归缩小数据范围来计算$C_a^b$<br>递归到(a&lt;p&amp;&amp;b&lt;p)则可以通过基本公式定义直接计算$C_a^b$</p></blockquote></blockquote><p>基本公式计算$C_a^b$<br>$$<br>C_a^b=\cfrac{a\cdot (a-1)\cdot ···\cdot (a-b+1) }{b\cdot (b-1)\cdot (b-2)···\cdot 1}<br>$$<br>同时可以对除法处理,即变成逆元相乘(逆元转换需要满足b和q互质)<br>$$\cfrac{a}{b}\equiv a\cdot x(\mod q)$$<br>由$$x=b^{p-2}$$<br>等价于<br>$$\cfrac{a}{b}=a\cdot b^{p-2}$$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//加速逆元计算</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token comment">// LL</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token comment">// LL</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//基本公式计算</span><span class="token punctuation">{</span>    LL res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> j <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token comment">// LL</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res <span class="token operator">*</span> <span class="token function">qmi</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token comment">// LL</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lucas</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span><span class="token comment">//通过lucas定理缩小数据范围</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> p<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span><span class="token function">lucas</span><span class="token punctuation">(</span>a <span class="token operator">%</span> p<span class="token punctuation">,</span> b <span class="token operator">%</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a <span class="token operator">/</span> p<span class="token punctuation">,</span> b <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LL a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">lucas</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 组合计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/2021/10/29/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/string/"/>
      <url>/2021/10/29/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/string/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串和整数的转换"><a href="#字符串和整数的转换" class="headerlink" title="字符串和整数的转换"></a>字符串和整数的转换</h3><h4 id="1-字符串转整数"><a href="#1-字符串转整数" class="headerlink" title="1.字符串转整数"></a>1.字符串转整数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> number<span class="token operator">=</span><span class="token function">stoi</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token keyword">long</span> <span class="token keyword">long</span> number<span class="token operator">=</span><span class="token function">stoll</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> number<span class="token operator">=</span><span class="token function">stof</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-整数转字符串"><a href="#2-整数转字符串" class="headerlink" title="2.整数转字符串"></a>2.整数转字符串</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str <span class="token operator">=</span><span class="token function">to_String</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费马定理</title>
      <link href="/2021/10/29/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/fei-ma-xiao-ding-li/"/>
      <url>/2021/10/29/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/fei-ma-xiao-ding-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-费马小定理"><a href="#1-费马小定理" class="headerlink" title="1.费马小定理"></a>1.费马小定理</h4><p>FLT(Fermat’s Little Theorem)<br><code>内容</code><br>检验一个数是否为素数的必要非充分条件<br><code>结论</code><br>如果<code>p</code>是一个素数,而整数<code>a</code>不是<code>p</code>的倍数,那么则必有<br>$$ a^{p-1}mod\quad p=1$$<br>等价于<br>$$a^{p-1} = 1(mod\quad p)$$</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 费马定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathjax</title>
      <link href="/2021/10/25/za-pian/mathjax-gong-shi/"/>
      <url>/2021/10/25/za-pian/mathjax-gong-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><p><a href="https://www.jianshu.com/p/ac166eace672">逻辑，比较，包含，积分，极限</a></p><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p><a href="https://blog.csdn.net/liyuanbhu/article/details/51474290">希腊字母表</a></p><table><thead><tr><th align="center">latex</th><th align="center">显示效果</th><th align="center">latex</th><th align="center">显示效果</th></tr></thead><tbody><tr><td align="center">\alpha</td><td align="center">α</td><td align="center">\phi</td><td align="center">ϕ</td></tr><tr><td align="center">\beta</td><td align="center">β</td><td align="center">\omega</td><td align="center">ω</td></tr><tr><td align="center">\gamma</td><td align="center">γ</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\delta</td><td align="center">δ</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\epsilon</td><td align="center">ε</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\theta</td><td align="center">θ</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\lambda</td><td align="center">λ</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\pi</td><td align="center">π</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">\sigma</td><td align="center">σ</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="普通运算符"><a href="#普通运算符" class="headerlink" title="普通运算符"></a>普通运算符</h2><ol><li><p>加法运算<code>$a+b$</code>-&gt; $a+b$</p></li><li><p>减法运算<code>$a-b$</code>-&gt; $a-b$</p></li><li><p>加减运算<code>$a\pm b$</code>-&gt; $a\pm b$</p></li><li><p>乘法运算<code>$a\times b$</code>-&gt; $a\times b$</p></li><li><p>星乘运算<code>$a\ast b$</code>-&gt; $a\ast b$</p></li><li><p>点乘运算<code>$a\cdot b$</code>-&gt; $a\cdot b$</p></li><li><p>除法运算<code>$a\div b$</code>-&gt; $a\div b$</p></li><li><p>斜线除法<code>$a/b$</code>-&gt; $a/b$</p></li><li><p>分式表示<code>$\frac{a+b}{c+d}$</code>-&gt; $\frac{a+b}{c+d}$</p></li><li><p>绝对值<code>$\lvert x \rvert$</code>-&gt; $\lvert x \rvert$</p><h2 id="进阶运算符"><a href="#进阶运算符" class="headerlink" title="进阶运算符"></a>进阶运算符</h2></li><li><p>求导小点<code>\prime</code>-&gt;$A\prime$</p></li><li><p>开方<code>$\sqrt {a+b}$</code>-&gt; $\sqrt {a+b}$</p></li><li><p>求和<code>$\sum^{1\to i}_{1\to j}{a_i+b_j}$</code>-&gt; $\sum^{1\to i}_{1\to j}{a_i+b_j}$</p></li><li><p>求和<code>$\displaystyle\sum^{1\to n}_{i=1}{x_i+y_i}$</code>-&gt; $\displaystyle\sum^{1\to n}_{i=1}{x_i+y_i}$</p></li><li><p>log<code>$log_2(x)$</code>-&gt; $log_2(x)$</p></li><li><p>极限<code>$\lim^{x\to \infty}_{y\to 0}{\frac{x}{y}}$</code>-&gt; $\lim^{x\to \infty}_{y\to 0}{\frac{x}{y}}$</p></li><li><p>平均数<code>$\overline{xyz}$</code>-&gt; $\overline{xyz}$</p></li><li><p>矩阵</p></li><li></li></ol><p>pmatrix：小括号边框<br>bmatrix：中括号边框<br>Bmatrix：大括号边框<br>vmatrix：单竖线边框<br>Vmatrix：双竖线边框</p><pre class="line-numbers language-none"><code class="language-none">\begin{matrix}  1&amp;2&amp;3\\  25&amp; -1&amp;20\\  2&amp;5&amp;2\\\end{matrix}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{bmatrix}<br>    1 &amp; 2 &amp; 3\<br>    25 &amp; -1 &amp; 20 \<br>    2 &amp; 5 &amp; 3 \<br>\end{bmatrix}<br>$$</p><p>在中间省略一些项用<br>\cdots(水平)<br>\vdots(竖直)<br>\ddots(正对角线)</p><pre class="line-numbers language-none"><code class="language-none">\begin{matrix}    1&amp;\cdots&amp;3\\    \vdots&amp;\ddots&amp;5\\    2&amp;5&amp;6\\\end{matrix}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{matrix}<br>    1&amp;\cdots&amp;3\<br>    \vdots&amp;\ddots&amp;5\<br>    2&amp;5&amp;6\<br>\end{matrix}<br>$$<br>8. 行列式<br>  对齐方式：在{array}后以{}逐行统一声明<br>  左对齐：l；居中：c；右对齐：r<br>  竖直线：在声明对齐方式时，插入|建立竖直线<br>  插入水平线：\hline</p>  <pre class="line-numbers language-none"><code class="language-none">\left|\begin{array}{cccc}  1&amp;2&amp;3\\  5&amp;3&amp;4\\  8&amp;9&amp;10\end{array}\right|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\left|<br>\begin{array}{ccc}<br>    1&amp;2&amp;3\<br>    5&amp;3&amp;4\<br>    8&amp;9&amp;10<br>\end{array}<br>\right|<br>$$<br>9. 方程组<br> ``<br>$$<br>\begin{cases}<br>\cfrac{n}{2}, &amp;n\geq 2\<br>3n + 1, &amp;n\leq 1\<br>\end{cases}<br>$$<br> </p><pre class="line-numbers language-none"><code class="language-none">\begin{cases}\cfrac{n}{2}, &amp;n\geq 2\\3n + 1, &amp;n\leq 1\\\end{cases}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><ol><li>小括号<code>$(x+y)$</code>-&gt; $(x+y)$</li><li>中括号<code>$[x+y]$</code>-&gt; $[x+y]$</li><li>大括号<code>$\{ x+y \}$</code>-&gt;  ${ x+y }$</li></ol><h2 id="图形符号"><a href="#图形符号" class="headerlink" title="图形符号"></a>图形符号</h2><ol><li>上箭头<code>$\uparrow$</code>-&gt; $\uparrow$</li><li>上箭头<code>$\Uparrow$</code>-&gt; $\Uparrow$</li></ol><h2 id="字体转换"><a href="#字体转换" class="headerlink" title="字体转换"></a>字体转换</h2><p>\rm　　罗马体　　　　　　　\it　　意大利体<br>\bf　　黑体　　　　　　　　\cal 　花体<br>\sl　　倾斜体　　　　　　　\sf　　等线体<br>\mit 　数学斜体　　　　　　\tt　　打字机字体<br>\sc　　小体大写字母<br>$\cal{我是花体}$<br>$\it{我是意大利体}$</p><hr>]]></content>
      
      
      <categories>
          
          <category> Mathjax </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串哈希</title>
      <link href="/2021/10/25/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/zi-fu-chuan-ha-xi/"/>
      <url>/2021/10/25/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/zi-fu-chuan-ha-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>对字符串算出前缀和哈希,这样就可以通过左右端点算出区间的和<br>对<code>P</code>的取值取P=131,P=13331.</p></blockquote><h2 id="前缀和哈希公式推导"><a href="#前缀和哈希公式推导" class="headerlink" title="前缀和哈希公式推导"></a>前缀和哈希公式推导</h2><blockquote><p>在这里 p=131</p><p>我们可以用<code>p[]</code>数组来保存 p 的次幂</p><p>令<br>S=”abc”<br>A=”abcd”<br>T=”abcde”<br>T=S+”de”,<br>单个字符的值为: $(s[i]- a+1)*p^{n-i}$<br>由<br>$H(S)=1\times p^2+2\times p+3$<br>$H(A)=1\times p^3+2\times p^2+3\times p^1+4$<br>所以<br>$H(A)=H(S)\times p+4$<br>由此递推出一个字符串的哈希递推求的过程<br>$A=S\times p + d $<br>$H(A)=H(S)\times p+(s[i] - a + 1)$</p></blockquote><h2 id="区间和公式推导"><a href="#区间和公式推导" class="headerlink" title="区间和公式推导"></a>区间和公式推导</h2><blockquote><p>对于<code>T</code>和<code>S</code>相差<code>"de"</code>如何求出<code>"de"</code>的区间和<br>令X = “de”<br>$H(X)=H(T)-H(S) \times p^2$<br>所以对于一个字符串给出右端点和左端点就可以算出区间和<br>区间和=<br>$s [ r ] - s [ l - 1 ]\ast  p [ r -l + 1 ]$</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//一般字符串哈希都是从1开始:好处理</span><span class="token keyword">const</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">131</span><span class="token comment">//区间和</span>ull <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> h<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">[</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//预处理</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> base<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> hash </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2021/10/25/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/kmp-wait/"/>
      <url>/2021/10/25/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/kmp-wait/</url>
      
        <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p> ne数组的求法是通过模式串自己与自己进行匹配操作得出来</p><h2 id="KMP匹配时间复杂度"><a href="#KMP匹配时间复杂度" class="headerlink" title="KMP匹配时间复杂度"></a>KMP匹配时间复杂度</h2><p>$O(n+m)$<br>n为模式串长度,m为匹配串的长度</p><h2 id="朴素求ne数组的时间复杂度"><a href="#朴素求ne数组的时间复杂度" class="headerlink" title="朴素求ne数组的时间复杂度"></a>朴素求ne数组的时间复杂度</h2><p>$O(n^2)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token comment">// 朴素求ne数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            j                <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">//</span>    <span class="token punctuation">}</span><span class="token comment">//匹配操作</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>             cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断素数</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/pan-duan-su-shu/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/zhi-shu/pan-duan-su-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(logn)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">/</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/kuai-su-mi/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/kuai-su-mi/</url>
      
        <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>求 $a^b$ % $q$ 的值</p></blockquote><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>$O(log_2b)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">LL <span class="token function">qmi</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    LL res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">%</span> p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> p<span class="token punctuation">;</span>        b <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a <span class="token operator">%</span> p<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/kuo-zhan-ou-ji-li-de/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/kuo-zhan-ou-ji-li-de/</url>
      
        <content type="html"><![CDATA[<h4 id="1-求最大公约数"><a href="#1-求最大公约数" class="headerlink" title="1.求最大公约数"></a>1.求最大公约数</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//greatest common divisor</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-求最小公倍数"><a href="#2-求最小公倍数" class="headerlink" title="2.求最小公倍数"></a>2.求最小公倍数</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Least Common Multiple </span><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-扩展欧几里得公式、"><a href="#3-扩展欧几里得公式、" class="headerlink" title="3.扩展欧几里得公式、"></a>3.扩展欧几里得公式、</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>设<br>$$ax_1+by_1=gcd(a,b)$$<br>$$bx_2+(a \mod b)y_2=gcd(b,a\mod b)$$<br>由<br>$$gcd(a,b)=gcd(b,a\mod b)$$<br>可得:<br>$$ax_1+by_1=bx_2+(a\mod b)\cdot y_2$$<br>$$=bx_2+(a-(a/b)\cdot b)\cdot y_2$$<br>$$=ay_2+bx_2-(a/b)\cdot by_2$$<br>即<br>$$ax_1+by_1=ay_2 + b(x_2-(a/b)\cdot  y_2)$$<br>根据恒等定理,对应项相等，得<br>$$x_1=y_2 $$<br>$$y_1=x_2-(a/b)\cdot y2$$<br>这样我们就得到了<br><code>x1</code>，<code>y1</code>的值基于<code>x2</code>，<code>y2</code>，所以我们可以通过递归求解。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><p>写法一：便于理解</p><pre class="line-numbers language-none"><code class="language-none">int ex_gcd(int a,int b,int &amp;x,int &amp;y){    if(!b){        x = 1, y = 0;        return a;    }    else{        int d = ex_gcd(b, a%b, x, y); //d=gcd(a,b)        int t = x;        x = y;        y = t - (a / b) * y;        return d;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>写法二：简短</p><pre class="line-numbers language-none"><code class="language-none">int ex_gcd(int a,int b,int &amp;x,int &amp;y){        if(!b){            x = 1, y = 0;            return a;        }        else{            int d = ex_gcd(b, a % b, y, x);            y = y - (a / b) * x;            return d;        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 欧几里得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/shu-zhuang-shu-zu/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="1-单点更新、区间查询"><a href="#1-单点更新、区间查询" class="headerlink" title="1.单点更新、区间查询"></a>1.单点更新、区间查询</h3><h4 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">//算出 x 的最低位的 1 对应的值</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单点更新"><a href="#单点更新" class="headerlink" title="单点更新"></a>单点更新</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment">//在位置i加上x</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token function">updata</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输入初值的时候，也相当于更新了值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment">//求c[1,i]的和 == a[1,i]的和</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-单点更新、单点查询"><a href="#2-单点更新、单点查询" class="headerlink" title="2.单点更新、单点查询"></a>2.单点更新、单点查询</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><code>构造</code>和<code>单点更新</code>代码同上仅仅是传入的<code>x</code>不同<br><code>x</code>传入的值为数组的差分值<br>这样区间求和就变成求单点的值</p><h4 id="单点更新-1"><a href="#单点更新-1" class="headerlink" title="单点更新"></a>单点更新</h4><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment">//在位置i加上x</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h4><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment">//求c[1,i]的和 == a[i]的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-区间更新、区间查询"><a href="#3-区间更新、区间查询" class="headerlink" title="3.区间更新、区间查询"></a>3.区间更新、区间查询</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p>把<code>x-y</code>区间内的所有值全部加上k或者减去k，然后查询操作是问某个点的值<br>用两个树状数组来存<br>一个存储差分数组:$d1[i]$<br>一个存储:$d2[i] = d1[i]*(i-1)$</p></blockquote><h4 id="推导过程"><a href="#推导过程" class="headerlink" title="推导过程"></a>推导过程</h4><p>$a_1+a_2+a_3···+a_n$<br>$=c_1+(c_1+c_2)+(c_1+c_2+c_3)····+(c_1+c_2+···c_n)$<br>$=nc_1+(n-1)c_2+(n-1)c_3····+c_n$<br>$=n(c_1+c_2+c_3+····c_n)-(0+c_2+2\cdot c_3+···(n-1)\cdot c_n)$<br>由此可以用d1和d2进行区间求和</p><h4 id="区间更新"><a href="#区间更新" class="headerlink" title="区间更新"></a>区间更新</h4><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 将[l,r]的值全部加上x</span><span class="token comment">//-&gt;updata(l,x,len);</span><span class="token comment">//-&gt;updata(r,-x,len);</span><span class="token keyword">void</span> <span class="token function">updata</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment">//将i到len的值全部加上x</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>        d2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>        i <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间查询-1"><a href="#区间查询-1" class="headerlink" title="区间查询"></a>区间查询</h4><p>求[1,i]的和</p><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment">//求[1,i]的和</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> cnt <span class="token operator">*</span> d1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> d2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/zi-dian-shu-wait/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/shu-ju-jie-gou/zi-dian-shu-wait/</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//插入操作</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>idx<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//查询操作</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> son<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/tu-lun/ran-se-fa-pan-ding-er-fen-tu/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/tu-lun/ran-se-fa-pan-ding-er-fen-tu/</url>
      
        <content type="html"><![CDATA[<h3 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h3><p><code>思路</code></p><blockquote><p>将左边染色为<code>1</code>,右边染色为<code>2</code>,那么就可以通过<code>3-x</code>转换染色值<br>通过dfs遍历所有的点以及他的出边,如果这个点没有染色过,那么就将这个点和他的所有出边染成相反颜色,如果说这个点的颜色和之前更新过的出边的颜色相同,那么说明不合法.</p></blockquote><p><code>时间复杂度</code><br>$O(n+m)$<br><code>代码实现如下</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> color<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//  1:左边;2:右边;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    color<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3-1=2,3-2=1;通过这个算式转换;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token comment">//如果出现颜色相同的情况,说明不合法            </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//邻接表需要初始化为-1</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2021/10/23/summary/acwing/suan-fa-ji-chu/tu-lun/dijkstra/"/>
      <url>/2021/10/23/summary/acwing/suan-fa-ji-chu/tu-lun/dijkstra/</url>
      
        <content type="html"><![CDATA[<h3 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h3><p><code>思路</code></p><blockquote><p>初始化<code>dis[n]</code>为正无穷大<br>其中<code>dis[i]</code>表示的是<code>起点</code>到<code>i</code>的最短距离<br>每次寻找离端点<code>x</code>最近并且没有被用过的点<code>t</code>,通过<code>t</code>尝试去松弛<code>起点</code>到达<code>其他点</code>的距离;</p></blockquote><p><code>优化</code></p><blockquote><p>dijk存在优化的过程在于每次寻找最近且没有被用过的点<code>t</code>这个过程可以用优先队列来优化.</p></blockquote><p><code>限制</code></p><blockquote><p>权值均为正值</p></blockquote><p><code>时间复杂度</code><br>$O(n^2)$<br><code>朴素dijk代码实现</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//用邻接矩阵,初始化为正无穷大</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>时间复杂度</code><br>$ O(mlogn)$</p><p><code>djik(堆优化)</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//用邻接表</span><span class="token keyword">void</span> <span class="token function">dijk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token comment">/*    pair默认排序是按照a.first==b.first?a.first&lt;b.first:a.second&gt;b.second;    所以每次找最近的点,应该要把距离放在first    */</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> vur <span class="token operator">=</span> t<span class="token punctuation">.</span>second  <span class="token punctuation">,</span> distance <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>vur<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>vur<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> distance <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        st<span class="token punctuation">[</span>vur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 模版 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64位整数乘法</title>
      <link href="/2021/10/12/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/64-wei-cheng-fa/"/>
      <url>/2021/10/12/summary/acwing/suan-fa-ji-chu/shu-xue-zhi-shi/64-wei-cheng-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(log(min(a,b)))</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>$求a乘b对p取模的值,其中1\le a,b,p\le 10^{18}$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-none"><code class="language-none">LL GetMul(LL a, LL b, LL q){    int res = 0;    while (b) {        if (b &amp; 1)            res = (res + a) % q;        b &gt;&gt;= 1;        a = a * 2 % q;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数学知识 </tag>
            
            <tag> 模版 </tag>
            
            <tag> 64位整数乘法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/2021/09/27/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/qian-zhui-he/"/>
      <url>/2021/09/27/summary/acwing/suan-fa-ji-chu/ji-chu-suan-fa/qian-zhui-he/</url>
      
        <content type="html"><![CDATA[<h3 id="1-一维前缀和"><a href="#1-一维前缀和" class="headerlink" title="1.一维前缀和"></a>1.一维前缀和</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>通过对数组的预处理,可以通过O(1)的复杂度快速的算出</p><p>$[L,R]的区间和=sum[R]-sum[L-1]$</p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>输入一个长度为 n 的整数序列。<br>接下来再输入 m 个询问，每个询问输入一对 l,r。<br>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2021-10-31 16:54:34 * @LastEditTime: 2021-10-31 16:55:39 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//预处理</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二维前缀和"><a href="#2-二维前缀和" class="headerlink" title="2.二维前缀和"></a>2.二维前缀和</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>通过对二维数组的预处理可以O(1)的时间复杂度算出<br>以$(x_1,y_1)$为左上角,$(x_2,y_2)$为右下角的矩阵的面积</p><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>输入一个 n 行 m 列的整数矩阵，再输入 q 个询问，每个询问包含四个整数 x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。<br>对于每个询问输出子矩阵中所有数的和。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//预处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//查询</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> x1 <span class="token operator">&gt;&gt;</span> y1 <span class="token operator">&gt;&gt;</span> x2 <span class="token operator">&gt;&gt;</span> y2<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>x1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Not Adding</title>
      <link href="/1984/01/24/summary/codeforces/20220115-766d2/1627d.not-adding/"/>
      <url>/1984/01/24/summary/codeforces/20220115-766d2/1627d.not-adding/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * @Autor: Zver * @Date: 2022-01-16 00:14:13 * @LastEditTime: 2022-01-18 23:07:50 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">/**** * 1627D. Not Adding * https://codeforces.com/contest/1627/problem/D * 题目描述: *  给你一个数组,如果number=gcd(a[i],a[j])没有出现在这个数组里面那么就可以添加进来, *  新添加的number也可以与其他进行gcd *  问你最多可以添加多少个 * *  时间为2秒 * Tag: *  1.数论 *  2.枚举 * 思路 *  1.gcd(j * i,(j+1) * i,(j+2) * i,····) = i *  2.枚举 i 的倍数在数组中能否出现两个以上,如果出现那么将他们全部gcd *    如果最终的gcd结果为 i 那么说明 i 是最大的gcd可以被加入到数组之中 *  3.新加入的gcd的范围一定小于数组的最大值 *  */</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> b <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1e6</span><span class="token punctuation">;</span><span class="token keyword">int</span> _gcd<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> in<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>        maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//gcd(j * i,(j + 1) * i,(j + 2) * i,····)=i</span>    <span class="token comment">//枚举 i,能否找到两个以上 i 的倍数 ,使得i能够加入到数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 枚举 gcd = i 是否能出现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token comment">// j 表示的是i 的倍数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 数组中存在 j 即 i 的倍数</span>                _gcd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>_gcd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        cnt <span class="token operator">+=</span> _gcd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">-</span> n <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
